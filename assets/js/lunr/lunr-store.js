var store = [{
        "title": "First Step",
        "excerpt":"Sapa dunia dengan Java   public class HelloWorld {    public static void main(String[] args) {       System.out.println(\"Hello world!\");    } }  Atau Anda juga bisa menyapanya dengan VB   Public Sub Main()    MsgBox \"Hello world!\" End Sub  ","categories": ["Uncategorized"],
        "tags": [],
        "url": "http://coding4ever.net/blog/2009/12/28/first-step/",
        "teaser": null
      },{
        "title": "Mengganti posisi tombol default fungsi MsgBox",
        "excerpt":"Lihat kode berikut :   Private Sub cmdKeluar_Click()    If MsgBox(\"Apakah Anda ingin keluar ???\", vbExclamation + vbYesNo, \"Konfirmasi\") = vbYes Then End End Sub  dan lihat hasilnya      dan bagaimana jika ingin hasilnya seperti ini :      gampang tinggal rubah kodenya menjadi seperti ini   Private Sub cmdKeluar_Click()    If MsgBox(\"Apakah Anda ingin keluar ???\", vbExclamation + vbYesNo + vbDefaultButton2, \"Konfirmasi\") = vbYes Then End End Sub  Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": [],
        "url": "http://coding4ever.net/blog/2009/12/28/mengganti-posisi-tombol-default-fungsi-msgbox/",
        "teaser": null
      },{
        "title": "Daftar Fungsi Rahasia dan Penggunaannya",
        "excerpt":"Sengaja judulnya saya buat heboh :grin: padahal sih cuma fungsi biasa yang sering saya gunakan dalam pengembangan aplikasi.   1. Mendapatkan nama bulan dalam bahasa indonesia   Public Function getBulanIndonesia(ByVal bulan As Integer) As String    Select Case bulan       Case 1: getBulanIndonesia = \"Januari\"       Case 2: getBulanIndonesia = \"Februari\"       Case 3: getBulanIndonesia = \"Maret\"       Case 4: getBulanIndonesia = \"April\"       Case 5: getBulanIndonesia = \"Mei\"       Case 6: getBulanIndonesia = \"Juni\"       Case 7: getBulanIndonesia = \"Juli\"       Case 8: getBulanIndonesia = \"Agustus\"       Case 9: getBulanIndonesia = \"September\"       Case 10: getBulanIndonesia = \"Oktober\"       Case 11: getBulanIndonesia = \"November\"       Case 12: getBulanIndonesia = \"Desember\"    End Select End Function  Contoh :   Debug.Print getBulanIndonesia(Month(Now))    2. Mendapatkan nama hari dalam bahasa indonesia   Public Function getHariIndonesia(ByVal hari As Integer) As String    Select Case hari       Case 1: getHariIndonesia = \"Minggu\"       Case 2: getHariIndonesia = \"Senin\"       Case 3: getHariIndonesia = \"Selasa\"       Case 4: getHariIndonesia = \"Rabu\"       Case 5: getHariIndonesia = \"Kamis\"       Case 6: getHariIndonesia = \"Jum'at\"       Case Else: getHariIndonesia = \"Sabtu\"    End Select End Function  Contoh :   Debug.Print getHariIndonesia(Weekday(Now))  3. Mendapatkan jumlah hari dalam satu bulan   Public Function getJumlahHari(ByVal bulan As Integer, ByVal tahun As Long) As Integer    getJumlahHari= Day(DateSerial(tahun, bulan + 1, 0)) End Function  Contoh :   Debug.Print getJumlahHari(Month(Now), Year(Now))  4. Mendapatkan angka dalam string   Private Function getAngka(ByVal strString As String) As String    Dim strAngka    As String    Dim i           As Long&lt;/pre&gt;     For i = 1 To Len(strString)       If (Val(Mid(strString, i, 1)) &gt; 0) Or (Mid(strString, i, 1) = \"0\") Then          strAngka = strAngka &amp; Mid(strString, i, 1)       End If    Next    getAngka = strAngka End Function  Contoh:   Debug.Print getAngka(\"coding4ever\") 'output = 4  5. Validasi Input khusus angka   Public Function validasiAngka(KeyAscii As Integer) As Integer    Dim strValid As String     strValid = \"0123456789\"    If InStr(strValid, Chr(KeyAscii)) = 0 And Not (KeyAscii = vbKeyBack) Then       validasiAngka = 0    Else       validasiAngka = KeyAscii    End If End Function  Contoh:   Private Sub txtJumlah_KeyPress(KeyAscii As Integer)    KeyAscii = validasiAngka(KeyAscii) End Sub  6. Validasi input khusus huruf   Public Function validasiHuruf(KeyAscii As Integer) As Integer    Dim strValid As String     strValid = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"    If InStr(strValid, Chr(KeyAscii)) = 0 And Not (KeyAscii = vbKeyBack) Then       validasiHuruf = 0    Else       validasiHuruf = KeyAscii    End If End Function  Contoh:   Private Sub txtNama_KeyPress(KeyAscii As Integer)    KeyAscii = validasiHuruf(KeyAscii) End Sub  7. Konversi ke huruf besar   Public Function hurufBesar(KeyAscii As Integer) As Integer    hurufBesar = Asc(UCase(Chr(KeyAscii))) End Function  Contoh:   Private Sub txtNama_KeyPress(KeyAscii As Integer)    KeyAscii = hurufBesar(KeyAscii) End Sub  8. Mengecek file ada atau tidak   Public Function fileExists(ByVal strNamaFile As String) As Boolean    If Not (Len(strNamaFile) &gt; 0) Then fileExists = False: Exit Function    If Dir$(strNamaFile, vbNormal) = \"\" Then       fileExists = False    Else       fileExists = True    End If End Function  Contoh:   Debug.Print fileExists(\"c:\\text.txt\")  9. Mengecek direktori/folder ada atau tidak   Public Function dirExists(ByVal strNamaFile As String) As Boolean    If Not (Len(strNamaFile) &gt; 0) Then dirExists = False: Exit Function    If Dir$(strNamaFile, vbDirectory) = \"\" Then       dirExists = False    Else       dirExists = True    End If End Function  Contoh:   Debug.Print dirExists(\"c:\\windows\")  10. Anti tanda ‘ tunggal   Karakter tanda ‘ dalam kasus-kasus tertentu bisa menyebabkan bug/error pada program. Misalkan pada saat pemanggilan perintah INSERT atau UPDATE pada pemrograman database.   Lihat kode berikut:   Private Sub cmdUpdateNama_Click()    Dim nama    As String     nama = \"Ja'far\"    conn.Execute \"UPDATE siswa SET nama = '\" &amp; nama &amp; \"' WHERE nis = '1234'\" 'error karena ada tanda petik di var nama End Sub  cara termudah untuk menghandle kasus diatas cukup dengan menambahkan fungsi berikut :   Public Function rep(ByVal Kata As String) As String    rep = Replace(Kata, \"'\", \"''\") End Function  kemudian melakukan sedikit revisi kode :   Private Sub cmdUpdateNama_Click()    Dim nama    As String     nama = \"Ja'far\"    conn.Execute \"UPDATE siswa SET nama = '\" &amp; rep(nama) &amp; \"' WHERE nis = '1234'\" 'sudah tidak error lagi End Sub  11. Mendapatkan selisih hari dalam 2 tanggal   Public Function getSelisihHari(ByVal tglMulai As String, ByVal tglSelesai As String) As Long    getSelisihHari = DateTime.DateDiff(\"d\", tglMulai, tglSelesai) End Function  Contoh:      Debug.Print getSelisihHari(\"2009/12/1\", \"2009/12/5\") 'output = 4  12. Huruf Pertama Besar   Public Function firstUCase(ByVal value As String) As String     firstUCase = UCase(Mid$(value, 1, 1)) &amp; Mid(value, 2) End Function  Contoh:      Debug.Print firstUCase(\"hello world\") 'output = Hello world  Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["asc","bulan","fungsi","hari","keyascii"],
        "url": "http://coding4ever.net/blog/2009/12/29/daftar-fungsi-rahasia-dan-penggunaannya/",
        "teaser": null
      },{
        "title": "Membuat paket instalasi update program menggunakan NSIS",
        "excerpt":"Masalah update program adalah masalah klasik untuk para programmer aplikasi desktop, bagaimana tidak biasanya kita selalu disibukan dengan masalah yang satu ini. Update… update… dan update … :grin: apalagi dengan jumlah klien yang banyak wahhhh cape deh.   Sebenarnya proses update sendiri pada dasarnya adalah masalah sederhana “tinggal copy program yang baru untuk menimpa program yang lama”. Permasalahan biasanya muncul jika yang harus melakukan update adalah klien kita yang benar^5 END USER :grin:. Ya mungking cuma bisa ngetik di word atau mantan operator dos yang baru pindah ke windows de el el.   Sehingga dengan adanya program update yang baik “User nyaman kita pun tenang” :grin:.     NSIS (Nullsoft Scriptable Install System) merupakan tool untuk membuat paket instalasi dengan lisensi open source.   Ada satu hal penting sebelum kita bisa membuat paket instalasi update program yaitu mengetahui informasi dimana program kita diinstall.   Ada banyak cara untuk melakukan hal ini :   1. Mencatat lokasi program pada saat instalasi   InstallDirRegKey HKCU \"Software\\PT ALBASI\\SPBB\" \"installDir\"  2. Mencatat lokasi program pada saat start up   contoh menggunakan vb   Public Sub Main()    Call saveString(HKEY_CURRENT_USER, \"Software\\PT ALBASI\\SPBB\", \"installDir\", App.Path) End Sub  Contoh skrip sederhana untuk membuat paket instalasi update :   !define APP_NAME \"SPBB PT ALBASI\"  Name \"${APP_NAME}\" OutFile \"output\\updateAlbasi.exe\" Icon \"setup.ico\" ShowInstDetails nevershow XPStyle on RequestExecutionLevel admin  Var INSTALL_DIR  Function .onInit     MessageBox MB_YESNO|MB_ICONQUESTION \"Apakah proses update ${APP_NAME} ingin dilanjutkan ?\" /SD IDYES IDYES yes IDNO no      yes:     SetSilent silent     Goto done      no:     Abort      done:     ;ambil informasi lokasi instalasi     ReadRegStr $INSTALL_DIR HKCU \"Software\\PT ALBASI\\SPBB\" \"installDir\"  \tIfFileExists $INSTALL_DIR\\Albasi.exe lanjut batal \tbatal: \t\tMessageBox MB_ICONSTOP|MB_OK \"Lokasi instalasi ${APP_NAME} tidak ditemukan. Proses update batal\"         Abort  \tlanjut:      FindWindow $0 \"\" \"${APP_NAME}\"     StrCmp $0 0 lanjut2         MessageBox MB_ICONSTOP|MB_OK \"Program SPBB Albasi sedang dijalankan.$\\nSilakan tutup aplikasi tersebut terlebih dahulu.\"         Abort      lanjut2:     SetOutPath \"$INSTALL_DIR\"     File \"core\\exe\\Albasi.exe\" ;file program utama      MessageBox MB_ICONINFORMATION|MB_OK \"Proses update ${APP_NAME} selesai\" FunctionEnd  Section \"\" SectionEnd  Untuk memperkecil ukuran file update Anda bisa menggunakan plugin VPatch (sudah include pada saat instalasi NSIS) dengan menggunakan VPatch yang dicatat hanya perbedaan versi sebelumnya dengan yang terakhir sehingga bisa memperkecil ukuran file update.   Artikel berikutnya masih dengan judul yang sama tetapi menggunakan inno setup.   Selamat mencoba :blush:  ","categories": ["NSIS","Tools Installer"],
        "tags": ["instalasi","nsis","paket instalasi","update program"],
        "url": "http://coding4ever.net/blog/2009/12/29/membuat-paket-instalasi-update-program-menggunakan-nsis/",
        "teaser": null
      },{
        "title": "Membuat paket instalasi update program menggunakan Inno Setup",
        "excerpt":"Masalah update program adalah masalah klasik untuk para programmer aplikasi desktop, bagaimana tidak biasanya kita selalu disibukan dengan masalah yang satu ini. Update… update… dan update … :grin: apalagi dengan jumlah klien yang banyak wahhhh cape deh.   Sebenarnya proses update sendiri pada dasarnya adalah masalah sederhana “tinggal copy program yang baru untuk menimpa program yang lama”. Permasalahan biasanya muncul jika yang harus melakukan update adalah klien kita yang benar^5 END USER :grin:. Ya mungking cuma bisa ngetik di word atau mantan operator dos yang baru pindah ke windows de el el.     Sehingga dengan adanya program update yang baik “User nyaman kita pun tenang” :grin:.   Inno Setup merupakan tool untuk membuat paket instalasi dengan lisensi open source.   Ada satu hal penting sebelum kita bisa membuat paket instalasi update program yaitu mengetahui informasi dimana program kita diinstall.   Ada banyak cara untuk melakukan hal ini :   1. Mencatat lokasi program pada saat instalasi   Contoh:   [Registry] Root: HKCU; Subkey: \"Software\\PT ALBASI\\SPBB\"; ValueName: \"installDir\"; ValueType: String; ValueData: {app}; Flags: uninsdeletevalue  2. Mencatat lokasi program pada saat start up   Contoh menggunakan vb:   Public Sub Main()    Call saveString(HKEY_CURRENT_USER, \"Software\\PT ALBASI\\SPBB\", \"installDir\", App.Path) End Sub  Contoh skrip sederhana untuk membuat paket instalasi update :   [Setup] AppName=Update Sistem Pembelian Bahan Baku AppVerName=Update Sistem Pembelian Bahan Baku Versi 1.0.0.00 AppPublisher=K4m4r82's Laboratory AppPublisherURL=http://coding4ever.wordpress.com/ AppVersion=1.0.0.00 AppCopyright=Copyright © 2009. K4m4r82's Laboratory VersionInfoVersion=1.0.0.00 OutputBaseFilename=updateAlbasi DisableProgramGroupPage=yes CreateAppDir=no Compression = lzma SolidCompression = yes LanguageDetectionMethod=none ShowLanguageDialog=no PrivilegesRequired = admin SetupIconFile=Setup.ico WizardImageFile=SetupModern21.bmp WizardSmallImageFile=SetupModernSmall21.bmp CreateUninstallRegKey=no  [Languages] Name: ina; MessagesFile: compiler:Indonesia.isl  [Files] Source: \"core\\exe\\Albasi.exe\"; DestDir: \"{code:GetAppPath}\"; Flags: ignoreversion  [Code] var   installDir : string;  function InitializeSetup(): Boolean; var   ResultCode: Integer;   FileName: string;  begin   // CEK APLIKASI SEDANG JALAN ATAU TIDAK   if FindWindowByWindowName('SPBB PT ALBASI') &gt; 0 then   begin       MsgBox('Program SPBB PT ALBASI sedang dijalankan.'#10'Silakan tutup aplikasi tersebut terlebih dahulu.', mbInformation, MB_OK);       Result := False;   end    Result := True;   RegQueryStringValue(HKEY_CURRENT_USER, 'Software\\PT ALBASI\\SPBB', 'installDir', installDir);    if installDir = '' then   begin       MsgBox('Lokasi instalasi Program SPBB PT ALBASI tidak ditemukan.'#10'Proses update batal.', mbInformation, MB_OK);       Result := False;   end   else   begin       Result := True;   end end;  function GetAppPath(Param: string): string; begin   Result := installDir; end;  Untuk memperkecil ukuran file update Anda bisa menggunakan plugin VPatch dengan menggunakan VPatch yang dicatat hanya perbedaan versi sebelumnya dengan yang terakhir sehingga bisa memperkecil ukuran file update. File patch yang dihasilkan juga bisa digunakan untuk inno setup   Selamat mencoba :blush:  ","categories": ["Inno Setup","Tools Installer"],
        "tags": ["inno setup","instalasi","paket instalasi","update program"],
        "url": "http://coding4ever.net/blog/2009/12/29/membuat-paket-instalasi-update-program-menggunakan-inno-setup/",
        "teaser": null
      },{
        "title": "Membuat fungsi koneksi untuk beberapa database (Firebird, MySQL, Ms SQL Server dan Ms Access)",
        "excerpt":"1. Tambahkan sebuah modul dan copy paste kode berikut :   Public conn As ADODB.Connection  Public Enum TIPE_DATABASE    FIREBIRD = 1    MYSQL = 2    SQLSERVER = 3    MSACCESS = 4 End Enum  Public Function connToDB(ByVal tipeDb As TIPE_DATABASE, Optional ByVal serverName As String = \"\", _    Optional ByVal userName As String = \"\", Optional ByVal userPass As String = \"\", _    Optional ByVal dbPath As String = \"\", Optional ByVal dbName As String = \"\") As Boolean     Dim strCon As String     On Error GoTo errHandle     Select Case tipeDb       Case FIREBIRD          strCon = \"DRIVER=Firebird/Interbase(r) Driver;UID=\" &amp; userName &amp; \";PWD=\" &amp; userPass &amp; \";\" &amp; _          \"DBNAME=\" &amp; serverName &amp; \":\" &amp; dbPath &amp; \"\\\" &amp; dbName &amp; \"\"        Case MYSQL          strCon = \"DRIVER={MySQL ODBC 5.1 Driver};SERVER=\" &amp; serverName &amp; \";DATABASE=\" &amp; dbName &amp; \";\" &amp; _          \"UID=\" &amp; userName &amp; \";PWD=\" &amp; userPass &amp; \";OPTION=3\"        Case SQLSERVER          strCon = \"Provider=SQLOLEDB.1;User ID=\" &amp; userName &amp; \";Pwd=\" &amp; userPass &amp; \";\" &amp; _          \"Initial Catalog=\" &amp; dbName &amp; \";Data Source=\" &amp; serverName &amp; \"\"        Case MSACCESS         If Len(userPass) &gt; 0 Then            strCon = \"Provider=Microsoft.Jet.OLEDB.4.0;Data Source= \" &amp; dbPath &amp; \"\\\" &amp; dbName &amp; \";\" &amp; _            \"Jet OLEDB:Database Password=\" &amp; userPass &amp; \"\"         Else            strCon = \"Provider=Microsoft.Jet.OLEDB.4.0;Data Source= \" &amp; dbPath &amp; \"\\\" &amp; dbName &amp; \"\"         End If    End Select     Set conn = New ADODB.Connection    conn.ConnectionString = strCon    conn.Open     connToDB = True     Exit Function errHandle:    connToDB = False End Function  2. Pada form tambahkan sebuah objek command dan set properties Name = cmdTesKoneksi   copy paste kode berikut :   Private Sub cmdTesKoneksi_Click()    Dim result  As Boolean     'Firebird    result = connToDB(FIREBIRD, \"127.0.0.1\", \"SYSDBA\", \"masterkey\", \"d:\\data\", \"db_akademik.fdb\")    Debug.Print result     'MySQL    result = connToDB(MYSQL, \"127.0.0.1\", \"root\", \"masterkey\", , \"db_akademik\")    Debug.Print result     'SQL Server 2000    result = connToDB(SQLSERVER, \"127.0.0.1\", \"sa\", \"masterkey\", , \"db_akademik\")    Debug.Print result     'Ms Access - tanpa password    result = connToDB(MSACCESS, , , , \"d:\\data\", \"db_akademik.mdb\")    Debug.Print result     'Ms Access - menggunakan password    result = connToDB(MSACCESS, , , \"masterkey\", \"d:\\data\", \"db_akademik.mdb\")    Debug.Print result End Sub  Untuk nilai semua parameter fungsi connToDB disesuaikan dengan kondisi komputer Anda. Selamat mencoba :blush:  ","categories": ["Visual Basic","MySql","Firebird","SQL Server"],
        "tags": ["Database","firebird","koneksi","koneksi ke firebird","koneksi ke ms acess","koneksi ke mysql","koneksi ke sql server","ms asccess","mysql","sql server"],
        "url": "http://coding4ever.net/blog/2009/12/29/membuat-fungsi-koneksi-untuk-beberapa-database-firebird-mysql-ms-sql-server-dan-ms-access/",
        "teaser": null
      },{
        "title": "Menambahkan menu baru di system menu",
        "excerpt":"Lihat system menu yang ada form berikut :      dan kita menginginkan system menunya menjadi seperti berikut :        Untuk memudahkan kita dalam memprogramnya download dulu komponen vbAccelerator VB6 PopMenu Control disini, ubah nama filenya menjadi cPopMenu6.rar extract kemudian jalankan file install.cmd   Jika gagal registrasikan komponen secara manual dengan cara klik tombol Start -&gt; Run. Kemudian ketik : regsvr32 cPopMenu6.ocx   Langkah berikutnya adalah membuat project baru kemudian tambahkan komponen (CTRL + T) vbAccelerator VB6 PopMenu Control jangan lupa langsung dimasukan ke form      copy paste kode berikut :   Option Explicit  Private mMenuSeparator  As Long Private mMenuAbout      As Long Private mMenuBantuan    As Long  Private Sub Form_Load()     With PopMenu1         mMenuSeparator = .SystemMenuAppendItem(\"-\")         mMenuBantuan = .SystemMenuAppendItem(\"&amp;Bantuan\")         mMenuAbout = .SystemMenuAppendItem(\"&amp;Info Program\")     End With End Sub  Private Sub PopMenu1_SystemMenuClick(ItemNumber As Long)     Select Case ItemNumber         Case mMenuAbout             'todo : panggil frmAbout disini          Case mMenuBantuan             'todo : panggil file help disini     End Select End Sub  Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["add system menu","system menu"],
        "url": "http://coding4ever.net/blog/2009/12/29/menambahkan-menu-baru-di-system-menu/",
        "teaser": null
      },{
        "title": "Menyimpan dan menampilkan foto di ms access",
        "excerpt":"Disini saya tidak akan menjelaskan bagaimana melakukan koneksi ke database access, intinya aplikasi Anda sudah siap menjalankan perintah SELECT, INSERT, UPDATE, dan DELETE. Jika Anda masih kesulitan bisa dilihat disini.   Untuk kasus disini kita akan menyimpan data mahasiswa dengan tiga field saja, lihat gambar berikut :      Khusus untuk field foto tipe yang dipilih adalah OLE Object, kita langsung aja copy paste kode berikut di module :     Option Explicit  Public Const CHUNK_SIZE     As Long = 16384  Dim rsImage                 As ADODB.Recordset  Dim i                       As Long Dim lsize                   As Long Dim iChunks                 As Long Dim nFragmentOffset         As Long Dim lchunks                 As Long  Dim nHandle                 As Integer Dim varChunk()              As Byte  Public Function fileExists(ByVal strNamaFile As String) As Boolean     If Not (Len(strNamaFile) &gt; 0) Then fileExists = False: Exit Function      If Dir$(strNamaFile, vbNormal) = \"\" Then         fileExists = False     Else         fileExists = True     End If End Function  Public Sub closeRecordset(ByVal vRs As ADODB.Recordset)     On Error Resume Next      If Not (vRs Is Nothing) Then         If vRs.State = adStateOpen Then             vRs.Close             Set vRs = Nothing         End If     End If End Sub  Public Function addImageToDB(ByVal query As String, ByVal imageName As String, ByVal imageField As String) As Boolean     On Error GoTo errHandle      Set rsImage = New ADODB.Recordset     rsImage.Open query, conn, adOpenKeyset, adLockOptimistic     If Not rsImage.EOF Then         nHandle = FreeFile         Open imageName For Binary Access Read As nHandle         lsize = LOF(nHandle)         If nHandle = 0 Then Close nHandle          lchunks = lsize / CHUNK_SIZE         nFragmentOffset = lsize Mod CHUNK_SIZE          ReDim varChunk(nFragmentOffset)         Get nHandle, , varChunk()         rsImage(imageField).AppendChunk varChunk()          ReDim varChunk(CHUNK_SIZE)         For i = 1 To lchunks             Get nHandle, , varChunk()             rsImage(imageField).AppendChunk varChunk()             DoEvents         Next         rsImage.Update     End If     Call closeRecordset(rsImage)      addImageToDB = True      Exit Function errHandle:     addImageToDB = False End Function  Public Function getImageFromDB(ByVal query As String) As IPictureDisp     Dim sFile           As String      On Error GoTo errHandle      Set rsImage = New ADODB.Recordset     rsImage.Open query, conn, adOpenForwardOnly, adLockReadOnly     If Not rsImage.EOF Then         If Not IsNull(rsImage(0).Value) Then             nHandle = FreeFile              sFile = App.Path &amp; \"\\output.bin\"             If fileExists(sFile) Then Kill sFile             DoEvents              Open sFile For Binary Access Write As nHandle              lsize = rsImage(0).ActualSize             iChunks = lsize \\ CHUNK_SIZE             nFragmentOffset = lsize Mod CHUNK_SIZE              varChunk() = rsImage(0).GetChunk(nFragmentOffset)             Put nHandle, , varChunk()             For i = 1 To iChunks                  ReDim varChunk(CHUNK_SIZE) As Byte                   varChunk() = rsImage(0).GetChunk(CHUNK_SIZE)                  Put nHandle, , varChunk()                  DoEvents             Next             Close nHandle              Set getImageFromDB = LoadPicture(sFile, , vbLPColor)          Else             Set getImageFromDB = Nothing         End If      Else         Set getImageFromDB = Nothing     End If     Call closeRecordset(rsImage)      Exit Function errHandle:     Set getImageFromDB = Nothing End Function  Untuk di form cukup dengan kode sederhana berikut :   Private Sub cmdSimpan_Click()     'untuk format gambar bisa JPG atau BMP     strSql = \"INSERT INTO mhs (nim, nama) VALUES ('\" &amp; txtNIM.Text &amp; \"', '\" &amp; txtNama.Text &amp; \"')\"     conn.Execute strSql      If fileExists(txtLokasiFoto.Text) Then         strSql = \"SELECT nim, foto FROM mhs WHERE nim = '\" &amp; txtNIM.Text &amp; \"'\"         If Not addImageToDB(strSql, txtLokasiFoto.Text, \"foto\") Then MsgBox \"Foto mahasiswa gagal disimpan !\"     End If End Sub  Private Sub cmdTampil_Click()     strSql = \"SELECT foto FROM mhs WHERE nim = '\" &amp; txtNIM.Text &amp; \"'\"     Set picMhs.Picture = getImageFromDB(strSql) End Sub  Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["AppendChunk","GetChunk","menampilkan gambar","menyimpan gambar","ms access"],
        "url": "http://coding4ever.net/blog/2009/12/30/menyimpan-dan-menampilkan-foto-di-ms-access/",
        "teaser": null
      },{
        "title": "Membuat laporan dalam format Ms Excel",
        "excerpt":"Ada banyak cara untuk membuat laporan di visual basic, tiga diantaranya :      Data Report   Active Report   Crystal Report   Alternatif lain adalah dengan memanfaatkan program Ms Excel, untuk contoh disini saya akan menampilkan data siswa (no, nis, nama, nilai). Untuk menyederhanakan program saya akan menyimpan datanya di variabel array.     Copy paste kode berikut di modul :   Option Explicit  Public Const xlSolid                As Long = 1 Public Const xlContinuous           As Long = 1  Public Const xlCenter               As Long = -4108 Public Const xlBottom               As Long = -4107 Public Const xlRight                As Long = -4152 Public Const xlLeft                 As Long = -4131 Public Const xlTop                  As Long = -4160  Public Enum EFormatType     General = 1     Number = 2     Money = 3     Accounting = 4     Percentage = 5     Scientific = 6     Text = 7     ShortDate = 8     LongDate = 9     ShortTime = 10     LongTime = 11     NumberWithoutDecimal = 12 End Enum  Private Function GetFormatType(ByVal v_bytFormatType As EFormatType) As String     On Error Resume Next      'Add the left header     Select Case v_bytFormatType         Case General: GetFormatType = \"General\" 'Format as general         Case Number: GetFormatType = \"0.00\" 'Format as number         Case NumberWithoutDecimal: GetFormatType = \"0\"         Case Money: GetFormatType = \"#,##0\" 'Format as currency         Case Accounting: GetFormatType = \"_($* #,##0.00_);_($* (#,##0.00);_($* \"\"-\"\"??_);_(@_)\" 'Format as accounting         Case ShortDate: GetFormatType = \"dd/mm/yy\" 'Format as short date         Case LongDate: GetFormatType = \"dd mmm yyyy\" 'Format as long date         Case ShortTime: GetFormatType = \"h:mm\" 'Format as short time         Case ShortTime: GetFormatType = \"h:mm:ss AM/PM\" 'Format as long time         Case Percentage: GetFormatType = \"0.00%\" 'Format as percentage         Case Scientific: GetFormatType = \"0.00E+00\" 'Format as scientific         Case Text: GetFormatType = \"@\" 'Format as text        Case Else: GetFormatType = \"General\" 'Default to general     End Select End Function  Public Sub formatCell(ByVal objWSheet As Object, _                        ByVal baris1 As Long, ByVal kolom1 As Integer, _                        ByVal baris2 As Long, ByVal kolom2 As Integer, _                        ByVal fontBold As Boolean, ByVal fontSize As Integer, _                        ByVal mergeCell As Boolean, _                        ByVal HorizontalAlgn As Long, ByVal VerticalAlgn As Long, _                        Optional ByVal setColorHeader As Boolean = False, _                        Optional ByVal setBorder As Boolean = False, _                        Optional ByVal setColumnType As EFormatType = Text)      On Error GoTo errHandle      With objWSheet         .Range(.cells(baris1, kolom1), .cells(baris2, kolom2)).Font.Bold = fontBold         .Range(.cells(baris1, kolom1), .cells(baris2, kolom2)).Font.Size = fontSize         .Range(.cells(baris1, kolom1), .cells(baris2, kolom2)).MergeCells = mergeCell         .Range(.cells(baris1, kolom1), .cells(baris2, kolom2)).cells.HorizontalAlignment = HorizontalAlgn         .Range(.cells(baris1, kolom1), .cells(baris2, kolom2)).cells.VerticalAlignment = VerticalAlgn          If setColorHeader = True Then             .Range(.cells(baris1, kolom1), .cells(baris2, kolom2)).Interior.ColorIndex = 15             .Range(.cells(baris1, kolom1), .cells(baris2, kolom2)).Interior.Pattern = xlSolid         End If          If setBorder = True Then .Range(.cells(baris1, kolom1), .cells(baris2, kolom2)).Borders.LineStyle = xlContinuous          .Range(.cells(baris1, kolom1), .cells(baris2, kolom2)).NumberFormat = GetFormatType(setColumnType)      End With      Exit Sub errHandle:     Exit Sub End Sub  Public Function convertColRowToAreaRef(ByVal objWSheet As Object, ByVal columnFrom As Long, ByVal rowFrom As Long, ByVal columnTo As Long, ByVal rowTo As Long) As String     Dim tmp As String      With objWSheet         tmp = .Range(.Cells(rowFrom, columnFrom), .Cells(rowTo, columnTo)).Address     End With      tmp = Replace(tmp, \"$\", \"\")      convertColRowToAreaRef = tmp End Function  sedangkan untuk form kodenya seperti berikut :   Private Sub cmdLapDataSiswaToXLS_Click()     Dim objExcel    As Object     Dim objWBook    As Object     Dim objWSheet   As Object      Dim areaRef     As String     Dim nis(5)      As String     Dim nama(5)     As String     Dim nilai(5)    As Integer      Dim startRow    As Long     Dim kolom       As Long     Dim initRow     As Long     Dim i           As Long      nis(0) = \"9941224167\": nama(0) = \"Abdul Fatahurrahman\": nilai(0) = 75     nis(1) = \"9928712140\": nama(1) = \"Desy Efriani\": nilai(1) = 60     nis(2) = \"9930340568\": nama(2) = \"Durotun Nafisah\": nilai(2) = 70     nis(3) = \"9941224212\": nama(3) = \"Bayu Pranoto\": nilai(3) = 85     nis(4) = \"9941224276\": nama(4) = \"Hofiruh Sotul'aini\": nilai(4) = 95     nis(5) = \"9928712137\": nama(5) = \"Indra Gunawan\": nilai(5) = 100      'Create the Excel object     Set objExcel = CreateObject(\"Excel.application\") 'bikin object      'Create the workbook     Set objWBook = objExcel.Workbooks.Add      Set objWSheet = objWBook.Worksheets(1)     With objWSheet         Call formatCell(objWSheet, 1, 1, 1, 4, True, 10, True, xlCenter, xlCenter)         .cells(1, 1) = \"DAFTAR NILAI SISWA\"          initRow = 3          Call formatCell(objWSheet, initRow, 1, initRow, 4, True, 8, False, xlCenter, xlCenter, True, True)          kolom = 1         .cells(initRow, kolom) = \"No.\"         .Columns(kolom).ColumnWidth = 3.86          kolom = 2         .cells(initRow, kolom) = \"N I S\"         .Columns(kolom).ColumnWidth = 12.86          kolom = 3         .cells(initRow, kolom) = \"Nama\"         .Columns(kolom).ColumnWidth = 25.86          kolom = 4         .cells(initRow, kolom) = \"Nilai\"         .Columns(kolom).ColumnWidth = 6.86          Call formatCell(objWSheet, initRow + 1, 1, initRow + UBound(nis) + 1, 1, False, 8, False, xlCenter, xlCenter, False, True, General) 'NO         Call formatCell(objWSheet, initRow + 1, 2, initRow + UBound(nis) + 1, 3, False, 8, False, xlLeft, xlCenter, False, True)   'NIS DAN NAMA         Call formatCell(objWSheet, initRow + 1, 4, initRow + UBound(nis) + 1, 4, False, 8, False, xlRight, xlCenter, False, True, General)  'NILAI         For i = LBound(nis) To UBound(nis)             If startRow = 0 Then startRow = initRow + i + 1              .cells(initRow + i + 1, 1) = (i + 1)             .cells(initRow + i + 1, 2) = nis(i)             .cells(initRow + i + 1, 3) = nama(i)             .cells(initRow + i + 1, 4) = nilai(i)         Next i          areaRef = convertColRowToAreaRef(objWSheet, 4, startRow, 4, initRow + i)          Call formatCell(objWSheet, initRow + i + 1, 3, initRow + i + 2, 3, False, 8, False, xlRight, xlCenter, True, True)  'Jumlah dan rata-rata         .cells(initRow + i + 1, 3) = \"Jumlah\"         .cells(initRow + i + 2, 3) = \"Rata-rata\"          Call formatCell(objWSheet, initRow + i + 1, 4, initRow + i + 1, 4, False, 8, False, xlRight, xlCenter, True, True, General) 'Jumlah         .cells(initRow + i + 1, 4) = \"=SUM(\" &amp; areaRef &amp; \")\"          Call formatCell(objWSheet, initRow + i + 2, 4, initRow + i + 2, 4, False, 8, False, xlRight, xlCenter, True, True, Number) 'Rata-rata         .cells(initRow + i + 2, 4) = \"=AVERAGE(\" &amp; areaRef &amp; \")\"     End With      objExcel.Visible = True      If Not objWSheet Is Nothing Then Set objWSheet = Nothing     If Not objWBook Is Nothing Then Set objWBook = Nothing     If Not objExcel Is Nothing Then Set objExcel = Nothing End Sub  Contoh hasil dari kode diatas :      dan jangan lupa ikuti artikel lanjutannya.   Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["Ekspor ke Excel","Ms Excel"],
        "url": "http://coding4ever.net/blog/2009/12/30/membuat-laporan-dalam-format-ms-excel/",
        "teaser": null
      },{
        "title": "Membuat paket instalasi vb + mysql dengan inno setup",
        "excerpt":"Membuat paket instalasi yang mudah untuk aplikasi yang akan kita distribusikan memang gampang-gampang susah, gampang bagi kita untuk membuatnya hanya dengan menggunakan Package &amp; Deployment Wizard.   Package &amp; Deployment Wizard merupakan tool installer bawaan yang sudah disediakan oleh visual basic, tetapi apakah hasilnya akan cukup memudahkan bagi klien apalagi jika aplikasi yang kita buat menggunakan database yang membutuhkan konfigurasi atau setting-setting yang lumayan banyak pada saat instalasi, seperti MySQL atau Firebird (Maaf ya Ms Access enggak termasuk :grin:).     Atau kita mencukupkan untuk membuat panduan instalasi yang dibagi menjadi beberapa bagian :      Instalasi Program   Instalasi Database Server (ex. MySQL/Firebird)  + Konfigurasi   Install Driver ODBC   Mengcopy database/undump script sql   Atau kita ingin sedikit memaksakan diri dengan membuat paket instalasi yang mudah yang hanya dengan 6 kali klik bisa menyelesaikan semua masalah diatas. Jika iya kita langsung saja mempersiapkan tool-tool yang dibutuhkan :      Inno Setup   MySQL versi noninstall disesuaikan dengan versi MySQL yang terinstall di komputer Anda   Connector ODBC yang sudah terinstall biasanya ada di C:\\Program Files\\MySQL\\Connector ODBC 5.1   Database yang sudah di backup/dump   Adapun versi yang terinstall di komputer saya :      Inno Setup 5.0.8   MySQL Server: 5.1.36-community   Connector ODBC 5.1   Lakukan backup/dump database dengan cara :      Aktifkan dos console   Masuk ke folder instalasi MySQL misal C:\\Program Files\\MySQL\\MySQL Server 5.1\\bin   kemudian ketikkan perintah: mysqldump -unama_user -ppassword_user –routines nama_database &gt; c:\\nama_database.sql   Parameter –routines wajib Anda ketikkan jika database Anda mempunyai prosedur/fungsi. Persiapan terakhir untuk struktur folder saya buat seperti berikut :      Untuk keterangan lebih lanjut skrip inno setup silahkan baca manualnya. Contoh skrip instalasi lengkap :   ;Skrip instalasi by k4m4r82 ;http://coding4ever.wordpress.com/ [Setup] AppName=Sistem Pembelian Bahan Baku PT. ALBASI AppVerName=Sistem Pembelian Bahan Baku PT. ALBASI Versi 1.0.0.50 AppPublisher=K4m4r82's Laboratory AllowCancelDuringInstall = yes DefaultDirName={pf}\\PT ALBASI DefaultGroupName=PT ALBASI Compression = lzma SolidCompression = yes OutputBaseFilename=SetupAlbasiServer AllowNoIcons = yes AlwaysRestart = no AlwaysShowComponentsList = no DisableProgramGroupPage = yes AppendDefaultDirName = yes CreateUninstallRegKey = yes DisableStartupPrompt = yes LanguageDetectionMethod=none ShowLanguageDialog=no Uninstallable = yes UninstallFilesDir={app}\\uninst UninstallDisplayIcon={app}\\Albasi.exe,0 UninstallDisplayName=Sistem Pembelian Bahan Baku PT. ALBASI WindowVisible = no AppCopyright=Copyright © 2009. K4m4r82's Laboratory FlatComponentsList = yes PrivilegesRequired = admin VersionInfoVersion=1.0.0.50 SetupIconFile=Setup.ico WizardImageFile=SetupModern21.bmp WizardSmallImageFile=SetupModernSmall21.bmp  [Languages] Name: ina; MessagesFile: compiler:Indonesia.isl Name: en; MessagesFile: compiler:Default.isl  [Tasks] Name: desktopicon; Description: {cm:CreateDesktopIcon}; GroupDescription: {cm:AdditionalIcons}; Flags: unchecked Name: quicklaunchicon; Description: {cm:CreateQuickLaunchIcon}; GroupDescription: {cm:AdditionalIcons}; Flags: unchecked Name: installmysql; Description: \"Install MySQL\"; GroupDescription: \"Proses tambahan:\"; Flags: checkedonce  [Files] ;Visual Basic Runtime Source: dll&amp;ocx\\VB6STKIT.DLL; DestDir: {sys}; Flags: uninsneveruninstall onlyifdoesntexist Source: dll&amp;ocx\\COMCAT.DLL; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\stdole2.tlb; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regtypelib Source: dll&amp;ocx\\asycfilt.dll; DestDir: {sys}; Flags: uninsneveruninstall onlyifdoesntexist Source: dll&amp;ocx\\olepro32.dll; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\oleaut32.dll; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\msvbvm60.dll; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist  ;daftar file MySQL Source: mysql-5.1.36-win32\\bin\\*; DestDir: {app}\\mysql\\bin; Flags: ignoreversion; Tasks: installmysql Source: mysql-5.1.36-win32\\Docs\\*; DestDir: {app}\\mysql\\Docs; Flags: ignoreversion; Tasks: installmysql Source: mysql-5.1.36-win32\\lib\\*; DestDir: {app}\\mysql\\lib; Flags: ignoreversion recursesubdirs; Tasks: installmysql Source: mysql-5.1.36-win32\\share\\*; DestDir: {app}\\mysql\\share; Flags: ignoreversion recursesubdirs; Tasks: installmysql Source: mysql-5.1.36-win32\\data\\*; DestDir: {app}\\mysql\\data; Flags: ignoreversion recursesubdirs uninsneveruninstall; Tasks: installmysql Source: mysql-5.1.36-win32\\*; DestDir: {app}\\mysql; Flags: ignoreversion; Tasks: installmysql  ;daftar file MySQL ODBC 5.1 Source: \"C:\\Program Files\\MySQL\\Connector ODBC 5.1\\myodbc5.dll\"; DestDir: {sys}; Flags: onlyifdoesntexist Source: \"C:\\Program Files\\MySQL\\Connector ODBC 5.1\\myodbc5S.dll\"; DestDir: {sys}; Flags: onlyifdoesntexist Source: \"C:\\Program Files\\MySQL\\Connector ODBC 5.1\\myodbc5.lib\"; DestDir: {sys}; Flags: onlyifdoesntexist Source: \"C:\\Program Files\\MySQL\\Connector ODBC 5.1\\myodbc5S.lib\"; DestDir: {sys}; Flags: onlyifdoesntexist Source: \"C:\\Program Files\\MySQL\\Connector ODBC 5.1\\myodbc-installer.exe\"; DestDir: {sys}; Flags: onlyifdoesntexist  ;My Application Runtime Source: main\\Albasi.exe.manifest; DestDir: {app}; Flags: ignoreversion Source: main\\Albasi.exe; DestDir: {app}; Flags: ignoreversion Source: main\\albasi.sql; DestDir: {app}\\mysql\\bin; Flags: ignoreversion Source: main\\exec.cmd; DestDir: {app}\\mysql\\bin; Flags: ignoreversion  Source: dll&amp;ocx\\MSMASK32.OCX; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\cTreeOpt6.ocx; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\Comdlg32.ocx; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\vbalDTab6.ocx; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\MSCOMCT2.OCX; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\MyTextBox.ocx; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\LVbuttons.ocx; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\vbalExpBar6.ocx; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\MSCOMCTL.OCX; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\vbalIml6.ocx; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\cPopMenu6.ocx; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\cNewMenu6.dll; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\scrrun.dll; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\vbalMDITabs6.dll; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\SSubTmr6.dll; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist  Source: dll&amp;ocx\\msado21.tlb; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regtypelib  [Icons] Name: {group}\\Sistem Pembelian Bahan Baku PT. ALBASI; Filename: {app}\\Albasi.exe; WorkingDir: {app} Name: {userdesktop}\\Sistem Pembelian Bahan Baku PT. ALBASI; Filename: {app}\\Albasi.exe; WorkingDir: {app}; Tasks: desktopicon Name: {userappdata}\\Microsoft\\Internet Explorer\\Quick Launch\\Sistem Pembelian Bahan Baku PT. ALBASI; Filename: {app}\\Albasi.exe; WorkingDir: {app}; Tasks: quicklaunchicon  [INI] Filename: {app}\\mysql\\my.ini; Section: mysqld; Key: basedir; String: {app}\\mysql; Tasks: installmysql Filename: {app}\\mysql\\my.ini; Section: mysqld; Key: datadir; String: {app}\\mysql\\data; Tasks: installmysql  Filename: {app}\\infoProgram.ini; Section: Sistem; Key: serverName; String: \"127.0.0.1\" Filename: {app}\\infoProgram.ini; Section: Sistem; Key: dbName; String: \"albasi\"  [Run] ;install service MySQL Filename: \"{app}\\mysql\\bin\\mysqld.exe\"; Parameters: \"install \"\"MySQL\"\"\"; StatusMsg: \"Sedang menginstall service MySQL ...\"; Flags: runhidden; MinVersion: 0,5.01.2600sp2; Tasks: installmysql  ;jalankan service MySQL Filename: {sys}\\net.exe; Parameters: \"start \"\"MySQL\"\"\"; StatusMsg: \"Sedang menjalankan service MySQL ...\"; Flags: runhidden; MinVersion: 0.0,4.0.1381; Tasks: installmysql  ;mendaftarkan port default mysql (3306) ke firewall Filename: \"{sys}\\netsh.exe\"; Parameters: \"firewall add portopening TCP 3306 \"\"Port MySQL\"\"\"; StatusMsg: \"Sedang mendaftarkan port MySQL ...\"; Flags: runhidden; MinVersion: 0,5.01.2600sp2 Filename: \"{sys}\\netsh.exe\"; Parameters: \"firewall set service type = fileandprint mode = enable\"; StatusMsg: \"Mengaktifkan File and Printer Sharing ...\"; Flags: runhidden; MinVersion: 0,5.01.2600sp2  ;mengganti password default root (blank). ex : masterkey Filename: \"{app}\\mysql\\bin\\mysqladmin.exe\"; Parameters: \"-uroot password masterkey\"; StatusMsg: \"Mengganti password root\"; Flags: runhidden; MinVersion: 0,5.01.2600sp2  ;menghapus user default1 (user=blank, password=blank) Filename: \"{app}\\mysql\\bin\\mysql.exe\"; Parameters: \"-uroot -pmasterkey -e \"\"DELETE FROM mysql.user WHERE Host='localhost' AND User=''\"\"\"; Flags: runhidden; MinVersion: 0,5.01.2600sp2 Filename: \"{app}\\mysql\\bin\\mysql.exe\"; Parameters: \"-uroot -pmasterkey -e \"\"FLUSH PRIVILEGES\"\"\"; Flags: runhidden; MinVersion: 0,5.01.2600sp2  ;menghapus user default2 (user=root, password=blank) Filename: \"{app}\\mysql\\bin\\mysql.exe\"; Parameters: \"-uroot -pmasterkey -e \"\"DELETE FROM mysql.user WHERE Host='127.0.0.1' AND User='root'\"\"\"; Flags: runhidden; MinVersion: 0,5.01.2600sp2 Filename: \"{app}\\mysql\\bin\\mysql.exe\"; Parameters: \"-uroot -pmasterkey -e \"\"FLUSH PRIVILEGES\"\"\"; Flags: runhidden; MinVersion: 0,5.01.2600sp2  ;set agar user root bisa login dari mesin lain (kalo diperlukan) Filename: \"{app}\\mysql\\bin\\mysql.exe\"; Parameters: \"-uroot -pmasterkey -e \"\"GRANT ALL PRIVILEGES ON *.* TO root@'%' IDENTIFIED BY 'masterkey'\"\"\"; Flags: runhidden; MinVersion: 0,5.01.2600sp2 Filename: \"{app}\\mysql\\bin\\mysql.exe\"; Parameters: \"-uroot -pmasterkey -e \"\"FLUSH PRIVILEGES\"\"\"; Flags: runhidden; MinVersion: 0,5.01.2600sp2  ;membuat database kosong Filename: \"{app}\\mysql\\bin\\mysql.exe\"; Parameters: \"-uroot -pmasterkey -e \"\"CREATE DATABASE albasi\"\"\"; Flags: runhidden; MinVersion: 0,5.01.2600sp2  ;menjalankan file batch exec.cmd untuk melakukan proses undump Filename: \"{app}\\mysql\\bin\\exec.cmd\"; Flags: runhidden; MinVersion: 0,5.01.2600sp2  ;install driver myodbc Filename: \"{sys}\\myodbc-installer.exe\"; Parameters: \"-d -a -n \"\"MySQL ODBC 5.1 Driver\"\" -t \"\"DRIVER=myodbc5.dll;SETUP=myodbc5S.dll\"\"\"; StatusMsg: \"Tunggu sedang mendaftarkan driver MySQL Connector ODBC 5.1.5\"; Flags: runhidden  [UninstallRun] Filename: {sys}\\net.exe; Parameters: \"stop \"\"MySQL\"\"\"; StatusMsg: \"Menghentikan Service MySQL ...\"; Flags: runhidden; MinVersion: 0.0,4.0.1381 Filename: \"{app}\\mysql\\bin\\mysqld.exe\"; Parameters: \"remove \"\"MySQL\"\"\"; StatusMsg: \"Sedang menghapus service MySQL ...\"; Flags: runhidden; MinVersion: 0,5.01.2600sp2  Filename: \"{sys}\\myodbc-installer.exe\"; Parameters: \"-d -r -n \"\"MySQL ODBC 5.1 Driver\"\"\"; StatusMsg: \"Tunggu sedang menghapus driver MySQL Connector ODBC 5.1.5\"; Flags: runhidden  [UninstallDelete] Type: files; Name: {app}\\mysql\\bin\\*.* Type: files; Name: {app}\\mysql\\Docs\\*.* Type: files; Name: {app}\\mysql\\lib\\*.* Type: files; Name: {app}\\mysql\\share\\*.*  Type: files; Name: {sys}\\myodbc5S.dll Type: files; Name: {sys}\\myodbc5S.lib Type: files; Name: {sys}\\myodbc5.dll Type: files; Name: {sys}\\myodbc5.lib Type: files; Name: {sys}\\myodbc-installer.exe  [Registry] ;mencatat lokasi instalasi program, ini dibutuhkan jika kita ingin membuat paket instalasi update Root: HKCU; Subkey: \"Software\\PT ALBASI\\SPBB\"; ValueName: \"installDir\"; ValueType: String; ValueData: {app}; Flags: uninsdeletevalue  Di dalam skrip instalasi ada file exec.cmd, isinya adalah :   mysql -uroot -pmasterkey albasi &lt; albasi.sql  Isi file exec.cmd sebenarnya untuk proses undump, tapi saya masih belum tau kenapa inno setup gagal menjalankannya padahal perintah-perintah yang lainnya sukses.   Contoh hasil instalasi :                     Yuph mungkin itu saja, selamat mencoba :blush:  ","categories": ["Inno Setup","Tools Installer","MySql"],
        "tags": ["inno setup","instalasi","mysql","paket instalasi"],
        "url": "http://coding4ever.net/blog/2009/12/31/membuat-paket-instalasi-vb-mysql-dengan-inno-setup/",
        "teaser": null
      },{
        "title": "Menganalisa dan membuat mesin penjawab otomatis Y!M",
        "excerpt":"Sebelum kita melanjutkan pembahasan ada beberapa istilah yang harus kita ketahui yaitu Parent Window (Window Induk), Child Window (Window Anak) dan bagaimana cara mendapatkan nilai Handle Window (hWnd) atau dengan istilah yang lebih sederhana Process ID.   Setiap aplikasi yang berjalan di Windows umumnya memiliki jendela atau form. Jika ada beberapa jendela/form aplikasi berbeda yang terbuka, maka sistem akan memberikan semacam identitas bagi setiap jendela yang terbuka tersebut, di mana masing-masing jendela/form memiliki identitas atau alamat yang berbeda satu sama lain.     Konsep Child-Parent sangat sederhana, karena pengertian yang diberikan sama persis dengan namanya. Child/anak merupakan sebuah handle window yang berada di dalam handle window lainnya yang biasa disebut parent/induk. Oke kita lihat contoh berikut :               Dengan cara yang sama lakukan terhadap YM dan menghasilkan gambar berikut :                  Nah yang jadi pertanyaan bagaimana caranya untuk mendapatkan nilai Handle, Caption dan Class dan yang terpenting disini adalah nilai Class. Ada banyak tool yang bisa digunakan salah satunya adalah Spy++, merupakan tool bawaan visual studio 6.   Oke kita langsung saja menjalankan program Spy++, lihat gambar :            Selanjutnya Anda tinggal drag icon ke aplikasi YM, lihat gambar :                  Nah sampe disini analisis sudah selesai dan kita sudah mendapatkan semua informasi yang dibutuhkan, yaitu urutan windows parent&lt;-anak :      YSearchMenuWndClass &lt;- IMClass &lt;- YHTMLContainer &lt;- Internet Explorer_Server   YSearchMenuWndClass &lt;- IMClass &lt;- YIMInputWindow   Perlu diketahui bahwal class/window Internet Explorer_Server dan** YIMInputWindow** bukan class terluar, sehingga kita perlu mengetahui class diatasnya. Jadi untuk membaca pesan yang masuk, urutan class yang harus kita lalui adalah : YSearchMenuWndClass -&gt;  IMClass -&gt; YHTMLContainer -&gt; Internet Explorer_Server   Sedangkan untuk membalas pesan yang masuk, urutan kelas yang harus kita lalui adalah : YSearchMenuWndClass -&gt;  IMClass -&gt; YIMInputWindow   Untuk memanipulasi class/window diatas kita membutuhkan windows handle/process id dari class tersebut, bagi yang sudah terbiasa menggunakan fungsi-fungsi API kemungkinan sudah tau fungsi API apa saja yang kita butuhkan. Jika masih bingung apa itu fungsi API, coba mampir ke sini.   Yaph benar udah taukan fungsi API yang kita gunakan untuk mendapatkan windows handle/process id :      FindWindow -&gt; untuk mendapatkan process id induk class (YSearchMenuWndClass)   FindWindowEx -&gt; untuk mendapatkan process id sub class (IMClass, YHTMLContainer, Internet Explorer_Server dan YIMInputWindow) berikut deklarasi lengkapnya :   Private Declare Function FindWindow Lib \"user32\" Alias \"FindWindowA\" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long Private Declare Function FindWindowEx Lib \"user32\" Alias \"FindWindowExA\" (ByVal hWnd1 As Long, ByVal hWnd2 As Long, ByVal lpsz1 As String, ByVal lpsz2 As String) As Long  Oke berikutnya adalah bagian coding lengkap, bagaimana cara mengambil informasi yang ada di window Internet Explorer_Server dan mengirim pesan melalui window YIMInputWindow dan jangan lupa tambahkan references Microsoft HTML Object Library di project Anda.   Private Declare Function FindWindow Lib \"user32\" Alias \"FindWindowA\" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long Private Declare Function FindWindowEx Lib \"user32\" Alias \"FindWindowExA\" (ByVal hWnd1 As Long, ByVal hWnd2 As Long, ByVal lpsz1 As String, ByVal lpsz2 As String) As Long  Private Declare Function SendMessageByString Lib \"user32\" Alias \"SendMessageA\" (ByVal hWnd As Long, ByVal wMsg As Long, ByVal wParam As Long, ByVal lParam As String) As Long Private Declare Function SendMessage Lib \"user32\" Alias \"SendMessageA\" (ByVal hWnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lParam As Any) As Long  Private Declare Function ObjectFromLresult Lib \"oleacc\" (ByVal lResult As Long, riid As UUID, ByVal wParam As Long, ppvObject As Any) As Long Private Declare Function SendMessageTimeout Lib \"user32\" Alias \"SendMessageTimeoutA\" (ByVal hWnd As Long, ByVal msg As Long, ByVal wParam As Long, lParam As Any, ByVal fuFlags As Long, ByVal uTimeout As Long, lpdwResult As Long) As Long Private Declare Function RegisterWindowMessage Lib \"user32\" Alias \"RegisterWindowMessageA\" (ByVal lpString As String) As Long  Type UUID     Data1 As Long     Data2 As Integer     Data3 As Integer     Data4(0 To 7) As Byte End Type  Private Const SMTO_ABORTIFHUNG = &amp;H2 Private Const WM_SETTEXT = &amp;HC Private Const WM_KEYDOWN = &amp;H100 Private Const VK_RETURN = &amp;HD  Dim hwndYMMainClass     As Long Dim hwndIMClass         As Long  Private Function IEDOMFromhWnd(ByVal hWnd As Long) As IHTMLDocument     Dim IID_IHTMLDocument   As UUID     Dim doc                 As IHTMLDocument2     Dim lres                As Long 'if = 0 isn't inet window.     Dim lMsg                As Long     Dim hr                  As Long      '---END-DECLARES---------     lMsg = RegisterWindowMessage(\"WM_HTML_GETOBJECT\") 'Register Wnd Message     Call SendMessageTimeout(hWnd, lMsg, 0, 0, SMTO_ABORTIFHUNG, 1000, lres) 'Get's Object      '---CHECKS-FOR-WINDOW----     hr = ObjectFromLresult(lres, IID_IHTMLDocument, 0, IEDOMFromhWnd) End Function  Private Function getIEText(ByVal hWnd As Long) As String     Dim doc As IHTMLDocument2      'On Error Resume Next      If hWnd &lt;&gt; 0 Then         Set doc = IEDOMFromhWnd(hWnd)     Else         getIEText = \"-[TEXT CANNOT BE FOUND]-\"         Exit Function      End If      '---CHECKS-FOR-HWND------     If doc.body.innerText = vbNullString Then         getIEText = \"ERROR! [WINDOW DOESN'T CONTAIN HTML]\"         Exit Function     End If     '---CHECKS-FOR-HTML-EMBEDDED      getIEText = doc.body.innerText End Function  Private Sub cmdCetakPesan_Click()     Dim hwndYHTMLContainer  As Long     Dim hwndIEServer        As Long      Dim pesan               As String      hwndYMMainClass = FindWindow(\"YSearchMenuWndClass\", vbNullString)     If hwndYMMainClass &lt;&gt; 0 Then         hwndIMClass = FindWindowEx(hwndYMMainClass, 0&amp;, \"IMClass\", vbNullString)         hwndYHTMLContainer = FindWindowEx(hwndIMClass, 0&amp;, \"YHTMLContainer\", vbNullString)         hwndIEServer = FindWindowEx(hwndYHTMLContainer, 0&amp;, \"Internet Explorer_Server\", vbNullString)          pesan = getIEText(hwndIEServer) 'informasi pesan disini masih kurang bagus jadi harus di parsing lagi         Debug.Print pesan     End If End Sub  Private Sub cmdKirimPesan_Click()     Dim hwndYIMInputWindow  As Long     Dim hwndButton          As Long      hwndYMMainClass = FindWindow(\"YSearchMenuWndClass\", vbNullString)     hwndIMClass = FindWindowEx(hwndYMMainClass, 0&amp;, \"IMClass\", vbNullString)     hwndYIMInputWindow = FindWindowEx(hwndIMClass, 0&amp;, \"YIMInputWindow\", vbNullString)     Call SendMessageByString(hwndYIMInputWindow, WM_SETTEXT, 0&amp;, \"Isi pesannya disini...\")     Call SendMessage(hwndYIMInputWindow, WM_KEYDOWN, VK_RETURN, 0&amp;) End Sub  Yaph mungkin itu saja penjelasan singkat untuk membuat mesin penjawab otomatis YM! untuk uji coba ini saya menggunakan YM! versi 8.1.0.421 bagi yang akan mencoba di versi 9 sudah saya cek ada sedikit perbedaan nama class/window, yang penting caranya sama seperti diatas tinggal sesuaikan saja.   Bagian terakhir dari artikel ini bisa Anda ikuti disini.   Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["mesin penjawab otomatis","Yahoo! Messenger"],
        "url": "http://coding4ever.net/blog/2010/01/01/menganalisa-dan-membuat-mesin-penjawab-otomatis-ym/",
        "teaser": null
      },{
        "title": "How can I detect whether my program is already running?",
        "excerpt":"Wah judulnya pake bahasa wong londo :grin:, ya kira-kira kalo kita artikan lebih kurang “Bagaimana cara mengecek program saya sudah jalan atau belum ?”.   Kan sangat riskan sekali kalau program kita bisa dijalankan beberapa kali dalam waktu bersamaan dan dikomputer yang sama ditambah data yang diakses kritis lagi, karena secara default program/file exe yang dihasilkan oleh vb kalau dijalankan selalu membuat instance yang baru, dan tentunya ini tergantung kasus dimana kita ingin program kita tidak boleh dijalankan lebih dari 1 kali diwaktu dan komputer yang sama.     Sebenarnya sih penyelesaiannya gampang kita cukup mengetikkan kode berikut di form utama/form yang pertama kali dijalankan/load :   Private Sub Form_Load()     If App.PrevInstance Then         MsgBox \"Program udah dijalankan\", vbExclamation, \"Peringatan\"         End     End If End Sub  Nah bagaimana kalo kita ingin program kita langsung aktif/fokus jika sebelumnya program sudah dijalankan (ya pengennya sih mirip Winamp gitu), caranya juga gampang kita tinggal revisi kode diatas trus tambahkan sebuah module dan copy paste kode berikut:   Private Declare Function FindWindow Lib \"user32\" Alias \"FindWindowA\" (ByVal lpClassName As Any, ByVal lpWindowName As String) As Long Private Declare Function ShowWindow Lib \"user32\" (ByVal hWnd As Long, ByVal nCmdShow As Long) As Long Private Declare Function IsIconic Lib \"user32\" (ByVal hWnd As Long) As Long Private Const SW_RESTORE = 9  Public Sub Main()     Dim hWnd As Long     Dim lres As Long      If App.PrevInstance Then         hWnd = FindWindow(0&amp;, \"Menu Utama\")         If hWnd &lt;&gt; 0 Then             If IsIconic(hWnd) Then lres = ShowWindow(hWnd, SW_RESTORE)              AppActivate \"Menu Utama\"             Exit Sub         End If      Else         frmMain.Show     End If End Sub  Sample diatas dengan asumsi form utama properties namenya diset = frmMain dan untuk captionnya diset = Menu Utama, selain itu Startup Object harus di set menjadi Sub Main   Tetapi cara kedua hanya bekerja dengan baik jika kita menggunakan model SDI tidak untuk MDI, karena kode diatas untuk mengecek program kita sudah dijalankan atau belum berdasarkan properties Caption form utama. Oke mari kita lihat perbedaannya.      Jadi kode kedua juga harus kita revisi lagi menjadi seperti berikut :   Private Declare Function FindWindow Lib \"user32\" Alias \"FindWindowA\" (ByVal lpClassName As Any, ByVal lpWindowName As String) As Long Private Declare Function ShowWindow Lib \"user32\" (ByVal hwnd As Long, ByVal nCmdShow As Long) As Long Private Declare Function IsIconic Lib \"user32\" (ByVal hwnd As Long) As Long Private Declare Function GetWindowText Lib \"user32\" Alias \"GetWindowTextA\" (ByVal hwnd As Long, ByVal lpString As String, ByVal cch As Long) As Long  Private Const SW_RESTORE = 9  Public Sub Main()     Dim formCaption As String * 256      Dim hwnd        As Long     Dim lres        As Long      If App.PrevInstance Then         hwnd = FindWindow(\"ThunderRT6MDIForm\", vbNullString) 'ThunderRT6MDIForm -&gt; nama class MDIForm di VB         If hwnd &lt;&gt; 0 Then             GetWindowText hwnd, formCaption, 256 'GetWindowText -&gt; untuk mengambil judul/caption form             If IsIconic(hwnd) Then lres = ShowWindow(hwnd, SW_RESTORE)              AppActivate formCaption         End If      Else         'TODO : tampilkan frmLogin atau frmUtama disini     End If End Sub  Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["AppActivate","FindWindow","GetWindowText","IsIconic","PrevInstance","ShowWindow","SW_RESTORE","ThunderRT6MDIForm"],
        "url": "http://coding4ever.net/blog/2010/01/02/how-can-i-detect-whether-my-program-is-already-running/",
        "teaser": null
      },{
        "title": "Sekilas windows API",
        "excerpt":"Windows API (Application Programming Interface) merupakan sekumpulan fungsi eksternal yang terdapat dalam file-file librarynya windows atau program lain yang dapat digunakan untuk meningkatkan kemampuan program kita.   Kenapa menggunakan Windows API ?   Ya alasan paling sederhananya sih untuk mengatasi keterbatasan fungsi-fungsi internal (built-in) visual basic. Bayangkan kita diminta BOZZZ untuk membuat sebuah aplikasi yang mempunyai kemampuan sebagai berikut :        Melakukan Restart   Melakukan Shutdown   Selalu diatas windows yg lain (On Top Most)   Akses Registry Windows   Menontaktifkan program-program tertentu, seperti Windows Taks Manager, Regedit, Ms Config de el el.   Mendeteksi koneksi internet   Mendapatkan direktori system (c:\\windows\\system32 atau c:\\windows\\system)   Menyembunyikan mouse cursor, tombol Start, TaskBar   Dan lain-lain, kayax mau buat virus aja :grin:   Saya yakin kalo kita blank sama sekali tentang Windows API pasti cuma bisa gigit jari dan bisa-bisa terancam bakalan dipecat :grin:.   Apakah Windows API harus DIHAPAL?   Saya merekomendasikan jawabannya IYA kalo pada ingin stress :grin:, coba kita lihat cuplikan fungsi-fungsi Windows API berikut :   Private Declare Function ExitWindowsEx Lib \"user32\" (ByVal uFlags As Long, ByVal dwReserved As Long) As Long Private Declare Sub SetWindowPos Lib \"User32\" (ByVal hWnd As Long, ByVal hWndInsertAfter As Long, ByVal X As Long, ByVal Y As Long, ByVal cx As Long, ByVal cy As Long, ByVal wFlags As Long) Private Declare Function GetSystemDirectory Lib \"kernel32\" Alias \"GetSystemDirectoryA\" (ByVal lpBuffer As String, ByVal nSize As Long) As Long Private Declare Function ShowCursor Lib \"user32\" (ByVal bShow As Long) As Long  Selain deklarasi fungsi-fungsi, Windows API juga biasanya membutuhkan deklarasi konstanta. Misal untuk fungsi ExitWindowsEx, membutuhkan deklarasi konstanta berikut :   Private Const EWX_LOGOFF = 0 Private Const EWX_SHUTDOWN = 1 Private Const EWX_REBOOT = 2 Private Const EWX_FORCE = 4  Fungsi SetWindowPos membutuhkan deklarsi konstanta berikut :   Private Const HWND_TOPMOST = -1 Private Const HWND_NOTOPMOST = -2 Private Const SWP_NOSIZE = &amp;H1 Private Const SWP_NOMOVE = &amp;H2 Private Const SWP_NOACTIVATE = &amp;H10 Private Const SWP_SHOWWINDOW = &amp;H40  Iiihhhh serem bukan? :cry: penampakan fungsi diatas baru 4 loh, coba bayangkan fungsi-fungsi Windows API itu jumlahnya ada ribuan, tapi jangan khawatir ada tip dan triknya kok untuk mudah mengingat fungsi-fungsi Windows API yaitu cukup mengingat nama fungsinya, Misal.      Untuk Restart dan Shutdown (ExitWindowsEx)   Mendapatkan direktori system (GetSystemDirectory)   Menyembunyikan mouse cursor (ShowCursor)   Trus bagaimana melengkapi deklarasi fungsi-fungsi Windows API berikut konstantanya ?   Saya biasanya menggunakan salah satu dari 2 tools berikut:      API Text Viewer (bawaan vb), tool ini saya gunakan jika saya ingat nama fungsi plus konstantanya, kalo enggak ingat ya saya biasanya pake tool yang kedua :grin:   API-GUIDE sayang situs aslinya sudah tidak aktif lagi. Keuntungan menggunakan API-GUIDE, kita cukup mengingat nama fungsi APInya otomatis contoh penggunaan akan ditampilkan mudah bukan? Jadi tidak ada alasan untuk tidak mempelajari Windows API   Menggunakan API Text Viewer   Dari IDE Visual Basic, klik menu Add-Ins -&gt; Add-In Manager, terus aktifkan item VB6 API Viewer      Jika proses diatas berhasil, akan ada tambahan sub menu API Viewer di menu Add-Ins, kita tinggal klik menu tersebut untuk menampilkan tool API Text Viewer      Deklarasi fungsi-fungsi Windows API berikut konstantanya tersimpan di file WIN32API.txt, jadi kita terlebih dulu harus mengaktifkan file tersebut, dengan cara klik menu File -&gt; Load Text File, trus tinggal pilih file WIN32API.txt      Untuk mendapatkan deklarsi lengkap, kita tinggal mengetikan nama fungsi APInya, misal untuk contoh diatas saya mengetikan fungsi ExitWindowsEx kemudian klik tombol Add dan otomatis deklarsi lengkap fungsi ExitWindowsEx akan ditampilkan di list.      Kemudian untuk mendapatkan konstanta dari fungsi ExitWindowsEx, kita harus mengganti nilai API Type menjadi Constants, dan tinggal mengetikkan nama konstantanya misal EWX_      Jika sudah selesai tekan tombol Copy untuk mengcopy fungsi API berikut konstantanya dan tinggal pastekan ke editor code visual basic.      Menggunakan API-GUIDE   API-GUIDE bisa didownload di sini, setelah download kemudian install dan jalankan API-GUIDEnya, kita tinggal mengetikan nama fungsi API misal ExitWindowsEx, mengklik tab Example(s), diakhiri dengan mengklik tombol Copy, mudah bukan ? tinggal dipastekan ke editor code visual basic.      Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["Application Programming Interface","fungsi API","windows API"],
        "url": "http://coding4ever.net/blog/2010/01/03/sekilas-windows-api/",
        "teaser": null
      },{
        "title": "Meningkatkan produktivitas coding, design form dan kualitas kode dengan MZ-Tools",
        "excerpt":"MZ-Tools adalah add-in untuk Microsoft Visual Basic 6.0, 5.0, NET atau VBA editor Microsoft Office yang menyediakan banyak fitur untuk IDE. Fitur-fiturnya sangat membantu untuk meningkatkan produktivitas coding, design form, kualitas kode de el el.   Adapun beberapa fitur menarik dari MZ-Tools adalah sebagai berikut :     1. Find Code Faster      Find In All Projects   Procedure Callers   Favorite Procedures   2. Code Faster      Replace In All Projects   Code Templates   Add Procedure   Select Case Assistant For Enum Expressions   Add Module Header   Add Procedure Header   Add Error Handler   Add Both   Sort Procedures   Line Numbering   Split / Combine Lines   Private Clipboards   MsgBox Assistant   Convert Selection To Upper / Lower Case   Convert Public Variable To Property   3. Design Faster      TabIndex Assistant   Copy And Paste Controls With Code   Rename Controls With Code   Control Default Properties   Prompt Name And Caption Properties Of New Control   4. Generate Documentation      XML Documentation   Statistics   5. Ensure the Quality      Review Source Code   Review TabIndex Property   Review Collections   Review Access Keys   6. Enhance your Visual Basic Experience      Clear Immediate Window   Task List   Reload File From Disk   Remove Files (.lib and .exp) When Closing Project   Close Windows   Add Multiple Files To Project   Shortcuts To Built-in IDE Features   Shortcut To Save File At Debug-Time or Run-Time   Favorite Projects   External Utilities   Edit File As Text   Open Folder Of File   ADO Connection String   Collapse Projects   Fix VB registry entries to prevent ~ character when opening files by double-clicking them   Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["design form","kualitas kode","MZ-Tools","produktivitas coding"],
        "url": "http://coding4ever.net/blog/2010/01/03/meningkatkan-produktivitas-coding-design-form-dan-kualitas-kode-dengan-mz-tools/",
        "teaser": null
      },{
        "title": "Banyak cara menon-aktifkan CTRL+ALT+DEL di Win 2K/XP, mana yg Anda Pilih ?",
        "excerpt":"Saya atau mungkin Anda juga heran kenapa untuk menon-aktifkan tombol CTRL+ALT+DEL di Win 2K/XP sedikit merepotkan, padahal kalo di keluarga windows 9x  kan perintahnya sangat sederhana cukup seperti ini :   Private Declare Function SystemParametersInfo Lib \"user32\" Alias \"SystemParametersInfoA\" (ByVal uAction As Long, ByVal uParam As Long, ByVal lpvParam As Any, ByVal fuWinIni As Long) As Long Private Const SPI_SETSCREENSAVERRUNNING = 97  Dim ret As Long  Private Sub Form_Load()     ret = SystemParametersInfo(SPI_SETSCREENSAVERRUNNING, 1, 0&amp;, 0&amp;) 'menonaktifkan CTRL + ALT + DEL End Sub  Private Sub Form_Unload(Cancel As Integer)     ret = SystemParametersInfo(SPI_SETSCREENSAVERRUNNING, 0, 0&amp;, 0&amp;) 'mengaktifkan kembali CTRL + ALT + DEL End Sub  Gimana ? Simple kan? :blush:     Oke kita langsung bahas saja beberapa cara untuk menonaktifkan CTRL + ALT + DEL di Win 2K/XP Cara 1 - via registry Informasi registry windows yang harus kita modifikasi adalah sebagai berikut :   User Key : [HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System] Name     : DisableTaskMgr Type     : REG_DWORD (DWORD Value) Value    : (0 = default, 1 = disable Task Manager)  Berikut adalah kode lengkap untuk menonaktifkan CTRL + ALT + DEL via registry   Private Const HKEY_CURRENT_USER = &amp;H80000001 Private Const REG_DWORD = 4  Private Sub disableTaskMgr(ByVal value As Boolean)     Dim nBufferKey  As Long     Dim nVal        As Long      nVal = IIf(value, 1, 0)      RegOpenKey HKEY_CURRENT_USER, \"Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\", nBufferKey     RegSetValueEx nBufferKey, \"DisableTaskMgr\", 0, REG_DWORD, nVal, Len(nVal)     RegCloseKey nBufferKey End Sub  Private Sub Form_Load()     Call disableTaskMgr(True) End Sub  Cara pertama menurut saya kurang kren :grin: karena merupakan metode yang sudah sering digunakan oleh virus-virus lokal, ditambah kalau usernya login menggunakan user non administrator otomatis akan gagal menulis ke registry windows.   Cara 2 - Fungsi API (FindWindow, PostMessage dan DestroyWindow)  + Timer   Private Declare Function FindWindow Lib \"user32\" Alias \"FindWindowA\" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long Private Declare Function PostMessage Lib \"user32\" Alias \"PostMessageA\" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lParam As Any) As Long Private Declare Function DestroyWindow Lib \"user32\" (ByVal hwnd As Long) As Long  Private Sub killAppByHWND(ByVal hwnd As Long)     On Error Resume Next      PostMessage hwnd, &amp;H10, 0, 0     DestroyWindow hwnd End Sub  Private Sub Timer1_Timer()     Dim hwnd As Long      hwnd = FindWindow(vbNullString, \"Windows Task Manager\")     If hwnd &lt;&gt; 0 Then Call killAppByHWND(hwnd) End Sub  Cara yang kedua ini program selalu melakukan pengecekan terhadap windows handle/process id dari Windows Task Manager, kalo ketangkep langsung dibunuh wihhhh sadis :cry:.   Cara yang kedua ini juga kurang kren karena masih menyisakan beberapa detik penampakan dari Windows Task Manager sebelum dibunuh.   Cara 3 - Modal terhadap dialog Task Manager (menggunakan eksternal library dsmodal.dll) Oke apa sih yang dimaksud dengan proses modal ? Misalkan kita punya 2 form (Form1 dan Form2) kemudian di Form1 kita ketikkan kode berikut :   Private Sub Command1_Click()     Form2.Show vbModal End Sub  Apa yang terjadi ? Ternyata Form1 tidak aktif/enggak bisa diapa-apain selama Form2 masih aktif. Makanya dengan cara yang ketiga ini otomatis selama program kita masih aktif dialog Task Manager juga ENGGA BISA DIAPA-APAIN :grin:.   Contoh kode penggunaan library dsmodal.dll   Private Declare Function FindWindow Lib \"user32\" Alias \"FindWindowA\" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long Private Declare Function MakeModal Lib \"dsmodal\" (ByVal AppHwnd As Long, ByVal hwndDest As Long, Optional ByVal Beep As Long = 0) As Long  Private Sub Form_Unload(Cancel As Integer)     Call MakeModal(0, 0) ' Release modale state End Sub  Private Sub Timer1_Timer()     Dim taskMgrHwnd As Long     Dim ret         As Long      taskMgrHwnd = FindWindow(vbNullString, \"Windows Task Manager\")     If taskMgrHwnd &lt;&gt; 0 Then         ret = MakeModal(Me.hwnd, taskMgrHwnd, 1)         Timer1.Enabled = False     End If End Sub  Apa yang terjadi setelah kita menjalankan kode program diatas dan menekan tombol CTRL + ALT + DEL? Kalau mau tau download aja sourcenya disini   Cara 4 - Yang paling keren, ampuh dan disarankan oleh banyak para ahli yaitu menggunakan library ekternal WinLockDll.dll Contoh penggunaannya :   Private Declare Function CtrlAltDel_Enable_Disable Lib \"WinLockDll.dll\" (ByVal bEnableDisable As Boolean) As Long  Private Sub cmdDisabledCtrlAltDel_Click()     Call CtrlAltDel_Enable_Disable(False) End Sub  Private Sub cmdEnabledCtrlAltDel_Click()     Call CtrlAltDel_Enable_Disable(True) End Sub  Cara ke 4 ini seampuh kita menonaktifkan CTRL + ALT + DEL di Windows 9x, sourcenya bisa didownload disini   Jangan lupa setelah mendownload file ubah ekstensinya menjadi RAR. Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["CTRL+ALT+DEL","disable key ctrl+alt+del","dsmodal.dll","PostMessage dan DestroyWindow","registry","WinLockDll.dll"],
        "url": "http://coding4ever.net/blog/2010/01/04/banyak-cara-menon-aktifkan-ctrlaltdel-di-win-2kxp-mana-yg-anda-pilih/",
        "teaser": null
      },{
        "title": "Membuat paket instalasi vb + firebird dengan inno setup",
        "excerpt":"Menyambung postingan saya sebelumnya Membuat paket instalasi vb + mysql dengan inno setup kali ini database yang kita paketkan adalah Firebird. Adapun hal-hal yang perlu dipersiapkan :      File Setup Firebird (saat postingan ini dibuat versi Firebird-2.1.3.18185_0_Win32)   File OdbcFb32.dll hasil dari instalasi Firebird ODBC yang ada di c:\\windows\\system32   Inno Setup     Karena semua persiapan sudah oke, berikut skrip instalasinya :   ;Skrip instalasi by k4m4r82 ;http://coding4ever.wordpress.com  [Setup] AppName=Retail Manager Pro AppVerName=Retail Manager Pro Versi 1.0.0.50 AppPublisher=K4m4r82's Laboratory AllowCancelDuringInstall = yes DefaultDirName={pf}\\RetailManagerPro DefaultGroupName=Retail Manager Pro Compression = lzma SolidCompression = yes OutputBaseFilename=SetupRetailManagerPro AllowNoIcons = yes AlwaysRestart = no AlwaysShowComponentsList = no DisableProgramGroupPage = yes AppendDefaultDirName = yes CreateUninstallRegKey = yes DisableStartupPrompt = yes LanguageDetectionMethod=none ShowLanguageDialog=no Uninstallable = yes UninstallFilesDir={app}\\uninst UninstallDisplayIcon={app}\\RetailManager.exe,0 UninstallDisplayName=Retail Manager Pro WindowVisible = no AppCopyright=Copyright © 2009 K4m4r82's Laboratory FlatComponentsList = yes PrivilegesRequired = admin VersionInfoVersion=1.0.0.50 SetupIconFile=Setup.ico WizardImageFile=SetupModern21.bmp WizardSmallImageFile=SetupModernSmall21.bmp  [Languages] Name: ina; MessagesFile: compiler:Indonesia.isl Name: en; MessagesFile: compiler:Default.isl  [Tasks] Name: desktopicon; Description: {cm:CreateDesktopIcon}; GroupDescription: {cm:AdditionalIcons}; Flags: unchecked Name: quicklaunchicon; Description: {cm:CreateQuickLaunchIcon}; GroupDescription: {cm:AdditionalIcons}; Flags: unchecked  [Files] ;Visual Basic Runtime Source: dll&amp;ocx\\VB6STKIT.DLL; DestDir: {sys}; Flags: uninsneveruninstall onlyifdoesntexist Source: dll&amp;ocx\\COMCAT.DLL; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\stdole2.tlb; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regtypelib Source: dll&amp;ocx\\asycfilt.dll; DestDir: {sys}; Flags: uninsneveruninstall onlyifdoesntexist Source: dll&amp;ocx\\olepro32.dll; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\oleaut32.dll; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\msvbvm60.dll; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist  ;file hasil instalasi firebird odbc Source: C:\\WINDOWS\\system32\\OdbcFb32.dll; DestDir: {sys}; Flags: restartreplace sharedfile regserver onlyifdoesntexist  ;file installer database firebird sesuaikan dengan versi yang Anda download Source: main\\Firebird-2.1.3.18185_0_Win32.exe; DestDir: \"{tmp}\"; Flags: deleteafterinstall  ;My Application Runtime Source: main\\RetailManager.exe; DestDir: {app}; Flags: ignoreversion Source: main\\RetailManager.pdf; DestDir: {app}; Flags: ignoreversion Source: main\\RETAIL_MANAGER.FDB; DestDir: {app}\\Db; Flags: onlyifdoesntexist Source: main\\RetailManager.exe.manifest; DestDir: {app}; Flags: ignoreversion  Source: dll&amp;ocx\\cTreeOpt6.ocx; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\vbalDTab6.ocx; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\vbalExpBar6.ocx; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\mscomctl.ocx; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\vbalIml6.ocx; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\cPopMenu6.ocx; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\LVbuttons.ocx; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\MyTextBox.ocx; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\MSCOMCT2.OCX; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\vbalMDITabs6.dll; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\SSubTmr6.dll; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\scrrun.dll; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\cNewMenu6.dll; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regserver onlyifdoesntexist Source: dll&amp;ocx\\msado21.tlb; DestDir: {sys}; Flags: uninsneveruninstall sharedfile regtypelib  [Icons] Name: {group}\\Retail Manager Pro; Filename: {app}\\RetailManager.exe; WorkingDir: {app} Name: {group}\\Retail Manager Pro User Manual; Filename: {app}\\RetailManager.pdf; WorkingDir: {app}  Name: {userdesktop}\\Retail Manager Pro; Filename: {app}\\RetailManager.exe; WorkingDir: {app}; Tasks: desktopicon Name: {userappdata}\\Microsoft\\Internet Explorer\\Quick Launch\\Retail Manager Pro; Filename: {app}\\RetailManager.exe; WorkingDir: {app}; Tasks: quicklaunchicon  [Registry] ;mencatat lokasi instalasi program, ini dibutuhkan jika kita ingin membuat paket instalasi update Root: HKCU; Subkey: \"Software\\K4m4r82`s Laboratory\\RetailManager\"; ValueName: \"installDir\"; ValueType: String; ValueData: {app}; Flags: uninsdeletevalue  [INI] Filename: \"{app}\\infoProgram.ini\"; Section: \"Sistem\"; Key: \"serverName\"; String: \"127.0.0.1\" Filename: \"{app}\\infoProgram.ini\"; Section: \"Sistem\"; Key: \"dbPath\"; String: \"{app}\\Db\"  [Run] ;install firebird Filename: \"{tmp}\\Firebird-2.1.3.18185_0_Win32.exe\"; Parameters: \"/SP- /NORESTART /NOCPL /NOICONS /SILENT /FORCE /COMPONENTS=\"\"servercomponent\\superservercomponent, SuperServerComponent, ServerComponent, ClientComponent, DevAdminComponent\"\"\"; StatusMsg: \"Instalasi Firebird 2.0 Server...\"  ;daftarkan port firebird (3050) ke windows firewall Filename: \"{sys}\\netsh.exe\"; Parameters: \"firewall add portopening TCP 3050 \"\"Service Firebird Server\"\"\"; StatusMsg: \"Mendaftarkan port Service Firebird ...\"; Flags: runhidden; MinVersion: 0,5.01.2600sp2 Filename: \"{sys}\\netsh.exe\"; Parameters: \"firewall add allowedprogram \"\"{pf}\\Firebird\\Firebird_2_0\\bin\\fbserver.exe\"\" \"\"Firebird Server\"\" ENABLE ALL\"; StatusMsg: \"Mendaftarkan Firebird Server ...\"; Flags: runhidden; MinVersion: 0,5.01.2600sp2  ;menjalankan service firebird Filename: \"{pf}\\Firebird\\Firebird_2_0\\bin\\fbserver.exe\"; Parameters: \"-a\"; StatusMsg: \"Menjalankan service firebird\"; Flags: waituntilidle  [UninstallRun] Filename: \"{sys}\\netsh.exe\"; Parameters: \"firewall delete portopening protocol = TCP port = 3050\"; Flags: runhidden; MinVersion: 0,5.01.2600sp2 Filename: \"{sys}\\netsh.exe\"; Parameters: \"firewall delete allowedprogram \"\"{pf}\\Firebird\\Firebird_2_0\\bin\\fbserver.exe\"\"\"; Flags: runhidden; MinVersion: 0,5.01.2600sp2  Selamat mencoba :blush:  ","categories": ["Inno Setup","Tools Installer"],
        "tags": ["firebird","firebird odbc","inno setup","instalasi","paket instalasi"],
        "url": "http://coding4ever.net/blog/2010/01/05/membuat-paket-instalasi-vb-firebird-dengan-inno-setup/",
        "teaser": null
      },{
        "title": "Berkenalan dengan database Firebird",
        "excerpt":"Firebird merupakan RDMS open source yang dikembangkan dari Interbase 6 versi open source milik Borland. Firebird berjalan baik di Linux, Windows, maupun pada sejumlah platform Unix, selain itu kita juga dimudahkan untuk mengakses Firebird dengar tersedianya Firebird ODBC.   Firebird juga mempunyai fitur-fitur database server seperti :      Trigger   Store Procedure   View   Pada artikel kali ini saya akan membahas bagai mana membuat database di Firebird berikut tabelnya, ada 2 cara yang bisa kita gunakan :      Menggunakan utility isql (sama seperti utility mysql)   Menggunakan database manager (disini saya menggunakan IBExpert)     Saya hanya akan membahas cara yang kedua, untuk cara yang pertama mungkin lebih cocox untuk mahasiswa semester-semester awal yang baru belajar DDL, DML dan DCL. Terlalu banyak teori jadi sedikit membosankan untuk dibahas :grin:. Saya lebih senang untuk membahas yang praktis-praktis aja :grin:   Install IBExpert Personal dan tentunya jangan lupa database Firebirdnya juga diinstall.   Jalankan IBExpert jika ada konfirmasi pilih No, jika sudah berikut tampilan IDE IBExpert :      1.\tMembuat database   Klik menu Database -&gt; Create Database, setelah itu akan tampil dialog Create Database      Jika semua informasi sudah diisikan dengan benar kemudian klik Ok, setelah itu akan tampil dialog Database Registration      Sampai tahap ini kita tinggal menentukan versi Server dan Database Alias setelah itu klik tombol Register. Oke sampai disini kita sudah punya database kosong yang tampil di tab Database      2.\tKonek ke database   Database yang sudah dibuat plus sudah didaftarkan di IBExpert tidak otomatis langsung bisa digunakan, langkah berikutnya yang harus kita lakukan adalah melakukan koneksi ke database. Caranya gampang tinggal klik ganda nama databasenya      3.\tMembuat tabel   Untuk contoh kita akan membuat beberapa tabel sederhana sesuai dengan rancangan berikut:      Untuk membuat tabel klik kanan objek tabel -&gt; new tabel, setelah itu akan tampil form untuk membuat struktur tabel.      Saya rasa gambar diatas sudah memberikan penjelasan bagaimana membuat tabel di IBExpert, jika sudah buat juga untuk tabel lainnya.   4.\tMembuat primary key   Aktifkan kembali form pembuatan tabel dengan cara mengklik ganda nama tabel (misal tabel barang) kemudian pilih tab Constraints -&gt; 1. Primary Key      5.\tMembuat foreign key   Sama seperti langkah sebelumnya hanya diaktifkan pilihan tab Constraints -&gt; 2. Foreign keys      Yuph sampai disini saya rasa sudah cukup dasar-dasar untuk membuat database dan tabel di Firebird dengan bantuan IBExpert, artikel berikutnya insya Allah bagaimana membuat trigger, store procedure dan view di Firebird tentunya masih menggunakan tool kesayangan kita IBExpert.   Selamat mencoba :blush:  ","categories": ["Firebird"],
        "tags": ["dcl","ddl","dml","firebird","firebird odbc","ibexpert","isql","mysql","store procedure","trigger","view"],
        "url": "http://coding4ever.net/blog/2010/01/06/berkenalan-dengan-database-firebird/",
        "teaser": null
      },{
        "title": "Mudah dan cepat membentuk form sesuai keinginan",
        "excerpt":"Bosan dengan tampilan form program yang segi empat ? kalo iya saya akan share bagaimana tip dan trik mudah untuk membuat form sesuai keinginan kita, coba lihat bentuk form-form berikut:              Untuk membentuk form seperti diatas waktu yang kita butuhkan kurang dari 5 menit dan kita tidak perlu lagi dipusingkan dengan fungsi-fungsi Windows API apa yang digunakan.   Rahasianya yaitu dengan menggunakan tool VB Shaped Form Creator. Silahkan download dan install.   Berikut langkah-langkah pembuatannya :           Design tampilan form yang Anda inginkan, untuk contoh saya cukup menggunakan Ms Excel untuk menuliskan kata “coding4ever”.              Jalankan program VB Shaped Form Creator kemudian klik tombol Trace a Bitmap to Procedure a Polygon.                   Setelah itu akan tampil jendela Trace Edges dan Anda diminta untuk menentukan file gambar yang akan diolah.                   Setelah menentukan gambar klik tombol Start Tracing                            dan ulangi langkah-langkah di atas (mengklik tombol + Add)                          Simpan file dalam format VB5 or 6 Form (.frm)              Sebagai hasil uji coba diatas Anda bisa download sample program bola mata disini.   Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["bola mata","membentuk form sesuai keinginan","VB Shaped Form Creator","windows API"],
        "url": "http://coding4ever.net/blog/2010/01/08/mudah-dan-cepat-membentuk-form-sesuai-keinginan/",
        "teaser": null
      },{
        "title": "Membuat animasi sederhana menggunakan objek timer",
        "excerpt":"Objek timer selain digunakan untuk menampilkan tanggal dan jam secara realtime, juga bisa digunakan untuk membuat animasi sederhana salah satunya dengan memanfaatkan objek label. Silahkan buat rancangan form seperti berikut :      copy paste kode berikut :     Option Explicit  Dim x           As Integer Dim gerakX      As Integer Dim gerakY      As Integer Dim zigZagX     As Integer Dim zigZagY     As Integer Dim i           As Integer  Private Sub Form_Load()     gerakY = 20     x = 20     zigZagX = 20     zigZagY = 20 End Sub  Source code untuk event _Timer (gunakan salah satu atau solusi lain objek timernya dijadikan array kemudian tinggal seleksi berdasarkan index array)   1. Teks berjalan dari kiri ke kanan   lblAnimasi.Move lblAnimasi.Left - 15 If lblAnimasi.Left &lt; -lblAnimasi.Width Then lblAnimasi.Left = picPanel.Width  2. Teks mantul dari kiri ke kanan   lblAnimasi.Move lblAnimasi.Left - x If lblAnimasi.Left &lt; picPanel.ScaleLeft Then     x = -20 ElseIf lblAnimasi.Left + lblAnimasi.Width &gt; picPanel.ScaleWidth + picPanel.ScaleLeft Then     x = 20 End If  3. Teks mantul dari atas ke bawah   lblAnimasi.Move lblAnimasi.Left + gerakX, lblAnimasi.Top + gerakY If lblAnimasi.Top &lt; picPanel.ScaleTop Then     gerakY = 20 ElseIf lblAnimasi.Top + lblAnimasi.Height &gt; picPanel.ScaleHeight + picPanel.ScaleTop Then     gerakY = -20 End If  4. Teks zig zag   lblAnimasi.Move lblAnimasi.Left + zigZagX, lblAnimasi.Top + zigZagY If lblAnimasi.Left &lt; picPanel.ScaleLeft Then     zigZagX = 20 ElseIf lblAnimasi.Left + lblAnimasi.Width &gt; picPanel.ScaleWidth + picPanel.ScaleLeft Then     zigZagX = -20 ElseIf lblAnimasi.Top &lt; picPanel.ScaleTop Then     zigZagY = 20 ElseIf lblAnimasi.Top + lblAnimasi.Height &gt; picPanel.ScaleHeight + picPanel.ScaleTop Then     zigZagY = -20 End If  Contoh source code bisa didownload disini.   Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["animasi","objek timer","teks berjalan","timer"],
        "url": "http://coding4ever.net/blog/2010/01/08/membuat-animasi-sederhana-menggunakan-objek-timer/",
        "teaser": null
      },{
        "title": "Mengoptimalkan penggunaan fungsi Shell",
        "excerpt":"Salah satu fungsi built-in vb yang mempunyai mempunyai fungsi serba guna yaitu fungsi Shell. Fungsi ini bisa digunakan untuk :** **   1. Menjalankan file-file Excutible (.exe, .com, .bat de el el)   Contoh menjalankan notepad:   Dim ret As Double ret = Shell(\"notepad.exe\", vbNormalFocus)    2. Menjalankan file-file non Executible (.doc, .xls, .mdb, .txt de el el)   Contoh menjalankan file text:   Dim ret As Double ret = Shell(\"notepad.exe c:\\tes.txt\", vbNormalFocus) 'dg syarat file tes.txt harus sudah ada  Tapi saran saya untuk menjalankan file-file non executible lebih aman menggunakan fungsi API ShellExecute, karena kita tidak perlu menentukan secara spesifik program apa yang digunakan untuk membuka file tersebut.   3. Mengakses fungsi-fungsi control panel   Contoh kita akan menampilkan dialog Display dan otomatis mengaktifkan tab Background   Dim ret As Double 'displays the Background tab selected ret = Shell(\"rundll32.exe shell32.dll,Control_RunDLL desk.cpl,,0\", vbNormalFocus)  'displays the Screen Saver tab selected 'ret = Shell(\"rundll32.exe shell32.dll,Control_RunDLL desk.cpl,,1\", vbNormalFocus)  'displays the Appearance tab selected 'ret = Shell(\"rundll32.exe shell32.dll,Control_RunDLL desk.cpl,,2\", vbNormalFocus)  Sumber command lainnya untuk mengakses fungsi-fungsi control panel bisa dilihat disini.   Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["fungsi API","fungsi built-in vb","Shell","ShellExecute"],
        "url": "http://coding4ever.net/blog/2010/01/09/mengoptimalkan-penggunaan-fungsi-shell/",
        "teaser": null
      },{
        "title": "Meningkatkan daya tarik ListView",
        "excerpt":"ListView adalah salah satu komponen VB yang digunakan untuk menampilkan data dalam format tabel, lihat gambar :      Sayangnya secara default ListView tidak mempunyai kemampuan untuk menghasilkan tampilan seperti di bawah ini, tetapi jangan khawatir dengan sedikit permainan kode kita bisa membuat tampilan ListView menjadi seperti berikut :        Oke kita langsung saja, buat design program seperti berikut :      kemudian copy paste kode berikut :   Private Sub setBackColorListView(ByVal objList As ListView, ByVal objPic As PictureBox)      Dim i As Long      objPic.BackColor = objList.BackColor     objPic.ScaleMode = vbTwips     objPic.BorderStyle = vbBSNone     objPic.AutoRedraw = True      objPic.Width = objList.Width     objPic.Height = objList.ListItems(1).Height * (objList.ListItems.Count)     objPic.ScaleHeight = objList.ListItems.Count     objPic.ScaleWidth = 1     objPic.DrawWidth = 1     objPic.Cls      For i = 1 To objList.ListItems.Count        If i Mod 2 = 0 Then          objPic.Line (0, i - 1)-(1, i), RGB(255, 255, 255), BF         Else          objPic.Line (0, i - 1)-(1, i), RGB(239, 239, 239), BF 'ganti warna posisinya disini        End If     Next      objList.Picture = objPic.Image End Sub  Contoh penggunaan   Private Sub Form_Load()     Dim x As Long      With ListView1         .View = lvwReport         .GridLines = True         .ColumnHeaders.Add , , \"No.\", 500         .ColumnHeaders.Add , , \"Item\", 4700          For x = 1 To 10             .ListItems.Add , , x             .ListItems(x).SubItems(1) = \"Item \" &amp; x         Next     End With      Call setBackColorListView(ListView1, Picture1) 'panggil prosedurnya disini End Sub  Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["BackColor","ListItems","ListView","RGB","setBackColorListView","SubItems"],
        "url": "http://coding4ever.net/blog/2010/01/11/meningkatkan-daya-tarik-listview/",
        "teaser": null
      },{
        "title": "Membuat menu cantik dengan VBSmart Menu XP",
        "excerpt":"VBSmartMenu XP merupakan salah satu komponen tambahan di VB untuk membuat menu bergaya menu Ms Office 200x yang tentunya fitur ini tidak dimiliki oleh Menu Editor yang merupakan fasilitas standar di VB untuk membuat menu, oke mari kita lihat cuplikan menu yang dihasilkan oleh komponen VBSmartMenu XP.      Gimana ? Cantik bukan ? :blush:     Komponen VBSmartMenu XP terdiri dari 2 file yaitu SmartMenuXP.dll dan SmartMenuXP.ocx yang tentunya untuk menggunakan komponen ini Anda harus melakukan registrasi manual ke dua komponen tersebut.   Sudah enggak sabaran melihat kodenya berikut cuplikannya :   Option Explicit  Private Function getIcon(ByVal iconName As String) As StdPicture     Set getIcon = LoadPicture(App.Path + \"\\Icons\\\" + iconName + \".ico\") End Function  Private Sub addMenuXP()     With SmartMenuXP1.MenuItems         .Add 0, \"mnuFile\", , \"&amp;File\"         .Add \"mnuFile\", \"mnuNew\", , \"&amp;New\", getIcon(\"new\")         .Add \"mnuFile\", \"mnuOpen\", , \"&amp;Open\", getIcon(\"open\")         .Add \"mnuFile\", \"mnuClose\", , \"&amp;Close\", getIcon(\"close\")         .Add \"mnuFile\", , smiSeparator         .Add \"mnuFile\", \"mnuSave\", , \"&amp;Save\", getIcon(\"save\")         .Add \"mnuFile\", \"mnuSaveAs\", , \"Save &amp;As...\"         .Add \"mnuFile\", , smiSeparator         .Add \"mnuFile\", \"mnuPrintPreview\", , \"Print Pre&amp;view\", getIcon(\"preview\")         .Add \"mnuFile\", \"mnuPrint\", , \"&amp;Print\", getIcon(\"print\")         .Add \"mnuFile\", , smiSeparator          .Add \"mnuFile\", \"mnuSendTo\", , \"Sen&amp;d To\"         .Add \"mnuSendTo\", \"mnuMailRecipient\", , \"&amp;Mail Recipient\", getIcon(\"mail\")         .Add \"mnuSendTo\", \"mnuMailRecipientReview\", , \"Mail Re&amp;cipient (for Review)\"         .Add \"mnuSendTo\", \"mnuOnlineMeetingParticipant\", , \"&amp;Online Meeting Participant\"         .Add \"mnuSendTo\", \"mnuFaxRecipient\", , \"&amp;Fax Recipient...\", getIcon(\"fax\")         .Add \"mnuSendTo\", , smiSeparator         .Add \"mnuSendTo\", \"mnuMicrosoftPowerPoint\", , \"Microsoft &amp;PowerPoint\", getIcon(\"powerpoint\")          .Add \"mnuFile\", , smiSeparator         .Add \"mnuFile\", \"mnuExit\", , \"&amp;Exit\"          'TODO : DEFINISIKAN MENU YANG LAIN DISINI      End With End Sub  Kemudian kita cukup memanggil prosedur addMenuXP di event Form_Load form utama :   Private Sub Form_Load()     Call addMenuXP End Sub  Dan bagaimana cara menghandle user mengklik menu yang mana ? kita tinggal memasang kode di event SmartMenuXP_Click :   Private Sub SmartMenuXP1_Click(ByVal ID As Long)     With SmartMenuXP1.MenuItems         Select Case .Key(ID)             Case \"mnuNew\": 'TODO : something here             Case \"mnuOpen\":             Case \"mnuClose\":             Case \"mnuSave\":             Case \"mnuSaveAs\":             Case \"mnuPrintPreview\":             Case \"mnuPrint\":             Case \"mnuMailRecipient\":             Case \"mnuMailRecipientReview\":             Case \"mnuOnlineMeetingParticipant\":             Case \"mnuFaxRecipient\":             Case \"mnuMicrosoftPowerPoint\":             Case \"mnuExit\": End         End Select     End With End Sub  Source code berikut komponen VBSmartMenuXP bisa didownload disini, dan jangan lupa sebelum membuka sample program jalankan terlebih dahulu file install.cmd yang ada di sub folder dll&amp;ocx.   Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["membuat menu","menu cantik","vbsmart menu xp"],
        "url": "http://coding4ever.net/blog/2010/01/12/membuat-menu-cantik-dengan-vbsmart-menu-xp/",
        "teaser": null
      },{
        "title": "Apakah objek PictureBox Anda bisa seperti ini ?",
        "excerpt":"Objek PictureBox mempunyai beberapa properties yang nilainya bisa di set sehingga mempengaruhi tampilan PictureBox itu sendiri.   Berikut adalah contoh beberapa style objek PictureBox dengan memanfaatkan properties standar :        Dan kita akan menambahkan 2 style lagi yang karena keterbatasan properties yang ada mengharuskan kita sedikit bermain-main kode :      Source code lengkap :   Private Sub styleFlat1(ByVal objPicture As PictureBox)     With objPicture         .AutoRedraw = True         .BorderStyle = vbBSNone         .ScaleMode = vbPoints          objPicture.Line (0, 0)-(.ScaleWidth, 0), &amp;H808080         objPicture.Line (0, 0)-(0, .ScaleWidth), &amp;H808080         objPicture.Line (.ScaleWidth - 1, .ScaleHeight - 1)-(.ScaleWidth - 1, 0), vbWhite         objPicture.Line (.ScaleWidth - 1, .ScaleHeight - 1)-(0, .ScaleHeight - 1), vbWhite     End With End Sub  Private Sub styleFlat2(ByVal objPicture As PictureBox)     With objPicture         .AutoRedraw = True         .BorderStyle = vbBSNone         .ScaleMode = vbPoints          objPicture.Line (0, 0)-(.ScaleWidth, 0), vbWhite         objPicture.Line (0, 0)-(0, .ScaleWidth), vbWhite         objPicture.Line (.ScaleWidth - 1, .ScaleHeight - 1)-(.ScaleWidth - 1, 0), &amp;H808080         objPicture.Line (.ScaleWidth - 1, .ScaleHeight - 1)-(0, .ScaleHeight - 1), &amp;H808080     End With End Sub  Private Sub Form_Load()     'tinggal panggil prosedure styleFlat1 &amp; styleFlat2 disini     Call styleFlat1(Picture4)     Call styleFlat2(Picture5) End Sub  Sehingga hasil akhirnya adalah :      Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["Appearance","BorderStyle","flat","PictureBox"],
        "url": "http://coding4ever.net/blog/2010/01/13/apakah-objek-picturebox-anda-bisa-seperti-ini/",
        "teaser": null
      },{
        "title": "Properties KeyPreview MDIForm kok enggak ada ya ?",
        "excerpt":"Secara umum ada 2 jenis form yang kita kenal yaitu :      SDI Form   MDI Form   Trus apa perbedaan antara SDI form dan MDI form ? Ya monggo silahkan cari aja sendiri :grin:   Gimana udah dapat perbedaannya ? Ok salah satu properties penting yang dimiliki SDI Form adalah KeyPreview, jika nilainya di set True maka form akan terlebih dulu merespon event keyboard dibandingkan objek lainnya.   Misal kita ingin menambahkan beberapa fungsi shortcut berikut :     Private Sub Form_KeyPress(KeyAscii As Integer)     If KeyAscii = vbKeyEscape Then cmdSelesai_Click 'tombol ESC End Sub  Private Sub Form_KeyDown(KeyCode As Integer, Shift As Integer)     If KeyCode = vbKeyT And (Shift And vbCtrlMask) Then 'tombol CTRL + T         If cmdTambah.Enabled = True Then cmdTambah_Click      ElseIf KeyCode = vbKeyB And (Shift And vbCtrlMask) Then 'tombol CTRL + B         If cmdPerbaiki.Enabled = True Then cmdPerbaiki_Click      ElseIf KeyCode = vbKeyH And (Shift And vbCtrlMask) Then 'tombol CTRL + H         If cmdHapus.Enabled = True Then cmdHapus_Click      ElseIf KeyCode = vbKeyE And (Shift And vbCtrlMask) Then 'tombol CTRL + E         cmdSelesai_Click     End If End Sub  Kode diatas tidak akan jalan jika properties KeyPreview masih dalam kondisi False (ingat nilai default properties KeyPreview = False).   Nah sesuai dengan judul artikel kali ini yang menjadi pertanyaan adalah MDI Form tidak mempunyai properties KeyPreview, trus bagaimana solusinya jika kita ingin menambahkan tombol shortcut ?   Ada banyak cara, salah satu solusi yang mudah dan murah tentunya :grin: adalah sebagai berikut :      Tambahkan objek Timer kemudian set nilai Intervalnya misal 100   Ketikkan kode berikut misal kita akan membuat shortcut pencarian (CTRL + F)   Private Declare Function GetAsyncKeyState Lib \"user32\" (ByVal vKey As Long) As Integer  Private Sub Timer1_Timer()     If GetAsyncKeyState(vbKeyF) And &amp;H8000 Then        If GetAsyncKeyState(vbKeyControl) And &amp;H8000 Then            'TODO : tampilkan dialog pencarian di sini        End If    End If End Sub  Pertanyaan berikutnya, kenapa harus ada nilai &amp;H8000 ?   Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["Form_KeyDown","Form_KeyPress","keyascii","KeyCode","keypreview","mdi form","sdi form","vbCtrlMask"],
        "url": "http://coding4ever.net/blog/2010/01/14/properties-keypreview-mdiform-kok-enggak-ada-ya/",
        "teaser": null
      },{
        "title": "Menonaktifkan tombol Minimize, Maximize dan Close",
        "excerpt":"Yaph kali kita akan membahas artikel sederhana dan mudah-mudahan bisa menambah referensi bagi Anda yang baru belajar vb, kita langsung saja lihat gambar berikut :      dan kita akan mencoba menonaktifkan/mendisable ketiga tombol diatas.   1. Menonaktifkan tombol Minimize      2. Menonaktifkan tombol Maximize      3. Menonaktifkan tombol Close      :grin: gimana? Pasti bingung mencari properties CloseButton ? Yaph form di vb memang tidak menyediakan properties CloseButton sehingga untuk menonaktifkan tombol tersebut kita akan menggunakan fungsi API.     Berikut deklarasi lengkap fungsi API, konstanta dan prosedur disableCloseButton :   Private Declare Function GetSystemMenu Lib \"user32\" (ByVal hwnd As Long, ByVal bRevert As Long) As Long Private Declare Function GetMenuItemCount Lib \"user32\" (ByVal hMenu As Long) As Long Private Declare Function RemoveMenu Lib \"user32\" (ByVal hMenu As Long, ByVal nPosition As Long, ByVal wFlags As Long) As Long Private Declare Function DrawMenuBar Lib \"user32\" (ByVal hwnd As Long) As Long  Private Const MF_REMOVE = &amp;H1000&amp; Private Const MF_BYPOSITION = &amp;H400&amp;  Private Sub disableCloseButton(ByVal hWnd As Long)     Dim ret1 As Long     Dim ret2 As Long      ret1 = GetSystemMenu(hWnd, False)     If ret1 &lt;&gt; 0 Then         ret2 = GetMenuItemCount(ret1)         If ret2 &lt;&gt; 0 Then             RemoveMenu ret1, ret2 - 1, MF_REMOVE Or MF_BYPOSITION             RemoveMenu ret1, ret2 - 2, MF_REMOVE Or MF_BYPOSITION             DrawMenuBar hWnd         End If     End If End Sub  Selanjutnya kita tinggal panggil di event Form_Load :   Private Sub Form_Load()     Call disableCloseButton(Me.hWnd) End Sub  Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["DrawMenuBar","fungsi API","GetMenuItemCount","GetSystemMenu","Maximize dan Close","Minimize","RemoveMenu"],
        "url": "http://coding4ever.net/blog/2010/01/15/menonaktifkan-tombol-minimize-maximize-dan-close/",
        "teaser": null
      },{
        "title": "Membuat paket instalasi vb + mysql dengan NSIS",
        "excerpt":"Melengkapi tulisan saya Membuat paket instalasi vb + mysql dengan inno setup kali ini kita akan membuatnya menggunakan NSIS.    NSIS adalah salah satu tool gratis dan open source untuk membuat paket instalasi. Oke sebelum kita melangkah lebih jauh, berikut adalah hal-hal yang perlu kita persiapkan :      NSIS   MySQL versi noninstall disesuaikan dengan versi MySQL yang terinstall di komputer Anda   Connector ODBC yang sudah terinstall biasanya ada di C:\\Program Files\\MySQL\\Connector ODBC 5.1   Database yang sudah di backup/dump   Untuk editor, bagi Anda yang buta warna cukup pake notepad :grin:, saya sendiri menggunakan notepad++ atau kalo pengen lebih nyaman bisa menggunakan eclipse kemudian download plug-in NSIS     Memang kalo dilihat dari segi skrip,  Inno Setup lebih simple dibandingkan NSIS tetapi setelah saya bandingkan hasil paket instalasi NSIS lebih kecil dibandingkan Inno Setup.   Skrip Inno Setup dan NSIS sama-sama dikelompokkan dalam section-section bedanya kalo Inno Setup untuk nama sectionnya sudah fix (misal Setup, Tasks, Files de el el) sedangkan NSIS untuk nama sectionnya bebas dan tentunya dalam penamaan section di NSIS disesuaikan dengan isinya (misal Install MySQL 5).   Salah satu bagian penting dari skrip NSIS yang kita bahas disini adalah skrip yang digunakan untuk membuat service MySQL, mendaftarkan driver MySQL Connector ODBC dan melakukan proses undump skrip databse (.sql).   Saya ambil contoh untuk membuat service MySQL tentunya dilihat dari versi windows yang terinstall kalo keluarga Win9x jelas tidak bisa karena belum mendukung pembuatan service, oleh karena itu sebelum menjalankan perintah membuat service akan dilakukan pengecekan versi windows terlebih dulu.   Nah disini akan terlihat jelas perbedaan skrip Inno Setup dan NSIS dimana untuk melakukan ini inno setup cukup menambahkan flag MinVersion, misal :   [Run] ;mysqld --install MySQL Filename: \"{app}\\mysql\\bin\\mysqld.exe\"; Parameters: \"install \"\"MySQL\"\"\"; StatusMsg: \"Sedang menginstall service MySQL ...\"; Flags: runhidden; MinVersion: 0,5.01.2600sp2; Tasks: installmysql  Sedangkan untuk NSIS kita perlu mendownload Version plug-in terlebih dulu dan mengekstraknya kemudiakan mengcopykan file version.dll ke folder instalasi NSIS\\Plugins, walaupun sebenarnya kita bisa membuat fungsi sendiri di NSIS untuk mengecek versi windows yang terinstall.   Contoh skrip NSIS untuk mengecek versi windows dan menginstall service MySQL :   Section \"Install MySQL 5\" \tVersion::IsWindowsXP  \tPop $0 ;nilai var $0 akan bersisi 1 jika windows XP selain itu 0 \tStrCmp $0 \"1\" ItIsWindowsXP ItIsNotWindowsXP ;StrCmp sama seperti fungsi IIF di VB  \tItIsWindowsXP: \tGoto installservice  \tItIsNotWindowsXP: \tGoto done  \tinstallservice: \t\tDetailPrint \"Sedang menginstall service MySQL ...\" \t\tExecWait '\"$MYSQL_DIR\\bin\\mysqld.exe\" install \"MySQL\"'  \tdone: \t\t;do nothing SectionEnd  Gimana lumayan beda kan? :blush:   Khusus untuk file-file Runtime VB memerlukan penanganan khusus dan untuk memudahkan Anda mencoba sample skrip ini download terlebih dahulu file Runtime VB disini dan jangan lupa diekstrak.   Persiapan terakhir untuk struktur folder saya buat seperti berikut :      Dan saya tidak akan menjelaskan fungsi-fungsi/perintah yang digunakan dalam skrip NSIS karena sudah saya sisipkan komentar di sample skrip instalasi NSIS.   Jika masih kesulitan Anda bisa langsung membaca manual NSIS yang penjelasannya sudah sangat lengkap.   Berikut contoh skrip instalasi lengkap menggunakan NSIS :   ;Skrip instalasi by k4m4r82 ;http://coding4ever.wordpress.com  !include VB6RunTime.nsh  ;deklarasi konstanta ;format pemanggilan ${NAMA_KONSTANTA} !define APP_NAME \"Sistem Pembelian Bahan Baku PT. ALBASI\" !define APP_PUBLISHER \"K4m4r82's Laboratory\" !define APP_VERSION \"2.0.50\"  BrandingText /TRIMCENTER \"-- ${APP_PUBLISHER} --\" Name \"${APP_NAME} ${APP_VERSION}\" Caption \"${APP_NAME} ${APP_VERSION}\"  CompletedText \"Instalasi sudah selesai\"  Icon \"setup.ico\" LoadLanguageFile \"${NSISDIR}\\Contrib\\Language files\\Indonesian.nlf\" OutFile \"output\\DemoSetupNSIS.exe\" ShowInstDetails show ShowUninstDetails show WindowIcon on XPStyle on  ;informasi default folder instalasi InstallDir \"$PROGRAMFILES\\SPBB\"  ;informasi folder instalasi disimpan disini ;informasi ini akan memudahkan kita untuk membuat program update InstallDirRegKey HKCU \"Software\\PT ALBASI\\SPBB\" \"InstallDir\"  VIAddVersionKey /LANG=${LANG_INDONESIAN} \"ProductName\" \"${APP_NAME}\" VIAddVersionKey /LANG=${LANG_INDONESIAN} \"Comments\" \"\" VIAddVersionKey /LANG=${LANG_INDONESIAN} \"CompanyName\" \"${APP_PUBLISHER}\" VIAddVersionKey /LANG=${LANG_INDONESIAN} \"LegalTrademarks\" \"${APP_NAME} is a trademark of ${APP_PUBLISHER}\" VIAddVersionKey /LANG=${LANG_INDONESIAN} \"LegalCopyright\" \"Copyright © 2009. ${APP_PUBLISHER}\" VIAddVersionKey /LANG=${LANG_INDONESIAN} \"FileDescription\" \"${APP_NAME}\" VIAddVersionKey /LANG=${LANG_INDONESIAN} \"FileVersion\" \"2.0.0.50\" VIProductVersion \"2.0.0.50\"  RequestExecutionLevel admin  AddBrandingImage left 150|234 Page custom BrandingImage Page components Page directory Page instfiles  UninstPage custom un.BrandingImage UninstPage uninstConfirm UninstPage instfiles  ;deklarsi variabel ;format pemanggilan $NAMA_VARIABEL ingat ada sedikit perbedaan dg konstanta Var MainDir Var MySQLDir Var AlreadyInstalled  ;section yang diawali karakter -, pilihannya tidak ditampilkan Section \"-Inisialisasi Variabel\"     StrCpy $MainDir $INSTDIR \tStrCpy $MySQLDir $MainDir\\mysql SectionEnd  Section \"-Visual Basic Runtime\" \t;download file Visual Basic Runtime di: http://nsis.sourceforge.net/vb6runtime.zip \tIfFileExists \"$MainDir\\Albasi.exe\" 0 new_installation \t\tStrCpy $AlreadyInstalled 1  \tnew_installation: \t\t!insertmacro VB6RunTimeInstall \"dll&amp;ocx\\vb6runtime\" $AlreadyInstalled SectionEnd  Section \"-My Application Runtime\" \tSetOutPath $MainDir         File \"main\\Albasi.exe.manifest\" \tFile \"main\\Albasi.exe\"  \tSetOutPath $SYSDIR  \tFile \"dll&amp;ocx\\LVbuttons.OCX\" \tRegDLL \"$SYSDIR\\LVbuttons.ocx\"  \tFile \"dll&amp;ocx\\MSMASK32.OCX\" \tRegDLL \"$SYSDIR\\MSMASK32.ocx\"  \tFile \"dll&amp;ocx\\cTreeOpt6.ocx\" \tRegDLL \"$SYSDIR\\cTreeOpt6.ocx\"  \tFile \"dll&amp;ocx\\Comdlg32.ocx\" \tRegDLL \"$SYSDIR\\Comdlg32.ocx\"  \tFile \"dll&amp;ocx\\vbalDTab6.ocx\" \tRegDLL \"$SYSDIR\\vbalDTab6.ocx\"  \tFile \"dll&amp;ocx\\vbalExpBar6.ocx\" \tRegDLL \"$SYSDIR\\vbalExpBar6.ocx\"  \tFile \"dll&amp;ocx\\MSCOMCTL.OCX\" \tRegDLL \"$SYSDIR\\MSCOMCTL.ocx\"  \tFile \"dll&amp;ocx\\vbalIml6.ocx\" \tRegDLL \"$SYSDIR\\vbalIml6.ocx\"  \tFile \"dll&amp;ocx\\cPopMenu6.ocx\" \tRegDLL \"$SYSDIR\\cPopMenu6.ocx\"  \tFile \"dll&amp;ocx\\cNewMenu6.dll\" \tRegDLL \"$SYSDIR\\cNewMenu6.DLL\"  \tFile \"dll&amp;ocx\\scrrun.dll\" \tRegDLL \"$SYSDIR\\scrrun.DLL\"  \tFile \"dll&amp;ocx\\vbalMDITabs6.dll\" \tRegDLL \"$SYSDIR\\vbalMDITabs6.DLL\"  \tFile \"dll&amp;ocx\\SSubTmr6.dll\" \tRegDLL \"$SYSDIR\\SSubTmr6.DLL\"  \tFile \"dll&amp;ocx\\msado21.tlb\" \tRegDLL \"$SYSDIR\\msado21.tlb\" SectionEnd  ; param /e -&gt; expand SectionGroup /e \"Komponen Server\" \tSection \"Install MySQL 5\" \t\t; param /r -&gt; recursive \t\tSetOutPath $MySQLDir\\bin \t\tFile /r \"mysql-5.1.36-win32\\bin\\*.*\"  \t\tSetOutPath $MySQLDir\\Docs \t\tFile /r \"mysql-5.1.36-win32\\Docs\\*.*\"  \t\tSetOutPath $MySQLDir\\lib \t\tFile /r \"mysql-5.1.36-win32\\lib\\*.*\"  \t\tSetOutPath $MySQLDir\\share \t\tFile /r \"mysql-5.1.36-win32\\share\\*.*\"  \t\tSetOutPath $MySQLDir\\data \t\tFile /r \"mysql-5.1.36-win32\\data\\*.*\"  \t\tSetOutPath $MySQLDir \t\tFile \"mysql-5.1.36-win32\\*.*\"  \t\t;informasi lokasi instalasi mysql \t\tWriteINIStr $MySQLDir\\my.ini \"mysqld\" \"basedir\" $MySQLDir \t\tWriteINIStr $MySQLDir\\my.ini \"mysqld\" \"datadir\" $MySQLDir\\data  \t\t;proses membuat dan menjalankan service mysql, cek versi windows terlebih dulu \t\t;untuk contoh disini baru di tes untuk windows xp sp2 \t\tVersion::IsWindowsXP  \t\tPop $0 ;nilai var $0 akan bersisi 1 jika windows XP selain itu 0 \t\tStrCmp $0 \"1\" ItIsWindowsXP ItIsNotWindowsXP ;StrCmp sama seperti fungsi IIF di VB  \t\tItIsWindowsXP: \t\tGoto installservice  \t\tItIsNotWindowsXP: \t\tGoto done  \t\tinstallservice: \t\t\tDetailPrint \"Sedang menginstall service MySQL ...\" \t\t\tExecWait '\"$MySQLDir\\bin\\mysqld.exe\" install \"MySQL\"'  \t\t\t;jalankan service MySQL \t\t\tDetailPrint \"Sedang menjalankan service MySQL ...\" \t\t\tExecWait '\"$SYSDIR\\net.exe\" start \"MySQL\"'  \t\t\t;mendaftarkan port default mysql (3306) ke firewall \t\t\tDetailPrint \"Sedang mendaftarkan port MySQL ...\" \t\t\tExecWait '\"$SYSDIR\\netsh.exe\" firewall add portopening TCP 3306 \"Port MySQL\"'  \t\t\t;mengganti password default root (blank). ex : masterkey \t\t\tDetailPrint \"Mengganti password root\" \t\t\tExecWait '\"$MySQLDir\\bin\\mysqladmin.exe\" -uroot password masterkey'  \t\t\t;menghapus user default1 (user=blank, password=blank) \t\t\tExecWait '\"$MySQLDir\\bin\\mysql.exe\" -uroot -pmasterkey -e \"DELETE FROM mysql.user WHERE Host=$\\'localhost$\\' AND User=$\\'$\\'\"' \t\t\tExecWait '\"$MySQLDir\\bin\\mysql.exe\" -uroot -pmasterkey -e \"FLUSH PRIVILEGES\"'  \t\t\t;menghapus user default2 (user=root, password=blank) \t\t\tExecWait '\"$MySQLDir\\bin\\mysql.exe\" -uroot -pmasterkey -e \"DELETE FROM mysql.user WHERE Host=$\\'127.0.0.1$\\' AND User=$\\'root$\\'\"' \t\t\tExecWait '\"$MySQLDir\\bin\\mysql.exe\" -uroot -pmasterkey -e \"FLUSH PRIVILEGES\"'  \t\t\t;set agar user root bisa login dari mesin lain (kalo diperlukan) \t\t\tExecWait '\"$MySQLDir\\bin\\mysql.exe\" -uroot -pmasterkey -e \"GRANT ALL PRIVILEGES ON *.* TO root@$\\'%$\\' IDENTIFIED BY $\\'masterkey$\\'\"' \t\t\tExecWait '\"$MySQLDir\\bin\\mysql.exe\" -uroot -pmasterkey -e \"FLUSH PRIVILEGES\"'  \t\tdone: \t\t\t;do nothing     SectionEnd  \tSection \"Install MySQL Connector ODBC\" \t\tSetOutPath $SYSDIR  \t\t;dll mysql odbc tidak perlu diregistrasikan \t\t;jadi otomatis tidak perlu memanggil fungsi RegDLL \t\tFile \"C:\\Program Files\\MySQL\\Connector ODBC 5.1\\myodbc5.dll\" \t\tFile \"C:\\Program Files\\MySQL\\Connector ODBC 5.1\\myodbc5S.dll\" \t\tFile \"C:\\Program Files\\MySQL\\Connector ODBC 5.1\\myodbc5.lib\" \t\tFile \"C:\\Program Files\\MySQL\\Connector ODBC 5.1\\myodbc5S.lib\" \t\tFile \"C:\\Program Files\\MySQL\\Connector ODBC 5.1\\myodbc-installer.exe\"  \t\tVersion::IsWindowsXP  \t\tPop $0 \t\tStrCmp $0 \"1\" ItIsWindowsXP ItIsNotWindowsXP  \t\tItIsWindowsXP: \t\tGoto installdriverodbc  \t\tItIsNotWindowsXP: \t\tGoto done  \t\tinstalldriverodbc: \t\t\t;install driver myodbc \t\t\tDetailPrint \"Tunggu sedang mendaftarkan driver MySQL Connector ODBC 5.1.5\" \t\t\tExecWait '\"$SYSDIR\\myodbc-installer.exe\" -d -a -n \"MySQL ODBC 5.1 Driver\" -t \"DRIVER=myodbc5.dll;SETUP=myodbc5S.dll\"'  \t\tdone: \t\t\t;do nothing \tSectionEnd  \tSection \"Install Database\" \t\tSetOutPath $MySQLDir\\bin  \t\tFile \"main\\albasi.sql\" \t\tFile \"main\\exec.cmd\"  \t\tVersion::IsWindowsXP  \t\tPop $0 \t\tStrCmp $0 \"1\" ItIsWindowsXP ItIsNotWindowsXP  \t\tItIsWindowsXP: \t\tGoto installdatabase  \t\tItIsNotWindowsXP: \t\tGoto done  \t\tinstalldatabase: \t\t\t;membuat database kosong \t\t\tExecWait '\"$MySQLDir\\bin\\mysql.exe\" -uroot -pmasterkey -e \"CREATE DATABASE albasi\"'  \t\t\t;menjalankan file batch exec.cmd untuk melakukan proses undump \t\t\tExecWait '\"$MySQLDir\\bin\\exec.cmd\"'  \t\tdone: \t\t\t;do nothing \tSectionEnd SectionGroupEnd  SectionGroup /e \"Buat Shortcut\" \tSection \"Start Programs\" \t\tSectionIn RO ;RO -&gt; Read Only  \t\tCreateDirectory \"$SMPROGRAMS\\PT. ALBASI\" \t\tCreateShortCut \"$SMPROGRAMS\\PT. ALBASI\\${APP_NAME}.lnk\" \"$MainDir\\Albasi.exe\" \"\" \"$MainDir\\Albasi.exe\" 0 \tSectionEnd      Section \"Desktop\" \t\t;CreateDirectory \"$DESKTOP\\SPBB\" \t\tCreateShortCut \"$DESKTOP\\${APP_NAME}.lnk\" \"$MainDir\\Albasi.exe\" \"\" \"$MainDir\\Albasi.exe\" 0 \tSectionEnd  \tSection \"Quick Launch\" \t\t;CreateDirectory \"$QUICKLAUNCH\\SPBB\" \t\tCreateShortCut \"$QUICKLAUNCH\\${APP_NAME}.lnk\" \"$MainDir\\Albasi.exe\" \"\" \"$MainDir\\Albasi.exe\" 0 \tSectionEnd SectionGroupEnd  Section \"-Registry Windows\" \t;informasi uninstall \tWriteRegStr HKLM \"Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\SPBB\" \"DisplayName\" \"${APP_NAME}\"     WriteRegStr HKLM \"Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\SPBB\" \"UninstallString\" '\"$MainDir\\uninstaller.exe\"' \tWriteRegStr HKLM \"Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\SPBB\" \"DisplayIcon\" '\"$MainDir\\uninstaller.exe\"'      WriteRegDWORD HKLM \"Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\SPBB\" \"NoModify\" 1     WriteRegDWORD HKLM \"Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\SPBB\" \"NoRepair\" 1      WriteUninstaller $MainDir\\uninstaller.exe SectionEnd  Section \"-File Konfigurasi Program\"     WriteINIStr $MainDir\\infoprogram.ini \"Sistem\" \"serverName\" \"127.0.0.1\"     WriteINIStr $MainDir\\infoprogram.ini \"Sistem\" \"dbName\" \"albasi\" SectionEnd  Section \"Uninstall\" \t;stop service MySQL \tDetailPrint \"Menghentikan Service MySQL ...\" \tExecWait '\"$SYSDIR\\net.exe\" stop \"MySQL\"'  \t;hapus service MySQL \tDetailPrint \"Sedang menghapus service MySQL ...\" \tExecWait '\"$MySQLDir\\bin\\mysqld.exe\" remove \"MySQL\"'  \t;driver MySQL Connector ODBC 5.1 \tDetailPrint \"Tunggu sedang menghapus driver MySQL Connector ODBC 5.1\" \tExecWait '\"$SYSDIR\\myodbc-installer.exe\" -d -r -n \"MySQL ODBC 5.1 Driver\"'  \t; Remove registry keys \tDeleteRegKey HKLM \"Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\SPBB\"  \t; Remove files and uninstaller \tDelete $MainDir\\*.* \tRMDir $MainDir  \t; Remove shortcuts \tDelete \"$SMPROGRAMS\\PT. ALBASI\\*.*\" \tRMDir \"$SMPROGRAMS\\PT. ALBASI\"  \tDelete \"$DESKTOP\\${APP_NAME}.lnk\" \tDelete \"$QUICKLAUNCH\\${APP_NAME}.lnk\" SectionEnd  ;fungsi untuk menampilkan gambar/banner pada saat instalasi ;untuk contoh disini posisi gambar di sebelah kiri Function BrandingImage \tSetOutPath \"$TEMP\"  \tSetFileAttributes SetupModern21.bmp temporary \tFile SetupModern21.bmp \tSetBrandingImage \"$TEMP\\SetupModern21.bmp\" /resizetofit FunctionEnd  ;fungsi untuk menampilkan gambar/banner pada saat uninstall Function un.BrandingImage \tSetBrandingImage \"$TEMP\\SetupModern21.bmp\" /resizetofit FunctionEnd  Di dalam skrip instalasi ada file exec.cmd, isinya adalah :   mysql -uroot -pmasterkey albasi &lt; albasi.sql  Isi file exec.cmd sebenarnya untuk proses undump dan ternyata Inno Setup dan NSIS gagal menjalankan perintah tersebut, padahal perintah-perintah yang lainnya sukses.   Contoh hasil instalasi :               Selamat mencoba :blush:  ","categories": ["NSIS","Tools Installer","MySql"],
        "tags": ["eclipse","instalasi","mysql","mysql odbc","notepad++","nsis","paket instalasi","plug-in NSIS","service mysql"],
        "url": "http://coding4ever.net/blog/2010/01/16/membuat-paket-instalasi-vb-mysql-dengan-nsis/",
        "teaser": null
      },{
        "title": "Menambahkan tombol baru di Title Bar",
        "excerpt":"Yaph sesuai judulnya kita akan menambahkan tombol baru di Title Bar, lihat gambar :      oke langsung saja tambahkan sebuah modul kemudian copy paste kode berikut :     Private Declare Function GetWindowRect Lib \"user32\" (ByVal hwnd As Long, lpRect As RECT) As Long Private Declare Function GetParent Lib \"user32\" (ByVal hwnd As Long) As Long Private Declare Function SetParent Lib \"user32\" (ByVal hWndChild As Long, ByVal hWndNewParent As Long) As Long Private Declare Function SetWindowPos Lib \"user32\" (ByVal hwnd As Long, ByVal hWndInsertAfter As Long, ByVal X As Long, ByVal Y As Long, ByVal cx As Long, ByVal cy As Long, ByVal wFlags As Long) As Long Private Declare Function SetWindowsHookEx Lib \"user32\" Alias \"SetWindowsHookExA\" (ByVal idHook As Long, ByVal lpfn As Long, ByVal hmod As Long, ByVal dwThreadId As Long) As Long Private Declare Function UnhookWindowsHookEx Lib \"user32\" (ByVal hHook As Long) As Long Private Declare Function CallNextHookEx Lib \"user32\" (ByVal hHook As Long, ByVal ncode As Long, ByVal wParam As Long, lParam As Any) As Long Private Declare Function CreateWindowEx Lib \"user32\" Alias \"CreateWindowExA\" (ByVal dwExStyle As Long, ByVal lpClassName As String, ByVal lpWindowName As String, ByVal dwStyle As Long, ByVal X As Long, ByVal Y As Long, ByVal nWidth As Long, ByVal nHeight As Long, ByVal hWndParent As Long, ByVal hMenu As Long, ByVal hInstance As Long, lpParam As Any) As Long  Private Declare Function ShowWindow Lib \"user32\" (ByVal hwnd As Long, ByVal nCmdShow As Long) As Long Private Declare Function DestroyWindow Lib \"user32\" (ByVal hwnd As Long) As Long Private Declare Function SendMessage Lib \"user32\" Alias \"SendMessageA\" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lParam As Any) As Long Private Declare Function GetVersionEx Lib \"kernel32.dll\" Alias \"GetVersionExA\" (lpVersionInformation As OSVERSIONINFO) As Long  Private Type OSVERSIONINFO     dwOSVersionInfoSize As Long     dwMajorVersion      As Long     dwMinorVersion      As Long     dwBuildNumber       As Long     dwPlatformId        As Long     szCSDVersion        As String * 128 End Type  Private Type RECT     Left                As Long     Top                 As Long     Right               As Long     Bottom              As Long End Type  Private Type CWPSTRUCT     lParam              As Long     wParam              As Long     Message             As Long     hwnd                As Long End Type  Private Const WM_MOVE                       As Long = &amp;H3 Private Const WM_SETCURSOR                  As Long = &amp;H20 Private Const WM_NCPAINT                    As Long = &amp;H85 Private Const WM_COMMAND                    As Long = &amp;H111 Private Const BM_SETSTATE                   As Long = &amp;HF3 Private Const SWP_FRAMECHANGED              As Long = &amp;H20 Private Const WS_CHILD                      As Long = &amp;H40000000 Private Const WS_VISIBLE                    As Long = &amp;H10000000 Private Const WS_EX_TOOLWINDOW              As Long = &amp;H80 Private Const VER_PLATFORM_WIN32_WINDOWS    As Long = 1 Private Const VER_PLATFORM_WIN32_NT         As Long = 2  Private MyForm                              As Form Private frm                                 As Form Private GiàIntercettato                     As Boolean Private sysVar00_lOSVersion                 As Long Private WHook                               As Long Private ButtonHwnd                          As Long Private lButtXPos                           As Long  Public Sub InitButton(frmObj As Form, Optional XPosition As Long = 75)     Dim os As OSVERSIONINFO     Dim retval As Long  ' return value      os.dwOSVersionInfoSize = Len(os)  ' set the size of the structure     retval = GetVersionEx(os)  ' read Windows's version information     sysVar00_lOSVersion = os.dwPlatformId     Set MyForm = frmObj     GiàIntercettato = False      Call UnHookButton      Set frm = frmObj     lButtXPos = XPosition      ButtonHwnd = CreateWindowEx(WS_EX_TOOLWINDOW, \"Button\", \"?\", WS_CHILD + WS_VISIBLE, 50, 50, 14, 14, frmObj.hwnd, 0, App.hInstance, 0)      WHook = SetWindowsHookEx(4, AddressOf HookProc, 0, App.ThreadID)      Call SetParent(ButtonHwnd, GetParent(frmObj.hwnd)) End Sub  Public Sub UnHookButton()     If lButtXPos &gt; 0 Then          lButtXPos = 0         Call UnhookWindowsHookEx(WHook)         Call DestroyWindow(ButtonHwnd)     End If End Sub  Private Function HookProc(ByVal ncode As Long, ByVal wParam As Long, Inf As CWPSTRUCT) As Long     Dim FormRect As RECT     Static LastParam As Long      If Inf.hwnd = GetParent(ButtonHwnd) And sysVar00_lOSVersion = VER_PLATFORM_WIN32_WINDOWS Then         If Inf.Message = WM_COMMAND Then             Select Case LastParam                  Case ButtonHwnd                     Call frm.btnNew_Click             End Select         ElseIf Inf.Message = WM_SETCURSOR Then             LastParam = Inf.wParam         End If      ElseIf Inf.hwnd = frm.hwnd Then         If Inf.Message = WM_NCPAINT Or Inf.Message = WM_MOVE Then              Call GetWindowRect(frm.hwnd, FormRect)              Call SetWindowPos(ButtonHwnd, 0, FormRect.Right - lButtXPos, FormRect.Top + 6, 17, 14, SWP_FRAMECHANGED)          End If      ElseIf Inf.hwnd = ButtonHwnd And sysVar00_lOSVersion = VER_PLATFORM_WIN32_NT Then         If Inf.Message = BM_SETSTATE And Inf.wParam = 0 Then             If GiàIntercettato = False Then                GiàIntercettato = True                Call MyForm.btnNew_Click              Else                GiàIntercettato = False             End If         End If     End If      HookProc = CallNextHookEx(WHook, ncode, wParam, Inf.lParam) End Function  contoh penggunaan di form :   Private Sub Form_Load()     Call InitButton(Me) End Sub  Private Sub Form_Unload(Cancel As Integer)     Call UnHookButton End Sub  Public Sub btnNew_Click()     'TODO : tampilkan pesan atau form disini End Sub  Selamat mencoba and happy coding !!! :blush:   referensi :      http://www.justvb.net/   http://www.Planet-Source-Code.com/vb/scripts/ShowCode.asp?txtCodeId=58651&amp;lngWId=1  ","categories": ["Visual Basic"],
        "tags": ["title bar","tombol di title bar"],
        "url": "http://coding4ever.net/blog/2010/01/17/menambahkan-tombol-baru-di-title-bar/",
        "teaser": null
      },{
        "title": "Objek TreeView sebagai alternatif membuat menu",
        "excerpt":"Pada postingan sebelumnya saya sudah membahas bagaimana membuat menu alternatif menggunakan komponen VBSmartMenu XP dan kali ini kita akan membahas bagaimana membuat menu menggunakan objek TreeView.   Objek TreeView digunakan untuk menampilkan data dalam bentuk Hirarki sehingga sangat cocok untuk menampilkan menu dalam jumlah banyak.     Pada pembahasan ini saya hanya membatasi untuk menampilkan menu 2 tingkat yaitu level 1 (menu induk) dan level 2 (menu anak), kedua menu tersebut akan disimpan didatabase Access dengan nama tabel MENU_INDUK dan MENU_ANAK.   Berikut adalah contoh rancangan tabelnya :            Untuk project VB sendiri kita akan tambahkan komponen (CTRL + T) Microsoft Windows Common Control 6.0 (SP6) kemudian tinggal drag komponen TreeView.      Oke jika semua data sudah siap tambahkan sebuah modul dan copy paste kode berikut :   Option Explicit  Public conn    As ADODB.Connection Public strSql  As String  Public Function KonekToServer() As Boolean     Dim strConn As String      On Error GoTo errHandle      strConn = \"Provider=Microsoft.Jet.OLEDB.4.0;Data Source= \" &amp; App.Path &amp; \"\\database.mdb\"      Set conn = New ADODB.Connection     conn.ConnectionString = strConn     conn.Open      KonekToServer = True      Exit Function  errHandle:     KonekToServer = False End Function  Public Function openRecordset(ByVal query As String) As ADODB.Recordset     Dim obj As ADODB.Recordset      Set obj = New ADODB.Recordset     obj.CursorLocation = adUseClient     obj.Open query, conn, adOpenForwardOnly, adLockReadOnly     Set openRecordset = obj End Function  Public Sub closeRecordset(ByVal vRs As ADODB.Recordset)     If Not (vRs Is Nothing) Then         If vRs.State = adStateOpen Then vRs.Close     End If      Set vRs = Nothing End Sub  Public Function getRecordCount(ByVal vRs As ADODB.Recordset) As Long     vRs.MoveLast     getRecordCount = vRs.RecordCount     vRs.MoveFirst End Function  Adapun contoh prosedur untuk menambahkan data ke TreeView adalah sebagai berikut :   Private Sub addMenu()     Dim rsMenuInduk As ADODB.Recordset     Dim rsMenuAnak  As ADODB.Recordset      Dim root        As Node     Dim i           As Long     Dim x           As Long     Dim rowCount(1) As Long      mnuTree.Nodes.Clear     With mnuTree.Nodes         'menampilkan menu induk         strSql = \"SELECT id, menu_name, menu_caption \" &amp; _                  \"FROM menu_induk \" &amp; _                  \"ORDER BY id\"         Set rsMenuInduk = openRecordset(strSql)         If Not rsMenuInduk.EOF Then             rowCount(0) = getRecordCount(rsMenuInduk)              For i = 1 To rowCount(0)                 Set root = .Add(, , rsMenuInduk(\"menu_name\").Value, rsMenuInduk(\"menu_caption\").Value)                 root.Bold = True                  'menampilkan menu anak                 strSql = \"SELECT menu_name, menu_caption \" &amp; _                          \"FROM menu_anak \" &amp; _                          \"WHERE menu_induk_id = \" &amp; rsMenuInduk(\"id\").Value &amp; \" \" &amp; _                          \"ORDER BY id\"                 Set rsMenuAnak = openRecordset(strSql)                 If Not rsMenuAnak.EOF Then                     rowCount(1) = getRecordCount(rsMenuAnak)                      For x = 1 To rowCount(1)                         .Add root, tvwChild, rsMenuAnak(\"menu_name\").Value, rsMenuAnak(\"menu_caption\").Value                          rsMenuAnak.MoveNext                     Next x                 End If                 Call closeRecordset(rsMenuAnak)                  rsMenuInduk.MoveNext             Next i         End If         Call closeRecordset(rsMenuInduk)     End With      For i = 1 To mnuTree.Nodes.Count         mnuTree.Nodes(i).Expanded = True     Next End Sub  Kemudian kita tinggal panggil di event Form_Load   Private Sub Form_Load()     Dim ret As Boolean      ret = KonekToServer      'inisialisasi treeview     With mnuTree         .Style = tvwTreelinesPlusMinusText         .LineStyle = tvwRootLines         .Indentation = 300.47     End With      Call addMenu End Sub  Kode untuk menghandle menu mana yang diklik :   Private Sub mnuTree_DblClick()     If mnuTree.Nodes(mnuTree.SelectedItem.Index).Children = 0 Then 'menu anak         Select Case mnuTree.SelectedItem.Key             Case \"mnuBarang\": 'TODO : tampilkan frmBarang disini             Case \"mnuCustomer\"             Case \"mnuSupplier\"             Case \"mnuPembelian\"             Case \"mnuReturPembelian\"             Case \"mnuPenjualan\"             Case \"mnuBiayaOperasional\"             Case \"mnuGajiKaryawan\"             Case \"mnuLapPembelian\"             Case \"mnuLapJthTempo\"             Case \"mnuLapPenjualan\"         End Select     End If End Sub  Contoh output program :      Source code lengkap bisa didownload disini.   Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["membuat menu","ms access","treeview"],
        "url": "http://coding4ever.net/blog/2010/01/18/objek-treeview-sebagai-alternatif-membuat-menu/",
        "teaser": null
      },{
        "title": "Custom MsgBox Function",
        "excerpt":"Fungsi MsgBox digunakan untuk menampilkan pesan/informasi kepada user dan fungsi MsgBox sendiri mempunyai beberapa style yang mana style ini berpengaruh terhadap pilihan tombol yang ditampilkan.   Kita ambil contoh beberapa style yang sering digunakan, lihat gambar :        Kemudian kita akan mencoba mengganti pesan YesNo -&gt; YaTidak dan OkCancel -&gt; OkBatal :      Penasaran dengan kodenya seperti apa, langsung saja tambahkan sebuah modul kemudian copy paste kode berikut :   Option Explicit  Public Const IDOK = 1 Public Const IDCANCEL = 2 Public Const IDYES = 6 Public Const IDNO = 7  Private Const IDPROMPT = &amp;HFFFF&amp;  Private Const WH_CBT = 5 Private Const GWL_HINSTANCE = (-6) Private Const HCBT_ACTIVATE = 5  Private Type MSGBOX_HOOK_PARAMS     hwndOwner   As Long     hHook       As Long End Type  Private MSGHOOK As MSGBOX_HOOK_PARAMS  Private Declare Function GetCurrentThreadId Lib \"kernel32\" () As Long Private Declare Function GetWindowLong Lib \"user32\" Alias \"GetWindowLongA\" (ByVal hwnd As Long, ByVal nIndex As Long) As Long Private Declare Function MessageBox Lib \"user32\" Alias \"MessageBoxA\" (ByVal hwnd As Long, ByVal lpText As String, ByVal lpCaption As String, ByVal wType As Long) As Long Private Declare Function SetDlgItemText Lib \"user32\" Alias \"SetDlgItemTextA\" (ByVal hDlg As Long, ByVal nIDDlgItem As Long, ByVal lpString As String) As Long Private Declare Function SetWindowsHookEx Lib \"user32\" Alias \"SetWindowsHookExA\" (ByVal idHook As Long, ByVal lpfn As Long, ByVal hmod As Long, ByVal dwThreadId As Long) As Long Private Declare Function SetWindowText Lib \"user32\" Alias \"SetWindowTextA\" (ByVal hwnd As Long, ByVal lpString As String) As Long Private Declare Function UnhookWindowsHookEx Lib \"user32\" (ByVal hHook As Long) As Long  Private Function MsgBoxHookProc(ByVal uMsg As Long, ByVal wParam As Long, ByVal lParam As Long) As Long     If uMsg = HCBT_ACTIVATE Then         SetWindowText wParam, \"Konfirmasi\"          SetDlgItemText wParam, IDYES, \"Ya\"         SetDlgItemText wParam, IDNO, \"Tidak\"          SetDlgItemText wParam, IDOK, \"Oke\"         SetDlgItemText wParam, IDCANCEL, \"Batal\"          SetDlgItemText wParam, IDPROMPT, \"Apakah Anda ingin keluar ?\"          UnhookWindowsHookEx MSGHOOK.hHook     End If      MsgBoxHookProc = False End Function  Public Function MessageBoxH(ByVal hwndThreadOwner As Long, ByVal hwndOwner As Long, ByVal button As VbMsgBoxStyle) As Long    Dim hInstance As Long    Dim hThreadId As Long     hInstance = GetWindowLong(hwndThreadOwner, GWL_HINSTANCE)    hThreadId = GetCurrentThreadId()     With MSGHOOK       .hwndOwner = hwndOwner       .hHook = SetWindowsHookEx(WH_CBT, AddressOf MsgBoxHookProc, hInstance, hThreadId)    End With     MessageBoxH = MessageBox(hwndOwner, Space$(40), Space$(40), vbQuestion + button) End Function  Untuk contoh penggunaan tambahkan objek CommandButton, kemudian ketik kode berikut :   Private Sub cmdDemoCustomeMsgBox_Click()     Select Case MessageBoxH(Me.hwnd, Me.hwnd, vbOKCancel)         Case IDYES: Debug.Print \"Anda mengklik tombol Ya\"         Case IDNO: Debug.Print \"Anda mengklik tombol Tidak\"         Case IDOK: Debug.Print \"Anda mengklik tombol Oke\"         Case IDCANCEL: Debug.Print \"Anda mengklik tombol Batal\"     End Select End Sub  Selamat mencoba :blush:   Referensi :      http://vbnet.mvps.org  ","categories": ["Visual Basic"],
        "tags": ["Custome MsgBox","Function","MessageBox","SetDlgItemText"],
        "url": "http://coding4ever.net/blog/2010/01/19/custom-msgbox-function/",
        "teaser": null
      },{
        "title": "Membuat menu samping dengan komponen vbAccelerator VB6 Explorer Bar",
        "excerpt":"Masih pembahasan tentang pembuatan menu alternatif selain menggunakan tool standar vb (menu editor), kali ini kita akan menggunakan komponen vbAccelerator VB6 Explorer Bar.   vbAccelerator VB6 Explorer Bar adalah salah satu komponen keren dan gratis yang tersedia di situs www.vbaccelerator.com.   Dan masih menggunakan resource yang sama dengan postingan saya sebelumnya, kita akan membuat menu dengan tampilan seperti berikut :        Untuk memudahkan kita memahami penggunaan komponen vbAccelerator Explorer Bar, minimal ada 2 istilah yang harus kita ketahui :      Bar Menu, gampangnya kita sebut saja menu induk   Item Menu tentu saja ini menu anaknya   Adapun contoh prosedur/fungsi untuk menambahkan Bar Menu dan Item Menu:   Private Function setBarMenu(ByVal explorerBar As Object, ByVal menuName As String, _                             ByVal menuCaption As String, ByVal iconIndex As Long) As Object      Dim cBar As Object      Set cBar = explorerBar.Bars.Add(, menuName, menuCaption)     cBar.IsSpecial = True     cBar.iconIndex = iconIndex     cBar.TitleForeColor = WARNA_BIRU_TUA     cBar.TitleForeColorOver = WARNA_BIRU_TUA     cBar.TitleBackColorLight = WARNA_BIRU     cBar.TitleBackColorDark = RGB(234, 241, 253)     cBar.BackColor = WARNA_ABU_ABU      Set setBarMenu = cBar End Function  Private Sub setItemMenu(ByVal cBar As Object, ByVal menuName As String, ByVal menuCaption As String, ByVal iconIndex As Long)     Dim cItem   As Object      Set cItem = cBar.Items.Add(, menuName, menuCaption)     With cItem         .iconIndex = iconIndex         .TextColor = WARNA_BIRU_TUA         .TextColorOver = WARNA_PUTIH     End With End Sub  Sebelum kita akan mengetikan kode lengkap untuk membuat menu dengan komponen vbAccelerator Explorer Bar, tambahkan terlebih dahulu komponen/referensi berikut ke dalam project Anda :      vbAccelerator Explorer Bar (Menu Project -&gt; Component)   vbAccelerator Image List (Menu Project -&gt; Component), komponen ini untuk menambahkan icon di menu bar/item   vbAccelerator VB6 Subclassing and Timer Assistant (Menu Project -&gt; References) pembahasan tentang komponen ini bisa di lihat di sini   kemudian drag komponen vbAccelerator Explorer Bar dan vbAccelerator Image List ke form      Contoh penggunaan prosedur/fungsi setBarMenu dan setItemMenu :   Private Sub addMenu(ByVal explorerBar As Object, ByVal barIcons As Object, ByVal itmIcons As Object)     Dim rsMenuInduk As ADODB.Recordset     Dim rsMenuAnak  As ADODB.Recordset     Dim cBar        As Object      Dim i           As Long     Dim x           As Long     Dim rowCount(1) As Long      With explorerBar         .UseExplorerStyle = False          .Redraw = False          .BackColorStart = WARNA_BIRU         .BackColorEnd = WARNA_BIRU          .ImageList = itmIcons.hIml         .BarTitleImageList = barIcons.hIml          'menampilkan menu induk         strSql = \"SELECT id, menu_name, menu_caption \" &amp; _                  \"FROM menu_induk \" &amp; _                  \"ORDER BY id\"         Set rsMenuInduk = openRecordset(strSql)         If Not rsMenuInduk.EOF Then             rowCount(0) = getRecordCount(rsMenuInduk)              For i = 1 To rowCount(0)                 Set cBar = setBarMenu(explorerBar, rsMenuInduk(\"menu_name\").Value, rsMenuInduk(\"menu_caption\").Value, 0)                  'menampilkan menu anak                 strSql = \"SELECT menu_name, menu_caption \" &amp; _                          \"FROM menu_anak \" &amp; _                          \"WHERE menu_induk_id = \" &amp; rsMenuInduk(\"id\").Value &amp; \" \" &amp; _                          \"ORDER BY id\"                 Set rsMenuAnak = openRecordset(strSql)                 If Not rsMenuAnak.EOF Then                     rowCount(1) = getRecordCount(rsMenuAnak)                      For x = 1 To rowCount(1)                         Call setItemMenu(cBar, rsMenuAnak(\"menu_name\").Value, rsMenuAnak(\"menu_caption\").Value, 0)                          rsMenuAnak.MoveNext                     Next x                 End If                 Call closeRecordset(rsMenuAnak)                  rsMenuInduk.MoveNext             Next i         End If         Call closeRecordset(rsMenuInduk)          Set cBar = setBarMenu(explorerBar, \"mnuKeluar\", \"Keluar\", 1)         Call setItemMenu(cBar, \"mnuKeluarDrProgram\", \"Keluar dari Program\", 0)          .Redraw = True     End With End Sub  Dan terakhir source code untuk menghandle menu yang di klik :   Private Sub vbalExplorerBarCtl1_ItemClick(itm As vbalExplorerBarLib6.cExplorerBarItem)     Select Case itm.Key         Case \"mnuBarang\": 'TODO : tampilkan frmBarang disini         Case \"mnuCustomer\"         Case \"mnuSupplier\"         Case \"mnuPembelian\"         Case \"mnuReturPembelian\"         Case \"mnuPenjualan\"         Case \"mnuBiayaOperasional\"         Case \"mnuGajiKaryawan\"         Case \"mnuLapPembelian\"         Case \"mnuLapJthTempo\"         Case \"mnuLapPenjualan\"     End Select End Sub  Contoh source code langkap bisa didownload disini.   Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["Bar Menu","Item Menu","menu","vbAccelerator Image List","vbAccelerator VB6 Explorer Bar","vbAccelerator VB6 Subclassing and Timer Assistant"],
        "url": "http://coding4ever.net/blog/2010/01/22/membuat-menu-samping-dengan-komponen-vbaccelerator-vb6-explorer-bar/",
        "teaser": null
      },{
        "title": "Belajar Winsock bagian 1 - Intro",
        "excerpt":"1. Sekilas tentang Winsock   Kita telah mengetahui bahwa komputer membutuhkan sistem operasi agar bisa bekerja. Sistem operasi itu sendiri adalah software. Untuk mengetik, cetak, gambar, semua tugas komputasi membutuhkan software, termasuk juga berkomunikasi dengan komputer lain.   Windows memiliki API (Application Programming Interface) untuk berkomunikasi melalui TCP/IP yang terkenal dengan nama Winsock API. Namun penggunaan API itu sendiri sudah cukup sulit. Microsoft mengerti kebutuhkan para programer dan membuat komponen ActiveX control yang bernama Winsock Control.     Fungsinya mempermudah kita sebagai programer untuk membuat software yang bisa berkomunikasi dengan komputer lain. Dengan Winsock control maka Anda tidak perlu mengetahui secara detail protokol TCP/IP maupun pemanggilan fungsi Winsock API untuk membuat sebuah aplikasi network. Yang perlu Anda lakukan hanyalah mengisi nilai properti, mengeksekusi metode, dan semuanya segera berjalan sesuai skenario (dengan catatan, semua seting network dalam kondisi baik).   2. Protokol-protokok Winsock   Komponen Winsock mempunyai 2 jenis protokol:      TCP - Transmission Control Protocol. Dengan TCP mengharuskan 2 atau lebih komputer yang terhubungan untuk mengirim/menerima data harus dalam kondisi terkoneksi. Jadi dengan menggunakan TCP sangat aman karena data akan selalu dicek sampai atau tidak.   UDP - User Datagram Protocol. Dengan UDP tidak mengharuskan adanya koneksi yang aktif, hanya saja tidak ada jaminan data yang dikirim sampai atau tidak.   Dalam artikel ini saya hanya akan membahas menggunakan protokol TCP   3. Contoh menggunakan Winsock   Winsock mempunyai 2 fungsi dasar, yang pertama mendengarkan fungsi yang masuk :   Private Sub Form_Load()     With Winsock1         'set lokal port, misal 21211         'jangan menggunakan port standar yang sudah digunakan         'ex : 3306 (MySQL), 3050 (Firebird) de el el         .LocalPort = 21211          'listen on this port         .Listen     End With End Sub  ketika ada koneksi masuk event Winsock_ConnectionRequest() akan dijalankan, contoh sederhana untuk menghandle event Winsock_ConnectionRequest() :   Private Sub Winsock1_ConnectionRequest(ByVal requestID As Long)     With Winsock1         'tutup terlebih dulu, karena jika sebelumnya masih ada koneksi         'akan menyebabkan error         .Close          'requestID mengandung informasi angka unik setiap koneksi yang masuk         .Accept requestID     End With End Sub  Nah sampai disini kita sudah mengetahui cara untuk menghandle koneksi yang masuk, untuk menghandle koneksi keluar ada 2 properties yang perlu kita ketahui yaitu RemoteHost (diisi dengan IP Address komputer target) dan RemotePort (diisi dengan port yang sama pada saat memanggil method .Listen).   Private Sub cmdTesKoneksi_Click()     With Winsock1         'ip komputer target         .RemoteHost = \"127.0.0.1\"          'harus sama dengan port pada saat pemanggilan method .Listen         .RemotePort = 21211          'start the connection         .Connect     End With End Sub  Selanjutnya permintaan koneksi sudah dilakukan kemudian bagaimana kita mengetahui koneksi tersebut sudah diterima/belum.  Ada 2 method yang bisa melakukan ini yaitu Winsock_Connect dan Winsock_Error,  dan dari nama methodnya saja saya rasa sudah menjelaskan maksud dan tujuan dari method tersebut.   Private Sub Winsock1_Connect()     MsgBox \"Connected\" End Sub  Private Sub Winsock1_Error(ByVal Number As Integer, Description As String, ByVal Scode As Long, ByVal Source As String, ByVal HelpFile As String, ByVal HelpContext As Long, CancelDisplay As Boolean)     MsgBox \"Error: \" &amp; Description End Sub  Pembahasan artikel pertama ini akan kita tutup dengan 2 sample program SEDERHANA untuk melakukan koneksi via Winsock. Persiapan yang perlu dilakukan :      Buat project baru   Tambahkan komponen (CTRL + T) Microsoft Winsock Control 6.0 kemudian drag ke form   Drag komponen CommandButton dan set properties Name = cmdTesKoneksi (khusus program klien)   Source code lengkap program pertama (server) :   Private Sub Form_Load()     With Winsock1         'set lokal port, misal 21211         'jangan menggunakan port standar yang sudah digunakan         'ex : 3306 (MySQL), 3050 (Firebird) de el el         .LocalPort = 21211          'listen on this port         .Listen     End With End Sub  Private Sub Winsock1_ConnectionRequest(ByVal requestID As Long)     With Winsock1         'tutup terlebih dulu, karena jika sebelumnya masih ada koneksi         'akan menyebabkan error         .Close          'requestID mengandung informasi angka unik setiap koneksi yang masuk         .Accept requestID     End With End Sub  Source code lengkap program kedua (klien) :   Private Sub cmdTesKoneksi_Click()     With Winsock1         If .State &lt;&gt; sckClosed Then .Close          'ip komputer target - server         .RemoteHost = \"127.0.0.1\"          'harus sama dengan port pada saat pemanggilan method .Listen program server         .RemotePort = 21211          'start the connection         .Connect     End With End Sub  Private Sub Winsock1_Connect()     MsgBox \"Connected\" End Sub  Private Sub Winsock1_Error(ByVal Number As Integer, Description As String, ByVal Scode As Long, ByVal Source As String, ByVal HelpFile As String, ByVal HelpContext As Long, CancelDisplay As Boolean)     MsgBox \"Error: \" &amp; Description End Sub  Jika sudah jalankan kedua program tersebut kemudian klik tombol cmdTesKoneksi, dan kita akan mendapatkan pesan “Connected” yang artinya kita sudah berhasil membuat aplikasi sederhana untuk melakukan koneksi menggunakan Winsock.   Artikel berikutnya insya Alloh dengan judul Belajar Winsock bagian 2 – Membuat aplikasi chat sederhana 1:1 segera menyusul.   Selamat mencoba :blush:   Referensi :      http://www.winsockvb.com sayangnya situs ini sekarang sudah offline   Tugas Akhir saya membuat billing warnet di bla bla  ","categories": ["Visual Basic","Winsock"],
        "tags": ["klien","Microsoft Winsock Control 6.0","Protocol","Protokol","RemoteHost","RemotePort","server","Winsock","Winsock API"],
        "url": "http://coding4ever.net/blog/2010/01/26/belajar-winsock-bagian-1-intro/",
        "teaser": null
      },{
        "title": "Belajar Winsock bagian 2 - Membuat aplikasi chat sederhana 1:1",
        "excerpt":"Setelah memahami properties-properties dasar yang harus disetting untuk membuat aplikasi sederhana menggunakan winsock, pada artikel ke 2 dari 5 seri belajar winsock ini kita akan membuat aplikasi chat sederhana dengan pola 1:1 atau dengan istilah lainnya single connection.   Membuat aplikasi chatting seperti MSN Messenger atau Yahoo Messenger sebenarnya mudah (tapi tidak termasuk saya ya :grin:) dan kita sudah mempelajari bagaimana membuat koneksi sederhana menggunakan winsock, selanjutnya kita tinggal mengirimkan data menggunakan method SendData dan menghandle data yang diterima melalui event Winsock_DataArrival.     Contoh penggunaan method SendData :   Private Sub cmdSend_Click()     With Winsock1         .SendData \"Belajar Winsock Bagian 2\"     End With     DoEvents End Sub  Pemanggilan fungsi DoEvents untuk memberikan jeda waktu untuk menyelesaikan pengiriman data.   Kode untuk menghandle data yang masuk juga sangat sederhana. Winsock menerima data dan menyimpannya di dalam buffer. Untuk memanggil data ini, kita tinggal memanggil method GetData dan ingat kita tidak bisa memanggil method ini setiap waktu karena setelah itu buffer otomatis dikosongkan. Jadi waktu yang tepat untuk memanggil method ini adalah pada saat event Winsock_DataArrival dijalankan.   Contoh penggunaan method GetData :   Private Sub Winsock1_DataArrival(ByVal bytesTotal As Long)     Dim strData As String      Call Winsock1.GetData(strData)     MsgBox strData End Sub  Oke, sampai disini kita sudah mengetahui dasar-dasar untuk membuat aplikasi chat sederhana dan untuk mendemokan ini kita akan membutuhkan 2 program kita sebut saja klien dan server. Adapun persiapan untuk aplikasi server/klien :      Objek Winsock   Label   2 TextBox   CommandButton   Source code lengkap aplikasi server :   Option Explicit  Private Sub cmdSend_Click()     Winsock1.SendData txtChat.Text     DoEvents      txtMain.Text = txtMain.Text &amp; vbCrLf &amp; txtChat.Text     txtChat.Text = \"\" End Sub  Private Sub Form_Load()     Winsock1.LocalPort = 11111     Winsock1.Listen End Sub  Private Sub Winsock1_ConnectionRequest(ByVal requestID As Long)     'reset the socket, and accept the new connection     Winsock1.Close     Winsock1.Accept requestID End Sub  Private Sub Winsock1_DataArrival(ByVal bytesTotal As Long)     Dim strData As String      'get the data and display it in the textbox     Winsock1.GetData strData     txtMain.Text = txtMain.Text &amp; vbCrLf &amp; strData     txtMain.SelStart = Len(txtMain.Text) End Sub  Aplikasi server tinggal duduk maniz :grin: dan menunggu koneksi yang masuk.   Source code lengkap aplikasi klien :   Option Explicit  Private Sub Form_Load()     'set up the Winsock1 to connect to the local computer     Winsock1.RemoteHost = \"127.0.0.1\"     Winsock1.RemotePort = 11111     Winsock1.Connect End Sub  Private Sub cmdSend_Click()     'send the data thats in the text box and     'clear it to prepare for the next chat message     Winsock1.SendData txtChat.Text     DoEvents      txtMain.Text = txtMain.Text &amp; vbCrLf &amp; txtChat.Text     txtChat.Text = \"\" End Sub  Private Sub Winsock1_Connect()     'we are connected!     MsgBox \"Connected\" End Sub  Private Sub Winsock1_DataArrival(ByVal bytesTotal As Long)     Dim strData As String      ' get the data from the socket     Winsock1.GetData strData     ' display it in the textbox     txtMain.Text = txtMain.Text &amp; vbCrLf &amp; strData     ' scroll the box down     txtMain.SelStart = Len(txtMain.Text) End Sub  Private Sub Winsock1_Error(ByVal Number As Integer, Description As String, ByVal Scode As Long, ByVal Source As String, ByVal HelpFile As String, ByVal HelpContext As Long, CancelDisplay As Boolean)     ' an error has occured somewhere, so let the user know     MsgBox \"Error: \" &amp; Description     ' close the socket, ready to go again     Winsock1.Close End Sub  Sample program bisa didownload disini dan artikel berikutnya insya Alloh dengan judul Belajar Winsock bagian 3 – Multiple Connection segera menyusul.   Selamat mencoba :blush:  ","categories": ["Visual Basic","Winsock"],
        "tags": ["aplikasi chat","DataArrival","GetData","SendData","Winsock"],
        "url": "http://coding4ever.net/blog/2010/01/28/belajar-winsock-bagian-2-membuat-aplikasi-chat-sederhana-11/",
        "teaser": null
      },{
        "title": "Belajar Winsock bagian 3 – Multiple Connection",
        "excerpt":"Di postingan saya sebelumnya kita sudah mengetahui bagai mana cara membuat aplikasi chat sederhana yang hanya melibatkan saya dan Anda :grin:, dan bagai mana jika ada teman saya yang lain ikut nimbrung ?   Jelas ini tidak bisa karena 1 winsock hanya bisa menangani 1 port, trus bagaimana jika kita ingin teman kita yang lain bisa konek di port yang sama dan hanya menggunakan 1 winsock? Jawabannya sederhana objek winsocknya kita jadikan array.     Oke, masukkan objek winsock ke form kemudian untuk menjadikannya sebagai objek array kita cukup mengset properties Index=0, jadi winsock dengan index 0 bertugas untuk mengecek permintaan koneksi masuk dan mengalokasikannya kepada yang berhak :) dan tentu saja untuk melakukan hal ini harus dalam mode mendengarkan/Listen   Private Sub Form_Load()     With Winsock1(0)         .Close         .LocalPort = 11111 'nilai port ini bisa diganti         .Listen     End With End Sub  Ketika ada permintaan koneksi di port 11111, kita harus menambahkan objek winsock baru untuk menerima permintaan koneksi tersebut dan karena objek winsock yang baru tidak kita set properties LocalPortnya otomatis windows yang akan memberikan nilai Port secara acak.   Private Sub Winsock1_ConnectionRequest(Index As Integer, ByVal requestID As Long)     'we should only be getting connection requests from     'Index 0 because thats the only one that is listening      'load a new winsock     Load Winsock1(Winsock1.UBound + 1)      'accept the incoming connection on our new control     Winsock1(Winsock1.UBound).Accept requestID End Sub  Fungsi UBound digunakan untuk mendapatkan nilai index terakhir dari objek array, jadi untuk mengetahui berapa jumlah objek arraynya kita cukup memanggil fungsi UBound + 1.   Solusi menggunakan winsock array diatas masih mempunyai sedikit masalah, misalkan kita sudah mempunyai 5 koneksi di port 11111 ini artinya kita sudah mempunyai 6 objek winsock yang aktif, index 0 dalam mode mendengarkan/Listen, dan 1 sampai 5 konek ke klien.   Apa yang terjadi jika 3 klien tidak terkoneksi lagi? Sebenarnya sih enggak terlalu bermasalah, masalahnya adalah jika ada klien lain yang konek ke server otomatis objek winsock baru ditambahkan lagi untuk menerima koneksi yang baru, padahal ada 3 objek winsock yang sedang nganggur/idle.   Bayangkan jika kita diminta untuk membuat aplikasi billing warnet dengan 100 klien, ada 50 klien yang sudah disconnect kemudian ada 50 klien lagi yang baru konek. Ini artinya kita mempunyai 50 objek winsock nganggur/idle yang jelas-jelas merupakan pemborosan memory dan bagai mana jika hal tersebut terulang lagi, lagi dan lagi.   Bagaimana solusinya? Yaph sebenarnya ini juga gampang, jadi jika ada permintaan koneksi dari klien kita cek dulu ada nggak objek winsock yang idle, kalo ada arahkan agar winsock yang idle tadi untuk menerima koneksi tersebut, jika tidak ada baru kita tambahkan objek winsock yang baru untuk menerima koneksi tersebut sehingga kode sebelumnya harus kita revisi menjadi :   Private Sub Winsock1_ConnectionRequest(Index As Integer, ByVal requestID As Long)     Dim i          As Long     Dim j          As Long      On Error GoTo errHandle      If Index = 0 Then 'ingat yang bertugas untuk mengecek permintaan koneksi adalah objek winsock dengan index = 0         'ini bagian yang bertugas untuk mengecek winsock yang idle         For i = 1 To Winsock1.UBound             If Winsock1(i).State = sckClosed Or Winsock1(i).State = sckClosing Then                 j = i   'var j menampung index winsock yang idle                 Exit For             End If         Next i          'jika j = 0 berarti semua winsock kepakai, otomatis kita harus menambahkan winsock yang baru         If j = 0 Then             Call Load(Winsock1(Winsock1.UBound + 1))             j = Winsock1.UBound         End If          'terima koneksi yang baru         With Winsock1(j)             Call .Close             Call .Accept(requestID)         End With      End If      Exit Sub  errHandle:     Call Winsock1(0).Close End Sub  Yaph cukup itu saja, contoh programnya bisa didownload disini.   Artikel berikutnya insya Alloh dengan judul Belajar Winsock bagian 4 – Membuat jaringan VPN sendiri.   Di artikel tersebut saya sudah tidak membahas penggunaan winsock lagi tetapi artikel tersebut dibutuhkan agar saya bisa menulis artikel terakhir dari 5 seri belajar Winsock ini yang berjudul Belajar Winsock bagian akhir – Contoh kasus mengakses data stok barang dari luar.   Dan tentunya ini bukan via web (kalo yang ini sudah enggak perlu dibahas lagi) tetapi tetap dengan mengembangkan contoh-contoh program winsock sebelumnya, dan sebagai uji coba untuk komputer server toko yang akan diakses menggunakan speedy sedangkan saya menggunakan starone dan mudah-mudahan saja uji coba ini berhasil :blush:.   Selamat mencoba :blush:  ","categories": ["Visual Basic","Winsock"],
        "tags": ["Belajar Winsock","fungsi UBound","Multiple Connection","VPN","Winsock"],
        "url": "http://coding4ever.net/blog/2010/01/30/belajar-winsock-bagian-3-e2-80-93-multiple-connection/",
        "teaser": null
      },{
        "title": "Belajar Winsock bagian 4 – Membuat jaringan VPN sendiri",
        "excerpt":"Pada artikel kali ini kita stop dulu untuk mengetikan baris-baris kode yang indah itu :grin: dan kita akan mencoba untuk membuat jaringan VPN sendiri yang tentunya dengan investasi yang murah meriah :grin: dan nyaris dengan biaya 0 rupiah. G percaya ? Oke kita ikuti saja pembahasan berikut.   Misalkan kita punya klien sebutnya saja namanya mas Paijo yang sudah menggunakan program retail kita selama beberapa tahun. Mas Paijo ini sering berbelanja untuk keperluan tokonya ke luar kota dan masalah yang dihadapinya adalah kesulitan untuk mengecek jumlah stok barang di toko (selama ini untuk menanyakan jumlah stok masih telp2xan :grin:), dan baru-baru ini mas Paijo menghubungi kita untuk minta dibuatkan program kecil yang hanya sekedar untuk mengecek stok barang.     Hasil akhir pembicaraan disepakati perangkat jaringan yang akan digunakan adalah sebagai berikut :      Komputer server untuk akses internetnya cukup menggunakan speedy dan hanya mendapatkan ip private.   Laptop mas Paijo rencananya menggunakan modem CDMA (bisa starone atau lainnya) kita anggap saja menggunakan starone.   Beberapa solusi yang bisa kita tawarkan adalah sebagai berikut :      Menggunakan program remote seperti Teamviewer atau CrossLoop. Loh kok enggak pake program remote seperti Radmin, Net Support Manager, atau RealVNC ? Ya jelas enggak bisa, karena komputer servernya hanya mendapatkan ip private kecuali kalo kita mau direportkan dengan menyeting portforwardingnya.   Membuat program sendiri dengan menggunakan komponen Winsock, nah kalo ini cocox karena memang itu intinya dibuat artikel ke 4 ini :grin:   Oke sampai disini kita sudah menentukan pilihan tetapi masalah baru muncul jangankan untuk mengakses data di komputer toko mau ngePING aja selalu Request timed out.   Tapi jangan kuatir setiap masalah selalu ada penyelesaiannya dan penyelesaian yang paling sederhana untuk kasus kita kali ini adalah membuat jaringan VPN sendiri dengan bantuan LogMeIn Hamachi.   Berikut adalah langkah-langkah mulai dari pendaftaran, konfigurasi dan tentu saja sampai ngPINGnya berhasil :grin:           Mendaftar dulu disini                          Setelah proses mendaftar selesai kita lanjutkan dengan membuat jaringan                                               Langkah berikutnya adalah mendownload LogMeIn Hamachi Installer                            Sambil menungu proses download selesai kita bisa logout dulu dari situs LogMeIn Hamachi.            Setelah download selesai copykan file installer tadi ke laptop mas Paijo dan lakukan instalasi, setelah itu jalankan program LogMeIn Hamachi                   Selanjutkan kita akan mengganti informasi nama komputer dengan cara klik menu System -&gt; Preferences …                          Bergabung dengan Jaringan Tokonya Mas Paijo dengan mengklik menu Network -&gt; Join an existing network … atau cukup dengan mengklik tombol Join an existing network …              Setelah itu kita diminta untuk memasukkan Network ID dan Password              jika berhasil akan kita dapatkan tampilan lebih kurang seperti berikut :                   Ulangi langkah 4 sampai 6 di komputer server            Setelah instalasi + konfigurasi di komputer server selesai, coba kita cek masing-masing program LogMeIn Hamachi maka kita akan mendapatkan tampilan seperti berikut :                   Biar semakin manteb kita login ulang kesini dan jika kita mendapatkan tampilannya seperti berikut berarti langkah-langkah sebelumnya sudah 100% berhasil :)              dan otomatis kita juga bisa langsung menggunakan program-program remote seperti Radmin, Net Support Manager, atau RealVNC karena kita sudah mendapatkan IP Publik sendiri            Terakhir kita akan mencoba ngePING komputer server              Jika hasil ping masih Request timed out coba nonaktifkan windows firewall di komputer server kemudian coba di ping lagi.   Oke sampai disini kita sudah berhasil membuat jaringan VPN sendiri dan memudahkan saya untuk menulis artikel terakhir yang insya Alloh dengan judul Belajar Winsock bagian akhir – Contoh kasus mengakses data stok barang dari luar.   Selamat mencoba :blush:  ","categories": ["Jaringan","Winsock"],
        "tags": ["crossloop","jaringan vpn","Net Support Manager","program remote","Radmin","RealVNC","stok barang","teamviewer","Winsock"],
        "url": "http://coding4ever.net/blog/2010/02/02/belajar-winsock-bagian-4-e2-80-93-membuat-jaringan-vpn-sendiri/",
        "teaser": null
      },{
        "title": "Belajar Winsock bagian akhir – Contoh kasus mengakses data stok barang dari luar",
        "excerpt":"Akhirnya rilis juga artikel terakhir dari 5 seri belajar winsock ini, sebelum kita melanjutkan pembahasan ada baiknya kita melakukan sedikit review :      Dasar-dasar penggunaan winsock sudah kita pelajari   Ini terbukti dengan suksesnya kita membuat aplikasi chat sederhana   Di tambah lagi ada teman kita yang mau nebeng sehingga terciptanya aplikasi chat multiple connection   Jalan tol antara laptop mas Paijo dan komputer server tokonya juga udah selesai dibangun dengan anggaran 0 Rp :grin:     Berarti sekarang waktu yang tepat untuk mencoba ketangguhan mas Win (maksudnya Winsock :grin:) kalo lari jarak dekat (jaringan LAN) masih bisa diandalkan, bagai mana dengan lari jarak jauh (via internet) apakah juga masih bisa diandalkan ?   Objek-objek yang akan dijadikan korban untuk uji coba kali ini :      Database barang dengan format ms access   Aplikasi server   Aplikasi klien   Data yang dikirim dari server dibatasi maksimal 1024 karakter dalam sekali kirim, otomatis jika data &gt; 1024 akan dipecah menjadi beberapa paket, berikut cuplikan kodenya (server) :   Option Explicit  Private Const LOCAL_PORT As Long = 1007  Private Const REC_SPR As String * 1 = \"|\" 'separator baris Private Const FLD_SPR As String * 1 = \"#\" 'separator kolom Private Const MAX_LIMIT As Long = 1024 '1x kirim dibatasi 1 kb, kalo untuk jaringan lokal masih bisa set 4096  Private Function pembulatanKeAtas(ByVal X As Double, Optional ByVal Factor As Double = 1) As Double     Dim temp As Double      temp = Int(X * Factor)     pembulatanKeAtas = (temp + IIf(X = temp, 0, 1)) / Factor End Function  Private Function getDataBarang(ByVal param As String) As String()     Dim rs          As ADODB.Recordset      Dim div         As Long     Dim lengthData  As Long     Dim n           As Long     Dim i           As Long      Dim tmp         As String     Dim arrTmp()    As String      strSql = \"SELECT UCASE(nama), harga, stok FROM barang \" &amp; param &amp; \"\"     Set rs = openRecordset(strSql)     If Not rs.EOF Then         For i = 1 To getRecordCount(rs)             tmp = tmp &amp; rs(0).Value &amp; FLD_SPR &amp; rs(1).Value &amp; FLD_SPR &amp; rs(2).Value &amp; REC_SPR              rs.MoveNext         Next i         If Len(tmp) &gt; 0 Then tmp = Left(tmp, Len(tmp) - 1)          'karakter ~ sebagai penanda awal dan akhir data         'untuk memudahkan pengecekan di klien bahwa data yg diterima sudah lengkap/belum         'ex : ~DATA BARANG + SEPARATOR KOLOM DAN BARIS~          'contoh format data disini ada 2 :         '1. jika data &lt;= 1024 karakter : ~~DATA BARANG + SEPARATOR KOLOM DAN BARIS         '2. jika data &gt; 1024 karakter  : ~DATA BARANG + SEPARATOR KOLOM DAN BARIS~          If Len(tmp) &gt; 0 Then tmp = \"~\" &amp; Left(tmp, Len(tmp) - 1) &amp; \"~\"         If Not Len(tmp) &gt; MAX_LIMIT Then             tmp = Left(tmp, Len(tmp) - 1)             tmp = \"~\" &amp; tmp         End If          lengthData = Len(tmp)         If lengthData &gt; 0 Then             If lengthData &gt; MAX_LIMIT Then 'data &gt; 1024 karakter                 'data dibuat menjadi beberapa package                 'ex : jika jumlah karakter 2345                 '     package 1 -&gt; 1024                 '     package 2 -&gt; 1024                 '     package 3 -&gt; 297                 '     berarti data yg dikirim ke klien sebanyak 3 x                  div = pembulatanKeAtas(lengthData / MAX_LIMIT)                 ReDim arrTmp(div)                  n = 1                 For i = 1 To div                     arrTmp(i - 1) = Mid(tmp, n, MAX_LIMIT)                     n = n + MAX_LIMIT                 Next i              Else                 ReDim arrTmp(0)                 arrTmp(0) = tmp             End If          Else             ReDim arrTmp(0)             arrTmp(0) = tmp         End If      Else         ReDim arrTmp(0)         arrTmp(0) = \"EOF\" 'data barang tidak ditemukan     End If     Call closeRecordset(rs)      getDataBarang = arrTmp End Function  pengiriman data ke klien akan dihandle oleh event DataArrival :   Private Sub Socket_DataArrival(Index As Integer, ByVal bytesTotal As Long)     Dim i           As Long     Dim strData     As String     Dim ret         As Boolean      Dim arrTmp()    As String      'On Error GoTo errHandle      ' Grab the data from the specified Winsock object, and pass it to the parent.     Call Socket(Index).GetData(strData)     DoEvents      arrTmp = getDataBarang(strData)     For i = LBound(arrTmp) To UBound(arrTmp)         If Len(arrTmp(i)) &gt; 0 Then ret = send(Index, arrTmp(i))     Next i      Exit Sub errHandle:    Call Socket(Index).Close End Sub  sedangkan untuk aplikasi klien bagian yg bertugas menerima data masih di event yang sama yaitu DataArrival :   Private Sub Socket_DataArrival(ByVal bytesTotal As Long)     Dim dataMasuk   As String      'On Error Resume Next      Socket.GetData dataMasuk      If Left(dataMasuk, 2) = \"~~\" Then 'package data &lt;= 1024         Call execOutput(dataMasuk)      ElseIf dataMasuk = \"EOF\" Then 'data tidak ditemukan         Call execOutput(dataMasuk)      Else         'package data &gt; 1024         'berikut kode untuk penggabungan package data         tmp = tmp &amp; dataMasuk         If InStr(1, dataMasuk, \"~\") &gt; 0 Then packageHdr = packageHdr &amp; \"~\"          If Len(packageHdr) = 2 Then Call execOutput(tmp) 'penggabungan package data selesai     End If End Sub  dan ini prosedure yang bertanggung jawab untuk memparsing data dan menampilkan ke ListView :   Private Sub execOutput(ByVal data As String)     Dim rec()   As String     Dim fld()   As String      Dim x       As Long     Dim noUrut  As Long      On Error GoTo errHandle      Screen.MousePointer = vbHourglass     DoEvents      If Left(data, 2) = \"~~\" Then 'complete         data = Replace(data, \"~~\", \"\")      ElseIf data = \"EOF\" Then         'do nothing      Else         data = Left(data, Len(data) - 1) 'remove ~ left         data = Right(data, Len(data) - 1) 'remove ~ right     End If      lsvBarang.ListItems.Clear      If data = \"EOF\" Then         Screen.MousePointer = vbDefault         MsgBox \"Data barang dengan keyword '\" &amp; txtNamaBarang.Text &amp; \"' tidak ditemukan\", vbInformation, \"Informasi\"      Else         'contoh data :         '~~SUSU KEDELAI ABC 200M#1000#24|SUSU KEDELAI MELILEA 500#1000#0|KOPI SUSU KPL API 3P#1000#0|SUSU KEDELAI ABC 200#1000#2         '| -&gt; pemisah baris         '# -&gt; pemisah kolom          rec = Split(data, REC_SPR)          With lsvBarang             noUrut = 1             For x = LBound(rec) To UBound(rec)                 fld = Split(rec(x), FLD_SPR)                  .ListItems.Add , , noUrut                 .ListItems(noUrut).SubItems(1) = fld(0) 'nama barang                 .ListItems(noUrut).SubItems(2) = FormatNumber(fld(1), 0) 'harga                 .ListItems(noUrut).SubItems(3) = fld(2) 'stok                  noUrut = noUrut + 1             Next x         End With     End If      Screen.MousePointer = vbDefault      Exit Sub errHandle:     Screen.MousePointer = vbDefault End Sub  dan ini hasilnya      mas Paijo mengetikan keyword mie kemudian mengirimkannya ke server dan akan diproses dengan hasil rincian sbb :      Jumlah record yang ditemukan sebanyak 181 record   Jumlah karakter nama barang + harga + stok + seperator = 5084 karakter dan dikirim menjadi beberapa paket   Hasil akhir klien juga menampilkan sebanyak 181 record, yang berarti bahwa uji coba kita berhasil :grin:   Dan yang terpenting dari pembahasan ini, sample programnya bisa didownload disini :)   Selamat mencoba :blush:  ","categories": ["Visual Basic","Winsock"],
        "tags": ["jaringan lan","ListView","Multiple Connection","stok barang","via internet","Winsock"],
        "url": "http://coding4ever.net/blog/2010/02/04/belajar-winsock-bagian-akhir-e2-80-93-contoh-kasus-mengakses-data-stok-barang-dari-luar/",
        "teaser": null
      },{
        "title": "Membuat aktivasi dongle bagian 1 - Simple think",
        "excerpt":"Apa yang ada dipikiran Anda ketika diminta untuk membuat aktivasi menggunakan dongle ? Wahhh susah, wahhh dongle alat apaan tuh, wahhh perlu pesan khusus ke pabrik G, wahhhh harus riset lagi nih, dan wahhhh2x lainnya.   Tapi sebenarnya kalo kita cermati lagi aktivasi dengan dongle lebih sederhana bila dibandingkan dengan aktivasi klasik seperti memasukkan serial number, yaaa minimal menghemat 1 form :grin: dan selain itu kelihatan juga lebih wahhhh :sunglasses:.     Alat yang digunakan pun enggak perlu yang canggih2x cukup dengan flash disk yang paling murah yang bisa kita dapatkan.   Pada artikel bagian 1 ini kita akan membuat tool sederhana untuk menandai flash disk yang akan dijadikan dongle dan bagaimana memvalidasi flash disk donglenya valid/tidak.   Dan tool ini juga bisa digunakan untuk menandai beberapa flash disk sekaligus, berikut adalah proses sederhana yang dilakukan oleh tool ini.      Menampilkan drive (khusus flash disk) dan mengambil serial numbernya   Membuat file donglekey yang disimpan di flash disk dan isinya adalah serial number dari flash disk itu sendiri yang sudah dienkripsi, misal dengan enkripsi MD5. File donglekey inilah yang kita butuhkan untuk melakukan validasi flash disk dongle.   Menyembunyikan file donglekey menggunakan perintah attrib +s +h   Contoh source code :   Private Declare Function GetLogicalDrives Lib \"kernel32\" () As Long Private Declare Function GetVolumeInformation Lib \"kernel32\" Alias \"GetVolumeInformationA\" (ByVal lpRootPathName As String, ByVal lpVolumeNameBuffer As String, ByVal nVolumeNameSize As Long, lpVolumeSerialNumber As Long, lpMaximumComponentLength As Long, lpFileSystemFlags As Long, ByVal lpFileSystemNameBuffer As String, ByVal nFileSystemNameSize As Long) As Long Private Declare Function GetDriveType Lib \"kernel32\" Alias \"GetDriveTypeA\" (ByVal nDrive As String) As Long  Private Declare Function OpenProcess Lib \"kernel32\" (ByVal dwDesiredAccess As Long, ByVal bInheritHandle As Long, ByVal dwProcessId As Long) As Long Private Declare Function WaitForSingleObject Lib \"kernel32\" (ByVal hHandle As Long, ByVal dwMilliseconds As Long) As Long Private Declare Function CloseHandle Lib \"kernel32\" (ByVal hObject As Long) As Long  Private Const SYNCHRONIZE       As Long = &amp;H100000 Private Const INFINITE          As Long = &amp;HFFFF  Private Const SECURITY_CODE     As String = \"-eB03DVVsA5RFyvKh\" 'ini bisa diganti  Private Sub writeDongleFile(ByVal fileName As String, ByVal key As String)     Dim fso As Scripting.FileSystemObject     Dim ts  As Scripting.TextStream      Set fso = New Scripting.FileSystemObject     Set ts = fso.OpenTextFile(fileName, ForWriting, True)     ts.Write key &amp; vbCrLf     ts.Close     Set ts = Nothing     Set fso = Nothing End Sub  Private Function fileExists(ByVal namaFile As String) As Boolean     Dim fso As Scripting.FileSystemObject      On Error GoTo errHandle      If Not (Len(namaFile) &gt; 0) Then fileExists = False: Exit Function      Set fso = New Scripting.FileSystemObject     fileExists = fso.fileExists(namaFile)     Set fso = Nothing      Exit Function errHandle:     fileExists = False End Function  Private Function generateKeyByMD5(ByVal serialNumber As String) As String     Dim objMD5  As clsMD5      Set objMD5 = New clsMD5     generateKeyByMD5 = objMD5.CalculateMD5(serialNumber)     Set objMD5 = Nothing End Function  Private Sub loadDrive(ByVal lst As ListBox)     Dim lDs             As Long     Dim cnt             As Long     Dim serial          As Long      Dim strLabel        As String     Dim fSName          As String     Dim formatHex       As String     Dim driveName       As String     Dim serialNumber    As String     Dim generateKey     As String     Dim dongleFile      As String     Dim cmd             As String      Dim shellX          As Long     Dim lPid            As Long     Dim lHnd            As Long     Dim lRet            As Long      'get the available drives     lDs = GetLogicalDrives     lst.Clear      For cnt = 0 To 25         If (lDs And 2 ^ cnt) &lt;&gt; 0 Then             driveName = Chr$(65 + cnt) &amp; \":\\\"              'Drive Type :             '***************             '2 = Removable/flash disk             '3 = Drive Fixed             '4 = Remote             '5 = Cd-Rom             '6 = Ram disk              If GetDriveType(driveName) = 2 Then 'hanya flash disk yang kita proses                 dongleFile = driveName &amp; \"donglekey\"                  If fileExists(dongleFile) Then 'sudah ada file dongle                     'tampilkan file donglekey sebelumnya                     'kalo tidak akan terjadi error waktu menjalankan perintah kill                     cmd = \"attrib -s -h \" &amp; dongleFile                      shellX = Shell(cmd, vbHide)                     lPid = shellX                     If lPid &lt;&gt; 0 Then                         lHnd = OpenProcess(SYNCHRONIZE, 0, lPid)                         If lHnd &lt;&gt; 0 Then                             lRet = WaitForSingleObject(lHnd, INFINITE)                             CloseHandle (lHnd)                         End If                     End If                      'hapus file dongle sebelumnya                     'kalo tidak akan terjadi error waktu menulis ulang file dongle                     'kenapa error,karena file dongle disembunyikan dg attribut +s -&gt; dianggap file system                     Kill dongleFile                 End If                  strLabel = String$(255, Chr$(0))                 GetVolumeInformation driveName, strLabel, 255, serial, 0, 0, fSName, 255                 strLabel = Left$(strLabel, InStr(1, strLabel, Chr$(0)) - 1)                  GetVolumeInformation driveName, vbNullString, 255, serial, 0, 0, vbNullString, 255                  formatHex = Format(Hex(serial), \"00000000\")                 serialNumber = Left(formatHex, 4) &amp; \"-\" &amp; Right(formatHex, 4) 'serial number - plain text                 generateKey = generateKeyByMD5(serialNumber &amp; SECURITY_CODE) 'serial number + security code yang sudah dienkripsi                  Call writeDongleFile(dongleFile, generateKey) 'tulis file dongle ke flash disk                 DoEvents                 Call Shell(\"attrib +s +h \" &amp; dongleFile) 'sembunyikan file dongle                  lst.AddItem strLabel &amp; \"(\" &amp; Chr$(65 + cnt) &amp; \":\" &amp; \") -&gt; Serial Number : \" &amp; serialNumber &amp; \" -&gt; Generate Key : \" &amp; generateKey             End If         End If     Next cnt     If Not (lst.ListCount &gt; 0) Then lst.AddItem \"&gt;&gt; Belom ada flash disk yang di coloxin &lt;&lt;\" End Sub  Private Sub cmdCreateDongleKey_Click()     Call loadDrive(lstDrive) End Sub  Contoh sederhana tool dongle      Dan berikut adalah contoh kode untuk memvalidasi flash disk dongle :   Private Function dongleKeyFile(ByVal fileName As String) As String     Dim fso As Scripting.FileSystemObject     Dim ts  As Scripting.TextStream     Dim tmp As String      On Error GoTo errHandle      If fileExists(fileName) Then         Set fso = New Scripting.FileSystemObject         Set ts = fso.OpenTextFile(fileName, ForReading, False)         Do While Not ts.AtEndOfStream             tmp = ts.ReadLine             If Len(tmp) &gt; 0 Then Exit Do         Loop         ts.Close         Set ts = Nothing         Set fso = Nothing     End If      dongleKeyFile = tmp      Exit Function errHandle:     dongleKeyFile = \"\" End Function  Private Function isValidDongle() As Boolean     Dim lDs             As Long     Dim cnt             As Long     Dim serial          As Long      Dim strLabel        As String     Dim fSName          As String     Dim formatHex       As String     Dim driveName       As String     Dim serialNumber    As String     Dim generateKey     As String     Dim dongleFile      As String      lDs = GetLogicalDrives      For cnt = 0 To 25         If (lDs And 2 ^ cnt) &lt;&gt; 0 Then             driveName = Chr$(65 + cnt) &amp; \":\\\"              If GetDriveType(driveName) = 2 Then 'hanya flash disk yang kita proses                 dongleFile = driveName &amp; \"donglekey\"                  strLabel = String$(255, Chr$(0))                 GetVolumeInformation driveName, strLabel, 255, serial, 0, 0, fSName, 255                 strLabel = Left$(strLabel, InStr(1, strLabel, Chr$(0)) - 1)                  GetVolumeInformation driveName, vbNullString, 255, serial, 0, 0, vbNullString, 255                  formatHex = Format(Hex(serial), \"00000000\")                 serialNumber = Left(formatHex, 4) &amp; \"-\" &amp; Right(formatHex, 4) 'serial number - plain text                  'serial number + security code yang sudah dienkripsi                 'security code -&gt; harus sama dg yang di tool dongle                 generateKey = generateKeyByMD5(serialNumber &amp; SECURITY_CODE)                  If generateKey = dongleKeyFile(dongleFile) Then                     isValidDongle = True: Exit For                 End If             End If         End If     Next cnt End Function  Public Sub Main()     If isValidDongle Then         'TODO : tampilkan Form Utama disini     Else         MsgBox \"Donglenya enggak valid atau belum dipasang.\", vbExclamation, \"Peringatan\"     End If End Sub  Yap mungkin itu saja artikel sederhana bagaimana membuat aktivasi dengan dongle, untuk source code bisa didownload disini.   Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["aktivasi dongle","attrib","flash disk","GetDriveType","GetLogicalDrives","GetVolumeInformation","MD5","tool dongle"],
        "url": "http://coding4ever.net/blog/2010/02/08/membuat-aktivasi-dongle-bagian-1-simple-think/",
        "teaser": null
      },{
        "title": "Membuat aktivasi dongle bagian akhir – 1 dongle untuk semua",
        "excerpt":"Oke akhirnya kita sudah memutuskan untuk membuat proteksi software dengan menggunakan dongle, tetapi kita masih punya 1 masalah lagi yang harus kita selesaikan yaitu kemudahan dalam mengimplementasikan jenis aktivasi ini.   Rencananya software yang kita buat akan diinstall dibeberapa komputer misal 1 server dengan 10 klien, yang jadi pertanyaan dimanakah donglenya akan dipasang ? Di komputer server ? Komputer klien ? Ganti-gantian ? Atau semua komputer akan dipasang dongle :laughing:     Jelas solusi yang terbaik dan tidak akan dibantah klien kita adalah cukup dipasang di komputer server, kalo begitu aplikasi klien harus mempunyai cara untuk mengetahui apakah status dongle di server dipasang/tidak atau donglenya valid/tidak.   Saat ini ada 2 cara yang mungkin bisa kita lakukan :      Status donglenya kita simpan di database, dengan cara ini kita mungkin akan membuat program tambahan yang sifatnya realtime mengecek status dongle kemudian menyimpannya ke database, sehingga hal ini memungkinkan klien mengetahui status terakhir dongle.   Status dongle hanya akan dicek jika ada request dari klien, jelas ini cara yang lebih efektif jadi enggak perlu harus realtime mengecek status dongle dan tentunya hal ini akan lebih menghemat memory.   Baik cara 1 atau 2 tetap mengharuskan kita untuk membuat program tambahan dan karena kita sudah memutuskan untuk menggunakan cara ke 2 otomatis ada sedikit keahlian pemrograman yang harus kita ketahui.   Dan untungnya Anda sudah pernah main-main kesini, sini dan sini tetapi akan lebih MANTEB kalo Anda sudah nyampe kesini dan sini ;-) sehingga untuk membuat aplikasi tambahan tersebut jadi lebih gampang.   1. Aplikasi server   Intinya aplikasi ini hanya menerima koneksi masuk, melakukan pengecekan dongle kemudian memberikan balasanke klien (true|false). Data yang masuk divalidasi terlebih dahulu jika bernilai string “reqStatusDongle” baru diproses.   Private Sub Socket_DataArrival(Index As Integer, ByVal bytesTotal As Long)     Dim ret             As Boolean      Dim strData         As String     Dim statusDongle    As String      On Error GoTo errHandle      ' Grab the data from the specified Winsock object, and pass it to the parent.     Call Socket(Index).GetData(strData)     DoEvents      'hanya data dengan string 'reqStatusDongle' yg akan diproses     If strData = \"reqStatusDongle\" Then         If isValidDongle Then             statusDongle = \"true\"         Else             statusDongle = \"false\"         End If          ret = send(Index, statusDongle) 'kirim status dongle ke klien     End If      Exit Sub errHandle:    Call Socket(Index).Close End Sub     Aplikasi server ini akan lebih baik jika dijadikan service dan Anda bisa membaca artikel cara mudah dan gampang membuat aplikasi service dengan VB6, karena dari sekian banyak contoh-contoh membuat service yang beredar di pasaran banyak yang sesat dan menyesatkan. He he he just kidding :)   2. Aplikasi klien   Aplikasi klien ditambahkan 1 form khusus untuk merequest status dongle   Private Sub Form_Load()     If startConnect(\"127.0.0.1\") Then         'ingat hanya string 'reqStatusDongle' yang akan diproses oleh server         If Not send(\"reqStatusDongle\") Then             MsgBox \"Aplikasi Toekang Cek Doengle belum aktif\", vbExclamation, \"Warning\"             Unload Me         End If      Else         MsgBox \"Aplikasi Toekang Cek Doengle belum aktif\", vbExclamation, \"Warning\"         Unload Me     End If End Sub  Private Sub Socket_DataArrival(ByVal bytesTotal As Long)     Dim dataMasuk   As String      'On Error Resume Next      Socket.GetData dataMasuk     If dataMasuk = \"true\" Then 'dongle sudah terpasang dan valid         MsgBox \"dongle valid\"         'TODO : tampilkan form utama disini     Else         MsgBox \"Maaf dongle belum terpasang, aplikasi tidak bisa dilanjutkan\", vbExclamation, \"Peringatan\"     End If      Unload Me End Sub  Oke mungkin itu saja yang bisa saya bahas, sample program bisa didownload disini.   Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["aktivasi dongle","aplikasi klien","aplikasi server","Socket"],
        "url": "http://coding4ever.net/blog/2010/02/10/membuat-aktivasi-dongle-bagian-akhir-e2-80-93-1-dongle-untuk-semua/",
        "teaser": null
      },{
        "title": "Menonaktifkan tombol Minimize, Maximize dan Close MDI Form",
        "excerpt":"Pada postingan saya yang sebelumnya kita sudah mengetahui bagaimana cara menonaktifkan tombol Minimize, Maximize dan Close pada SDI Form.   Sesuai judul postingan kali ini yang akan kita nonaktifkan adalah tombol Minimize, Maximize dan Close pada MDI Form. Jika pada SDI Form untuk menonaktifkan tombol Minimize dan Maximize masih bisa dilakukan secara manual (via properties) untuk MDI Form tidak bisa, semuanya full coding.     Oke kita langsung saja tambahkan sebuah modul kemudian copas kode berikut :   Option Explicit  Private Const SC_CLOSE As Long = &amp;HF060&amp; Private Const SC_MAXIMIZE As Long = &amp;HF030&amp; Private Const SC_MINIMIZE As Long = &amp;HF020&amp;  Private Const xSC_CLOSE As Long = -10&amp; Private Const xSC_MAXIMIZE As Long = -11&amp; Private Const xSC_MINIMIZE As Long = -12&amp;  Private Const GWL_STYLE = (-16) Private Const WS_MAXIMIZEBOX = &amp;H10000 Private Const WS_MINIMIZEBOX = &amp;H20000  Private Const hWnd_NOTOPMOST = -2 Private Const SWP_NOZORDER = &amp;H4 Private Const SWP_NOSIZE = &amp;H1 Private Const SWP_NOMOVE = &amp;H2 Private Const SWP_FRAMECHANGED = &amp;H20  Private Const MIIM_STATE As Long = &amp;H1&amp; Private Const MIIM_ID As Long = &amp;H2&amp; Private Const MFS_GRAYED As Long = &amp;H3&amp; Private Const WM_NCACTIVATE As Long = &amp;H86  Private Type MENUITEMINFO     cbSize As Long     fMask As Long     fType As Long     fState As Long     wID As Long     hSubMenu As Long     hbmpChecked As Long     hbmpUnchecked As Long     dwItemData As Long     dwTypeData As String     cch As Long End Type  Private Declare Function GetSystemMenu Lib \"user32\" (ByVal hWnd As Long, ByVal bRevert As Long) As Long Private Declare Function GetMenuItemInfo Lib \"user32\" Alias \"GetMenuItemInfoA\" (ByVal hMenu As Long, ByVal un As Long, ByVal b As Boolean, lpMenuItemInfo As MENUITEMINFO) As Long Private Declare Function SetMenuItemInfo Lib \"user32\" Alias \"SetMenuItemInfoA\" (ByVal hMenu As Long, ByVal un As Long, ByVal bool As Boolean, lpcMenuItemInfo As MENUITEMINFO) As Long Private Declare Function SendMessage Lib \"user32\" Alias \"SendMessageA\" (ByVal hWnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lParam As Any) As Long Private Declare Function IsWindow Lib \"user32\" (ByVal hWnd As Long) As Long Private Declare Function GetWindowLong Lib \"user32\" Alias \"GetWindowLongA\" (ByVal hWnd As Long, ByVal nIndex As Long) As Long Private Declare Function SetWindowLong Lib \"user32\" Alias \"SetWindowLongA\" (ByVal hWnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long Private Declare Function GetParent Lib \"user32\" (ByVal hWnd As Long) As Long Private Declare Function SetParent Lib \"user32\" (ByVal hWndChild As Long, ByVal hWndNewParent As Long) As Long Private Declare Function SetWindowPos Lib \"user32\" (ByVal hWnd As Long, ByVal hWndInsertAfter As Long, ByVal x As Long, ByVal y As Long, ByVal cx As Long, ByVal cy As Long, ByVal wFlags As Long) As Long  Public Function EnableCloseButton(ByVal hWnd As Long, Enable As Boolean) As Integer     EnableSystemMenuItem hWnd, SC_CLOSE, xSC_CLOSE, Enable, \"EnableCloseButton\" End Function  '******************************************************************************* ' Enable / Disable Minimise Button '-------------------------------------------------------------------------------  Public Sub EnableMinButton(ByVal hWnd As Long, Enable As Boolean)     Dim lngFormStyle As Long      ' Enable / Disable System Menu Item     EnableSystemMenuItem hWnd, SC_MINIMIZE, xSC_MINIMIZE, Enable, \"EnableMinButton\"      ' Enable / Disable TitleBar button      lngFormStyle = GetWindowLong(hWnd, GWL_STYLE)     If Enable Then         lngFormStyle = lngFormStyle Or WS_MINIMIZEBOX     Else         lngFormStyle = lngFormStyle And Not WS_MINIMIZEBOX     End If     SetWindowLong hWnd, GWL_STYLE, lngFormStyle      ' Dirty, slimy, devious hack to ensure that the changes to the     ' window's style take immediate effect before the form is shown      SetParent hWnd, GetParent(hWnd)     SetWindowPos hWnd, hWnd_NOTOPMOST, 0, 0, 0, 0, SWP_NOZORDER Or SWP_NOSIZE Or SWP_NOMOVE Or SWP_FRAMECHANGED End Sub  '******************************************************************************* ' Enable / Disable Maximise Button '-------------------------------------------------------------------------------  Public Sub EnableMaxButton(ByVal hWnd As Long, Enable As Boolean)     Dim lngFormStyle As Long      ' Enable / Disable System Menu Item     EnableSystemMenuItem hWnd, SC_MAXIMIZE, xSC_MAXIMIZE, Enable, \"EnableMaxButton\"      ' Enable / Disable TitleBar button     lngFormStyle = GetWindowLong(hWnd, GWL_STYLE)     If Enable Then         lngFormStyle = lngFormStyle Or WS_MAXIMIZEBOX     Else         lngFormStyle = lngFormStyle And Not WS_MAXIMIZEBOX     End If     SetWindowLong hWnd, GWL_STYLE, lngFormStyle      ' Dirty, slimy, devious hack to ensure that the changes to the     ' window's style take immediate effect before the form is shown      SetParent hWnd, GetParent(hWnd)     SetWindowPos hWnd, hWnd_NOTOPMOST, 0, 0, 0, 0, SWP_NOZORDER Or SWP_NOSIZE Or SWP_NOMOVE Or SWP_FRAMECHANGED End Sub  Private Sub EnableSystemMenuItem(hWnd As Long, Item As Long, Dummy As Long, Enable As Boolean, FuncName As String)     Dim hMenu       As Long     Dim MII         As MENUITEMINFO     Dim lngMenuID   As Long      If IsWindow(hWnd) = 0 Then         Err.Raise vbObjectError, \"modCloseBtn::\" &amp; FuncName, _             \"modCloseBtn::\" &amp; FuncName &amp; \"() - Invalid Window Handle\"         Exit Sub     End If      ' Retrieve a handle to the window's system menu     hMenu = GetSystemMenu(hWnd, 0)      ' Retrieve the menu item information for the Max menu item/button     MII.cbSize = Len(MII)     MII.dwTypeData = String$(80, 0)     MII.cch = Len(MII.dwTypeData)     MII.fMask = MIIM_STATE      If Enable Then         MII.wID = Dummy     Else         MII.wID = Item     End If      If GetMenuItemInfo(hMenu, MII.wID, False, MII) = 0 Then         Err.Raise vbObjectError, \"modCloseBtn::\" &amp; FuncName, _             \"modCloseBtn::\" &amp; FuncName &amp; \"() - Menu Item Not Found\"         Exit Sub     End If      ' Switch the ID of the menu item so that VB can not undo the action itself     lngMenuID = MII.wID      If Enable Then         MII.wID = Item     Else         MII.wID = Dummy     End If      MII.fMask = MIIM_ID     If SetMenuItemInfo(hMenu, lngMenuID, False, MII) = 0 Then         Err.Raise vbObjectError, \"modCloseBtn::\" &amp; FuncName, _             \"modCloseBtn::\" &amp; FuncName &amp; \"() - Error encountered \" &amp; _             \"changing ID\"         Exit Sub     End If      ' Set the enabled / disabled state of the menu item     If Enable Then         MII.fState = MII.fState And Not MFS_GRAYED     Else         MII.fState = MII.fState Or MFS_GRAYED     End If      MII.fMask = MIIM_STATE     If SetMenuItemInfo(hMenu, MII.wID, False, MII) = 0 Then          Err.Raise vbObjectError, \"modCloseBtn::\" &amp; FuncName, _             \"modCloseBtn::\" &amp; FuncName &amp; \"() - Error encountered \" &amp; _             \"changing state\"         Exit Sub     End If      ' Activate the non-client area of the window to update the titlebar, and     ' draw the Max button in its new state.     SendMessage hWnd, WM_NCACTIVATE, True, 0 End Sub  Contoh pemanggilan di MDI Form  :   1. Menonaktifkan tombol Minimize   Private Sub cmdDisableMinButton_Click()     EnableMinButton Me.hWnd, False End Sub     2. Menonaktifkan tombol Maximize   Private Sub cmdDisableMinButton_Click()     EnableMinButton Me.hWnd, False End Sub     3. Menonaktifkan tombol Close   Private Sub cmdDisableMinButton_Click()     EnableMinButton Me.hWnd, False End Sub   Yaph mungkin itu saja   Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["Close","Disable tombol","Maximize","mdi form","Minimize","sdi form"],
        "url": "http://coding4ever.net/blog/2010/02/12/menonaktifkan-tombol-minimize-maximize-dan-close-mdi-form/",
        "teaser": null
      },{
        "title": "Mengakses tabel via kelas",
        "excerpt":"Artikel kita kali ini khusus bagi Anda yang sudah terbiasa membuat aplikasi database menggunakan Visual Basic 6 tetapi untuk mengeksekusi perintah-perintah DML (Insert, Update, Delete dan Select) masih di lakukan di Form/Modul.   Dan diartikel ini juga kita akan sedikit mencoba memasuki daerah suram bagi kebanyakan programmer prosedural seperti Saya dan Anda :grin: yang biasa disebut OOP.   Kenapa menggunakan kelas dan teori-teori seputar kelas bisa anda baca referensi-referensi yang berhubungan dengan OOP di Visual Basic 6, walaupun Visual Basic 6 sendiri belum bisa dikatakan bahasa pemrograman yang full OOP. Setidaknya itu yang saya baca dari referensi-referensi yang ada, kalo salah mohon dikoreksi :).     Oke kita langsung saja mempersiapkan dan mempraktikkan langkah-langkah apa saja yang perlu dilakukan untuk membuat kelas.      Ingat » Practice, practice, practice! Practice makes perfect :blush: «    Untuk contoh kita akan membuat kelas siswa dari rancangan tabel berikut :      1. Buat project baru 2. Tambahkan Class Module dan disini kita hanya akan membahas membuat kelas private (bukan sebagai project terpisah) hanya untuk menyederhanakan pembahasan      kemudian ganti namanya menjadi clsSiswa      3. Membuat Properties   Salah satu kegunaan properties adalah untuk melewatkan data dari objek luar kelas, contoh untuk membuat properties nomorinduk :   Private mNomorInduk As String 'm untuk prefix Member  'untuk mengeset nilai properties 'jika kode ini tidak kita buat maka sifat dari propertiesnya adalah readonly Public Property Let nomorInduk(ByVal vData As String)     mNomorInduk = vData End Property  'untuk membaca nilai properties Public Property Get nomorInduk() As String     nomorInduk = mNomorInduk End Property  Ulangi langkah-langkah no. 3 untuk membuat properties yang lain: nama, alamat dan nilai. Selain itu kita juga akan menambahkan private variabel dengan tipe recordset kita sebut saja namanya mRs, sesuai tipenya variabel ini digunakan untuk menampung hasil SELECT.   Hasil akhir source code untuk membuat propertiesnya adalah sebagai berikut :   Option Explicit  Private mRs             As ADODB.Recordset  Private mNomorInduk     As String 'm untuk prefix Member Private mNama           As String Private mAlamat         As String  'untuk mengeset nilai properties 'jika kode ini tidak kita buat maka sifat dari propertiesnya adalah readonly Public Property Let nomorInduk(ByVal vData As String)     mNomorInduk = vData End Property  'untuk membaca nilai properties Public Property Get nomorInduk() As String     nomorInduk = mNomorInduk End Property  Public Property Let nama(ByVal vData As String)     mNama = vData End Property Public Property Get nama() As String     nama = mNama End Property  Public Property Let alamat(ByVal vData As String)     mAlamat = vData End Property Public Property Get alamat() As String     alamat = mAlamat End Property  4. Menambahkan method   Method dalam istilah pemrograman terstruktur biasanya dikenal dengan istilah fungsi/prosedur, disini kita akan membuat method-method yang mewakili perintah DML SQL :      Insert -&gt; addData : Boolean   Update -&gt; editData : Boolean   Delete -&gt; deleteData : Boolean   Select -&gt; startGetData : Long + getData   Contoh kita akan menambahkan method addData :   Public Function addData() As Boolean     On Error GoTo errHandle      strSql = \"INSERT INTO siswa (nomorinduk, nama, alamat) VALUES ('\" &amp; _              rep(nomorInduk) &amp; \"', '\" &amp; rep(nama) &amp; \"', '\" &amp; rep(alamat) &amp; \"')\"     conn.Execute strSql      addData = True      Exit Function errHandle:     addData = False End Function  Selanjutnya buat juga untuk method-method lainnya :   Public Function editData() As Boolean     On Error GoTo errHandle      strSql = \"UPDATE siswa SET nama = '\" &amp; rep(nama) &amp; \"', alamat = '\" &amp; rep(alamat) &amp; \"' \" &amp; _              \"WHERE nomorinduk = '\" &amp; rep(nomorInduk) &amp; \"'\"     conn.Execute strSql      editData = True      Exit Function errHandle:     editData = False End Function  Public Function delData() As Boolean     On Error GoTo errHandle      strSql = \"DELETE FROM siswa WHERE nomorinduk = '\" &amp; rep(nomorInduk) &amp; \"'\"     conn.Execute strSql      delData = True      Exit Function errHandle:     delData = False End Function  Karena method startGetData dan getData adalah satu paket maka kita akan menggunakan pendekatan yang sedikit berbeda :   Public Function startGetData() As Long     On Error GoTo errHandle      strSql = \"SELECT nomorinduk, nama, alamat \" &amp; _              \"FROM siswa \" &amp; _              \"ORDER BY nama\"     Set mRs = openRecordset(strSql)     If Not mRs.EOF Then startGetData = getRecordCount(mRs)      Exit Function errHandle:     startGetData = 0 End Function  Public Sub getData()     On Error Resume Next      mNomorInduk = IIf(IsNull(mRs(\"nomorinduk\").Value), \"\", mRs(\"nomorinduk\").Value)     mNama = IIf(IsNull(mRs(\"nama\").Value), \"\", mRs(\"nama\").Value)     mAlamat = IIf(IsNull(mRs(\"alamat\").Value), \"\", mRs(\"alamat\").Value)     mNilai = IIf(IsNull(mRs(\"nilai\").Value), 0, mRs(\"nilai\").Value)      mRs.MoveNext End Sub  'setelah pemanggilan method startGetData 'hasil recordset sebaiknya dihapus dari memory Public Sub endGetData()     Call closeRecordset(mRs) End Sub  Sampai disini persiapan membuat kelas sudah selesai dan langkah selanjutnya kita akan mencoba menggunakan kelas siswa berikut properties dan methodnya.   Ingat kelas siswa tidak bisa langsung digunakan jadi kita harus mendeklarsikan sebuah var objek dengan tipe clsSiswa, contoh :   Private Sub cmdTesBuatObjek_Click()     'deklarsi var objSiswa, sampai disini masih belum bisa digunakan     Dim objSiswa    As clsSiswa      'membuat objek clsSiswa dg nama objSiswa     Set objSiswa = New clsSiswa      'dan jangan lupa dihapus setelah selesai digunakan     Set objSiswa = Nothing End Sub  Selanjutnya kita baru bisa menggunakan properties dan method yang ada di kelas siswa :   Private Sub cmdSimpan_Click()     Set objSiswa = New clsSiswa     With objSiswa         .nomorInduk = \"02024113\"         .nama = \"KoKom Armagedon\"         .alamat = \"\"          result = .addData     End With     Set objSiswa = Nothing      If result Then         MsgBox \"Data sudah disimpan\", vbInformation, \"Informasi\"      Else         MsgBox \"Data siswa gagal disimpan\", vbExclamation, \"Peringatan\"     End If End Sub  Private Sub cmdEdit_Click()     Set objSiswa = New clsSiswa     With objSiswa         .nomorInduk = \"02024113\"         .nama = \"K4m4r82\"         .alamat = \"Yogyakarta\"          result = .editData     End With     Set objSiswa = Nothing      If result Then         MsgBox \"Perubahan data sudah disimpan\", vbInformation, \"Informasi\"      Else         MsgBox \"Data siswa gagal disimpan\", vbExclamation, \"Peringatan\"     End If End Sub  Private Sub cmdDelete_Click()     Set objSiswa = New clsSiswa     With objSiswa         .nomorInduk = \"02024113\"         result = .delData     End With     Set objSiswa = Nothing      If result Then         MsgBox \"Data siswa sudah dihapus\", vbInformation, \"Informasi\"      Else         MsgBox \"Data siswa gagal dihapus\", vbExclamation, \"Peringatan\"     End If End Sub  Private Sub cmdTampilkanData_Click()     Dim i       As Long      Set objSiswa = New clsSiswa     With objSiswa         Screen.MousePointer = vbHourglass         DoEvents          'saya disini menggunakan perulangan for untuk menampilkan data         'biasanya kita untuk menampilkan data dari recordset menggunakan         'perulangan : do while not varRs.EOF atau semisalnya         'hasil survey membuktikan menggunakan for lebih cepat         For i = 1 To .startGetData             Call .getData              Debug.Print \"Nomor Induk : \" &amp; .nomorInduk             Debug.Print \"Nama : \" &amp; .nama             Debug.Print \"Alamat : \" &amp; .alamat          Next i         Call .endGetData          Screen.MousePointer = vbDefault     End With     Set objSiswa = Nothing End Sub  Contoh outpu program :      Untuk source codenya bisa didownload disini.   Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["class","kelas","membuat kelas","method","OOP","properties","siswa"],
        "url": "http://coding4ever.net/blog/2010/02/14/mengakses-tabel-via-kelas/",
        "teaser": null
      },{
        "title": "Cara mudah dan gampang membuat aplikasi service dengan VB6",
        "excerpt":"Membuat service dengan vb6 memang sangat tidak dianjutkan, makanya jangan heran setelah kita mendownload beberapa source code yang mengklaim bisa membuat service di vb6 dan mencobanya yang ada hanya error pada saat dijalankan atau berhasil sampai mendaftarkan ke service tetapi gagal pada saat ingin running/start.   Tetapi jangan kuatir setelah Anda membaca artikel ini, Anda akan dengan mudah membuat service di windows.     Sebenarnya ini adalah artikel lama tapi kayaxnya masih jarang dibahas diblog-blog pemrograman lokal atau mungkin mereka sudah merasa cukup puas dengan membuat aplikasi yang bisa running pada saat windows diaktifkan.   Salah satu keuntungan aplikasi dibuat service adalah bisa running tanpa harus login ke windows dan tentunya tidak semua aplikasi harus dibuat service cukup aplikasi-aplikasi tertentu saja, contoh sample aplikasi yang ada disini.   Contoh-contoh source code yang mengklaim bisa membuat service dengan vb6 biasanya menggunakan fungsi-fungsi API yang buanyakkk dan seperti biasa kalo salah-salah bermain API bisa terbakar loh :grin:   Di artikel kali ini kita akan mencoba cara yang mudah/instan yaitu dengan menggunakan komponen NT Service Control Module.   Untuk sample program yang akan kita bahas nanti akan membutuhkan 2 parameter pada saat dijalankan yaitu :      /i -&gt; untuk menginstall/mendaftarkan aplikasi sebagai service   /u -&gt; untuk menguninstall/menghapus aplikasi dari service   Adapun fungsi yang digunakan untuk mendapatkan parameter yang dilewatkan ke aplikasi kita adalah :      Command -&gt; Variant   Command$ -&gt; String   Ke 2 fungsi diatas adalah fungsi yang sama hanya return valuenya saja yang beda, berikut contoh penggunaan fungsi tersebut :   Public Sub Main()     Dim param As String      param = Command$     Select Case param         Case \"/i\"             'TODO : install sevice          Case \"/u\"             'TODO : uninstall service          Case Else             'parameter tidak dikenal     End Select End Sub  Komponen NT Service Control Module mempunya beberapa method, properties dan event yang memudahkan kita untuk membuat service :   Oke kita mulai saja langkah-langkah pembuatan service di vb dengan menggunakan komponen NT Service Control Module :   1. Buat project baru dan tambahkan komponen NT Service Control Module (komponen ini bisa Anda download pada bagian akhir artikel)   2. Masuk ke bagian editor code form kemudian tambahkan prosedur berikut :   Private Sub initNTService()     On Error GoTo ServiceError      stopService = False      With NTService1         .DisplayName = \"Coding4ever NT Service\"         .ServiceName = \"coding4everNTService\"          lblAnimasi.Caption = .DisplayName &amp; \" Loading\"          'Install the service         If Command$ = \"/i\" Then              'enable interaction with desktop             .Interactive = True             .StartMode = svcStartAutomatic              'Install the program as an NT service             If .Install Then                 'Save the TimerInterval Parameter in the Registry                 .SaveSetting \"Parameters\", \"TimerInterval\", \"45\"                  MsgBox .DisplayName &amp; \": installed successfully\"              Else                 MsgBox .DisplayName &amp; \": failed to install\"             End If              End          'Remove the Service Registry Keys and uninstall the service         ElseIf Command$ = \"/u\" Then             If .Uninstall Then                 MsgBox .DisplayName &amp; \": uninstalled successfully\"             Else                 MsgBox .DisplayName &amp; \": failed to uninstall\"             End If              End          'Invalid parameter         ElseIf Command$ &lt;&gt; \"\" Then             MsgBox \"Invalid Parameter\"             End         End If          'Retrive the stored value for the timer interval         tmrAnimasi.Interval = CInt(.GetSetting(\"Parameters\", \"TimerInterval\", \"45\"))          'enable Pause/Continue. Must be set before StartService         'is called or in design mode         .ControlsAccepted = svcCtrlPauseContinue          'connect service to Windows NT services controller         .StartService     End With      Exit Sub ServiceError:     Call NTService1.LogEvent(svcMessageError, svcEventError, \"[\" &amp; Err.Number &amp; \"] \" &amp; Err.Description) End Sub  Selanjutnya kita tinggal panggil di event Form_Load :   Private Sub Form_Load()     Call initNTService End Sub  3. Langkah selanjutnya kita tinggal membuat kode untuk menghandle event-event berikut :      Continue   Control   Pause   Start   Stop   Private Sub NTService1_Continue(Success As Boolean)     'Handle the continue service event     On Error GoTo ServiceError      tmrAnimasi.Enabled = True     lblAnimasi.Caption = NTService1.DisplayName &amp; \" Running\"     Success = True      NTService1.LogEvent svcEventInformation, svcMessageInfo, \"Service continued\"      Exit Sub ServiceError:     NTService1.LogEvent svcMessageError, svcEventError, \"[\" &amp; Err.Number &amp; \"] \" &amp; Err.Description End Sub  Private Sub NTService1_Control(ByVal mEvent As Long)     'Take control of the service events     On Error GoTo ServiceError      lblAnimasi.Caption = NTService1.DisplayName &amp; \" Control signal \" &amp; CStr([mEvent])      Exit Sub ServiceError:     NTService1.LogEvent svcMessageError, svcEventError, \"[\" &amp; Err.Number &amp; \"] \" &amp; Err.Description End Sub  Private Sub NTService1_Pause(Success As Boolean)     'Pause Event Request     On Error GoTo ServiceError      tmrAnimasi.Enabled = False     lblAnimasi.Caption = NTService1.DisplayName &amp; \" Paused\"     NTService1.LogEvent svcEventError, svcMessageError, \"Service paused\"     Success = True      Exit Sub ServiceError:     NTService1.LogEvent svcMessageError, svcEventError, \"[\" &amp; Err.Number &amp; \"] \" &amp; Err.Description End Sub  Private Sub NTService1_Start(Success As Boolean)     'Start Event Request     On Error GoTo ServiceError      lblAnimasi.Caption = NTService1.DisplayName &amp; \" Running\"     Success = True      Exit Sub ServiceError:     NTService1.LogEvent svcMessageError, svcEventError, \"[\" &amp; Err.Number &amp; \"] \" &amp; Err.Description End Sub  Private Sub NTService1_Stop()     'Stop and terminate the Service     On Error GoTo ServiceError      lblAnimasi.Caption = NTService1.DisplayName &amp; \" Stopped\"     stopService = True      Unload Me  ServiceError:     NTService1.LogEvent svcMessageError, svcEventError, \"[\" &amp; Err.Number &amp; \"] \" &amp; Err.Description End Sub  4. Terakhir adalah kode untuk menghandle jika di program service kita ditutup (event Form_Unload)   Private Sub Form_Unload(Cancel As Integer) 'Unload the Service     If Not stopService Then         If MsgBox(\"Are you sure you want to unload the service?...\" &amp; vbCrLf &amp; \"the service will be stopped\", vbQuestion + vbYesNo, \"Stop Service\") = vbYes Then             NTService1.stopService             lblAnimasi.Caption = NTService1.DisplayName &amp; \" Stopping\"              Cancel = True          Else             Cancel = True         End If     End If End Sub  Untuk menguji program yang kita buat berhasil atau tidak lakukan langkah-langkah berikut :      Compile project kita, misal hasil compile -&gt; coding4everNTService.exe   Buat 2 buah file dengan ekstensi .bat atau .cmd, ke 2 file ini bertugas untuk menginstall/menguninstall aplikasi kita sebagai service Isi file Install.bat   coding4everNTService /i  Isi file Uninstall.bat   coding4everNTService /u  Jalankan file Install.bat kemudian klik Start -&gt; Run, ketik : services.msc   Setelah itu cek nama service yang kita buat misal Coding4ever NT Service      Jika tampil berarti kita sudah sukses membuat service dan klik link Start the service yang ada dipojok kiri atas untuk menjalankan service, jika berhasil status service kita akan menjadi Started      Oke mungkin itu saja yang bisa saya bahas pada artikel kali ini, sample program + komponen NT Service Control Module bisa Anda download disini.   Selamat mencoba :blush:   Referensi :      Running Visual Basic Applications as Windows NT Services   How To Use NTSVC.OCX from Visual Basic  ","categories": ["Visual Basic"],
        "tags": ["Command","Membuat Service dengan VB 6","NT Service Control Module","Parameter","Running Visual Basic Applications as Windows NT Services"],
        "url": "http://coding4ever.net/blog/2010/02/18/cara-mudah-dan-gampang-membuat-aplikasi-service-dengan-vb6/",
        "teaser": null
      },{
        "title": "Manganalisa source code mesin penjawab otomatis Y!M versi 8, 9 & 10",
        "excerpt":"Kalo pada artikel sebelumnya kita sudah mengetahui bagaimana cara menganalisa bagian-bagian penting program Y!M untuk mendapatkan informasi yang kita butuhkan guna membuat program mesin penjawab otomatis Y!M ini maka pada artikel kali ini kita akan membahas full semua source code penting untuk membuat aplikasi ini.   Sebenarnya saya sudah lama ingin mengupload source code ini tapi berhubung waktu itu baru support untuk Y!M 8 saya jadi males nguploadnya, tapi setelah melakukan sedikit penyesuaian untuk mendukung Y!M 9 dan 10 akhirnya saya bisa dengan tenang mengupload source code ini :grin:.   Seperti pada artikel sebelumnya untuk melanjutkan pembahasan ini kita harus mengetahui urutan windows parent-&gt;anak baik untuk membaca pesan yang masuk atau membalasnya.     Berikut adalah urutannya :           Y!M 8              YSearchMenuWndClass -&gt;  IMClass -&gt; YHTMLContainer -&gt; Internet Explorer_Server (membaca pesan yang masuk)       YSearchMenuWndClass -&gt;  IMClass -&gt; YIMInputWindow (membalas pesan)                Y!M 9              ATL:007C07F0 -&gt; YHTMLContainer -&gt; Internet Explorer_Server (membaca pesan yang masuk)       ATL:007C07F0 -&gt; YIMInputWindow (membalas pesan)                Y!M 10              CConvWndBase -&gt; YHTMLContainer -&gt; Internet Explorer_Server (membaca pesan yang masuk)       CConvWndBase -&gt; YIMInputWindow (membalas pesan)           Telihat ada sedikit perbedaan nama class/window untuk Y!M 8, 9 dan 10 dan jika Anda lupa bagaimana cara untuk mendapatkan informasi tersebut silahkan mampir kesini dulu.   Karena aplikasi kita kali ini akan mendukung 3 versi Y!M otomatis kita harus mempunyai sebuah fungsi untuk mengecek versi Y!M yang terinstall di komputer, salah satu cara termudah untuk mendapatkan informasi tersebut adalah via registry windows dan setelah melakukan sedikit investigasi saya mendapatkan lokasi berikut di registry windows :   ;Y!M 8 dan 9 Key : HKEY_LOCAL_MACHINE\\SOFTWARE\\Yahoo\\pager Name : ProductVersion  ;Y!M 10 Key : HKEY_CURRENT_USER\\Software\\yahoo\\pager Name : Version  Fungsinya akan terlihat seperti berikut :   Private Function getYMVersion() As String     Dim ymVersion       As String     Dim arrYMVersion()  As String      'cek key Y!M 8 dan 9     ymVersion = getFromWindowsRegistry(HKEY_LOCAL_MACHINE, \"SOFTWARE\\Yahoo\\pager\", \"ProductVersion\")      'Y!M 10     'jika pengecekan key Y!M versi 8 dan 9 masih kosong coba cek key Y!M 10     If Not (Len(ymVersion) &gt; 0) Then ymVersion = getFromWindowsRegistry(HKEY_CURRENT_USER, \"Software\\yahoo\\pager\", \"Version\")      If Len(ymVersion) &gt; 0 Then         arrYMVersion = Split(ymVersion, \".\") ' ex : 10.0.0.1102, kita ambil mayor versionnya aja = 10     Else         ReDim arrYMVersion(0)     End If      getYMVersion = arrYMVersion(0) End Function  Cara yang kedua dengan memanfaatkan registry berikut :   HKEY_CLASSES_ROOT\\ymsgr\\shell\\open\\command  dan jika kita lihat nilai dari key tersebut lebih kurang seperti berikut :   \"C:\\Program Files\\Yahoo!\\Messenger\\YahooMessenger.exe\" %1  Loh mana informasi versi Y!Mnya ? Versi Y!Mnya bisa langsung kita dapatkan dari file YahooMessenger.exe jadi dengan cara kedua ini kita membutuhkan referensi Microsoft Scripting Runtime untuk membuat fungsi getYMVersion.   Private Function getYMVersion() As String     Dim fso             As Scripting.FileSystemObject     Dim YMExe           As String     Dim arrYMVersion()  As String      YMExe = getFromWindowsRegistry(HKEY_CLASSES_ROOT, \"ymsgr\\shell\\open\\command\", \"\") 'output -&gt; \"C:\\Program Files\\Yahoo!\\Messenger\\YahooMessenger.exe\" %1     YMExe = Replace(YMExe, \" %1\", \"\") 'hapus karakter spasi+%1     YMExe = Replace(YMExe, Chr(34), \"\") 'hapus karakter petik \"      If Len(YMExe) &gt; 0 Then         Set fso = New Scripting.FileSystemObject         arrYMVersion = Split(fso.GetFileVersion(YMExe), \".\") ' ex : 10.0.0.1102, kita ambil mayor versionnya aja = 10         Set fso = Nothing      Else         ReDim arrYMVersion(0)     End If      getYMVersion = arrYMVersion(0) End Function  Dari 2 fungsi getYMVersion tersebut terserah Anda mau menggunakan yang mana, yang jelas hasilnya sama. Selanjutnya kita tinggal panggil fungsi tersebut seperti berikut :   Public Sub Main()     Dim ymVersion   As String      ymVersion = getYMVersion     If Not (Len(ymVersion) &gt; 0) Then         MsgBox \"Y!M belum terinstall, aplikasi tidak bisa dilanjutkan\", vbExclamation, \"Peringatan\"         End     End If      'TODO : tampilkan form utama disini End Sub  Oke sampai disini kita sudah punya fungsi pengecekan versi Y!M langkah berikutnya adalah mendapatkan ymID yang sedang chat dengan kita.   Informasi ymID ini nanti digunakan untuk memudahkan kita memparsing pesan yang masuk.   Satu-satunya cara yang saat ini saya ketahui untuk mendapatkan informasi ymID adalah dengan membaca informasi Title Bar Y!M, tetapi informasi Title Bar ini tidak fix tergantung kondisi berikut :      Versi Y!M   Lawan chat sudah terdaftar Messenger List/belum   berikut cuplikannya      Berdasarkan gambar diatas kita bisa dengan mudah membuat fungsi untuk mendapatkan ymID.   Private Function getYMID(ByVal hwndYMMainClass As Long) As String     Dim titleBar        As String     Dim ymID            As String     Dim arrTitleBar()   As String     Dim pos             As Long      titleBar = String$(100, Chr$(0))     GetWindowText hwndYMMainClass, titleBar, 100     titleBar = Left$(titleBar, InStr(titleBar, Chr$(0)) - 1)      If InStr(1, titleBar, \" (\") &gt; 0 Then 'lawan chat terdaftar di Messenger List         'ex YM8    : KoKom Armag3d0n (k4m4r82) - Instant Message         '   YM9/10 : KoKom Armag3d0n (k4m4r82)          arrTitleBar = Split(titleBar, \" (\")         ymID = arrTitleBar(0)      Else         Select Case ymVersion             Case \"8\" 'ex : KoKom Armag3d0n - Instant Message                 arrTitleBar = Split(titleBar, \" - \")                 ymID = arrTitleBar(0)              Case \"9\", \"10\" 'ex : KoKom Armag3d0n                 ymID = titleBar         End Select     End If      getYMID = ymID End Function  Contoh penggunaan fungsi getYMID   Private Sub cmdGetYMID_Click()     Dim hwndYMMainClass     As Long     Dim ymID                As String      Select Case ymVersion         Case \"8\": hwndYMMainClass = FindWindow(\"YSearchMenuWndClass\", vbNullString)         Case \"9\": hwndYMMainClass = FindWindow(\"ATL:007C07F0\", vbNullString)         Case \"10\": hwndYMMainClass = FindWindow(\"CConvWndBase\", vbNullString)     End Select      ymID = getYMID(hwndYMMainClass)     MsgBox \"YM ID : \" &amp; ymID End Sub  Fungsi berikutnya yang akan kita buat adalah fungsi untuk membaca pesan yang masuk, kondisinya juga sama seperti Title Bar informasinya tidak fix tergantung :           Versi Y!M            Lawan chat sudah terdaftar Messenger List/belum       Kalo penasaran lihat gambar berikut :         Contoh beberapa variasi pesan yang masuk setelah dibaca di program         Terlihat dengan jelas perbedaan antara Y!M 8 dan Y!M 9/10 pada saat pembacaan pesan yang masuk, dimana untuk Y!M 9 dan 10 menambahkan informasi tanggal dan jam pesan masuk.   Berikut adalah fungsi untuk menghandle semua variasi tersebut.   Private Function getYMMessage(ByVal hwndYMMainClass As Long) As String     Dim hwndIMClass         As Long     Dim hwndYHTMLContainer  As Long     Dim hwndIEServer        As Long      Dim ymID                As String     Dim msg                 As String      Dim arrMsg()            As String     Dim arrValidMsg()       As String     Dim validMsg            As String     Dim i                   As Long      Select Case ymVersion         Case \"8\"             'urutkan kelas yg harus dilalui untuk membaca pesan yang masuk             'YSearchMenuWndClass -&gt;  IMClass -&gt; YHTMLContainer -&gt; Internet Explorer_Server              If hwndYMMainClass &lt;&gt; 0 Then                 ymID = getYMID(hwndYMMainClass)                  hwndIMClass = FindWindowEx(hwndYMMainClass, 0&amp;, \"IMClass\", vbNullString)                 hwndYHTMLContainer = FindWindowEx(hwndIMClass, 0&amp;, \"YHTMLContainer\", vbNullString)                 hwndIEServer = FindWindowEx(hwndYHTMLContainer, 0&amp;, \"Internet Explorer_Server\", vbNullString)                  msg = getIEText(hwndIEServer)                  arrMsg = Split(msg, Chr(10))                 For i = LBound(arrMsg) To UBound(arrMsg)                     If Len(arrMsg(i)) &gt; 0 Then                         If Left(arrMsg(i), Len(ymID) + 2) = ymID &amp; \": \" Then                             arrValidMsg = Split(arrMsg(i), \": \")                             validMsg = arrValidMsg(UBound(arrValidMsg))                             Exit For                         End If                     End If                 Next i                  validMsg = Replace(validMsg, Chr(13), \"\")                 getYMMessage = validMsg             End If          Case \"9\", \"10\"             'urutkan kelas yg harus dilalui untuk membaca pesan yang masuk             'Y!M 9  : ATL:007C07F0 -&gt; YHTMLContainer -&gt; Internet Explorer_Server             'Y!M 10 : CConvWndBase -&gt; YHTMLContainer -&gt; Internet Explorer_Server              If hwndYMMainClass &lt;&gt; 0 Then                 ymID = getYMID(hwndYMMainClass)                  hwndYHTMLContainer = FindWindowEx(hwndYMMainClass, 0&amp;, \"YHTMLContainer\", vbNullString)                 hwndIEServer = FindWindowEx(hwndYHTMLContainer, 0&amp;, \"Internet Explorer_Server\", vbNullString)                  msg = getIEText(hwndIEServer)                  arrMsg = Split(msg, Chr(10))                 For i = LBound(arrMsg) To UBound(arrMsg)                     If Len(arrMsg(i)) &gt; 0 Then                         If Left(arrMsg(i), Len(ymID) + 2) = ymID &amp; \" (\" Then                             arrValidMsg = Split(arrMsg(i), \"): \")                             validMsg = arrValidMsg(UBound(arrValidMsg))                             Exit For                         End If                     End If                 Next i                  validMsg = Replace(validMsg, Chr(13), \"\")                 getYMMessage = validMsg             End If          Case Else             'silahkan coba sendiri versi ym yg lain     End Select End Function  Contoh penggunaan fungsi getYMMessage   Private Sub cmdGetYMMessage_Click()     Dim hwndYMMainClass     As Long     Dim ymMessage           As String      Select Case ymVersion         Case \"8\": hwndYMMainClass = FindWindow(\"YSearchMenuWndClass\", vbNullString)         Case \"9\": hwndYMMainClass = FindWindow(\"ATL:007C07F0\", vbNullString)         Case \"10\": hwndYMMainClass = FindWindow(\"CConvWndBase\", vbNullString)     End Select      ymMessage = getYMMessage(hwndYMMainClass)     MsgBox \"Pesan masuk : \" &amp; ymMessage End Sub  Fungsi terakhir adalah fungsi untuk mengirim pesan ke lawat chat   Private Sub YMChatSend(ByVal hwndYMMainClass As Long, ByVal msgToSend As String)     Dim hwndIMClass         As Long     Dim hwndYIMInputWindow  As Long      Select Case ymVersion         Case \"8\"             'urutkan kelas yg harus dilalui untuk membalas pesan yang masuk             'YSearchMenuWndClass -&gt;  IMClass -&gt; YIMInputWindow              If hwndYMMainClass &lt;&gt; 0 Then                 hwndIMClass = FindWindowEx(hwndYMMainClass, 0&amp;, \"IMClass\", vbNullString)                 hwndYIMInputWindow = FindWindowEx(hwndIMClass, 0&amp;, \"YIMInputWindow\", vbNullString)             End If          Case \"9\", \"10\"             'urutkan kelas yg harus dilalui untuk membalas pesan yang masuk             'Y!M 9  : ATL:007C07F0 -&gt; YIMInputWindow             'Y!M 10 : CConvWndBase -&gt; YIMInputWindow             If hwndYMMainClass &lt;&gt; 0 Then hwndYIMInputWindow = FindWindowEx(hwndYMMainClass, 0&amp;, \"YIMInputWindow\", vbNullString)     End Select      If hwndYIMInputWindow &lt;&gt; 0 Then         Call SendMessageByString(hwndYIMInputWindow, WM_SETTEXT, 0&amp;, msgToSend)         Call SendMessage(hwndYIMInputWindow, WM_KEYDOWN, VK_RETURN, 0&amp;) 'otomatis menekan tombol Send     End If End Sub  Contoh penggunaan fungsi ymChatSend   Private Sub cmdSendMessage_Click()     Dim hwndYMMainClass     As Long     Dim msg                 As String      Select Case ymVersion         Case \"8\": hwndYMMainClass = FindWindow(\"YSearchMenuWndClass\", vbNullString)         Case \"9\": hwndYMMainClass = FindWindow(\"ATL:007C07F0\", vbNullString)         Case \"10\": hwndYMMainClass = FindWindow(\"CConvWndBase\", vbNullString)     End Select      msg = \"Hallo bro gue udah selesai nih nGebuatin mesin penjawab otomatis Y!Mnya\" &amp; vbCrLf &amp; _           \"Tinggal maem-maemnya ya !!!\"     Call ymChatSend(hwndYMMainClass, msg) End Sub  Akhirnya selesai juga :) dan potongan kode diatas sudah saya susun menjadi program sederhana dengan kasus “Tes Bahasa Inggris” yang bisa didownload disini.   Kalo males download kita lihat  aja trailernya :)                  Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["ATL:007C07F0","CConvWndBase","Internet Explorer_Server","mesin penjawab otomatis","source code mesin penjawab otomatis","YHTMLContainer","YM! Answering Machine","YSearchMenuWndClass"],
        "url": "http://coding4ever.net/blog/2010/02/22/manganalisa-source-code-mesin-penjawab-otomatis-ym-versi-8-9-10/",
        "teaser": null
      },{
        "title": "Menambahkan icon pada menu standar VB",
        "excerpt":"Bagi Anda yang baru belajar VB dan masih menggunakan Menu Editor untuk membuat menu tentu merasa kesulitan untuk menambahkan icon di menu tersebut, karena memang G ada fasilitasnya :grin:.   Tapi jangan kuatir setelah meluangkan waktu beberapa menit untuk membaca artikel ini maka Anda akan dengan mudah menambahkan icon pada menu standar VB.   Berikut langkah-langkahnya :   1. Buat menu seperti biasanya menggunakan Menu Editor     2. Download komponen vbAccelerator VB6 PopMenu Control ekstrak kemudian copykan ke file tersebut ke folder Windows\\System32. Setelah itu ketik perintah berikut dari Start -&gt; Run   regsvr32 cpopmenu6.ocx  3. Tambahkan komponen (CTRL + T) berikut :      Micrososft Windows Common Control 6.0 (SP6)   vbAccelerator VB6 PopMenu Control - bla bla bla      4. Masukkan kedua komponen tersebut ke form   ![](http://coding4ever.files.wordpress.com/2010/02/25022010-3.jpg){: .align-center}  khusus untuk komponen ImageList tambahkan beberapa icon dan jangan lupa mengeset keynya  ![](http://coding4ever.files.wordpress.com/2010/02/25022010-4.jpg){: .align-center}   5. Terakhir bagian kode, tambahkan fungsi dan prosedur berikut :   Private Function getIconIndex(ByVal key As String) As Long     getIconIndex = ImageList1.ListImages.Item(key).Index - 1 End Function  Private Sub setIcon(ByVal key As String, ByVal menuName As String)     Dim iconIndex As Long      iconIndex = getIconIndex(key)     PopMenu1.ItemIcon(menuName) = iconIndex End Sub  Kemudian tinggal tambahkan kode di event Form_Load seperti berikut :   Private Sub Form_Load()     With PopMenu1         .ImageList = ImageList1         .OfficeXpStyle = True         .SubClassMenu Me          Call setIcon(\"new\", \"mnuNew\")         Call setIcon(\"open\", \"mnuOpen\")         Call setIcon(\"close\", \"mnuClose\")         Call setIcon(\"save\", \"mnuSave\")         Call setIcon(\"preview\", \"mnuPrintPreview\")         Call setIcon(\"print\", \"mnuPrint\")         Call setIcon(\"mail\", \"mnuMailRecipient\")         Call setIcon(\"fax\", \"mnuFaxRecipient\")         Call setIcon(\"powerpoint\", \"mnuMicrosoftPowerPoint\")      End With End Sub  Jalankan program (F5) Anda akan mendapatkan hasil seperti berikut :      Sample program bisa Anda download disini.   Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["Menambahkan icon pada menu editor","Menu Editor","vbAccelerator","vbAccelerator VB6 PopMenu Control","vbAccelerator VB6 Subclassing and Timer Assistant"],
        "url": "http://coding4ever.net/blog/2010/02/25/menambahkan-icon-pada-menu-standar-vb/",
        "teaser": null
      },{
        "title": "Memanfaatkan file Resource untuk menyimpan text, icon, gambar dan wav",
        "excerpt":"Whats is Resource File ?      A Resource File is a repository where you can store images, sounds, videos, data, or whatever you like.  You can stored any file type in a resource file.  It’s like your project’s suitcase… stuff can be put there and kept there, and retrieved easily when needed (NOTE: Resource files are Read-Only).    When you compile your project, the resource file is compiled right into the .EXE, .DLL, .OCX, etc.   Sesuai dengan definisi dan fungsi file resource diatas, kita akan mencoba membuat project dengan menambahkan file resouce.           Buat project baru dan jangan lupa langsung disimpan                  Adapun langkah-langkah untuk menambahkan file resource sebagai berikut :       a. Klik menu Add-Ins -&gt; Add-In Manager …              b. Aktifkan pilihan VB 6 Resource Editor              c. Klik kanan project -&gt; Add -&gt; Resource File              Selanjutnya kita diminta untuk menentukan lokasi penyimpanan file resourcenya (simpan difolder yang sama dengan project), untuk contoh disini saya simpan dengan nama my-resource.       Jika berhasil tampilan project explorer akan seperti berikut :              Kemudian klik ganda file my-resource, setelah itu akan tampil jendela VB Resource Editor. Nih bentuknya :              Oke karna kita sudah berhasil menambahkan file resourcenya selanjutnya kita akan menambahkan data-data berikut :   1. Data berupa string      Contoh pemanggilan via kode   Private Sub cmdTest1_Click()     Me.Caption = LoadResString(101) '101 -&gt; ID dari String Tabel diatas End Sub     2. Data berupa icon      Selanjutnya kita diminta untuk menentukan file icon yang ingin disimpan dengan maksimal kedalaman warna icon 256 color. Jika berhasil akan ada tambahan Node Icon dengan default ID 101.      Contoh pemanggilan via kode   Private Sub cmdTest2_Click()     Picture1.Picture = LoadResPicture(101, vbResIcon) '101 -&gt; ID icon End Sub     3. Data berupa gambar      Kemudian kita diminta untuk menentukan file gambar, tapi disini dibatasi hanya untuk format bmp. Trus bagaimana jika ingin menyimpan file gambar dengan format jpg atau lainnya ? Jawabnya gampang, setelah Anda menyelesaikan artikel ini saya yakin Anda otomatis akan punya gambaran bagaimana melakukan hal tersebut.   Setelah berhasil menambahkan file gambar (format bmp) akan ada tambahan Node Bitmap dengan default ID 101 juga.      Kemudian pemanggilan via kode juga hampir sama dengan pemanggilan icon, dimana cukup mengganti konstanta vbResIcon menjadi vbResBitmap   Private Sub cmdTest3_Click()     Picture1.Picture = LoadResPicture(101, vbResBitmap) End Sub     4. Terakhir data berupa file sound dengan ekstensi .WAV      Selanjutnya kita diminta untuk menentukan file sound dengan ekstensi .wav, jika berhasil akan ada tambahan Node “CUSTOM”      Untuk pemanggilan file wav ini kita akan menggunakan fungsi api PlaySound, berikut kode lengkapnya :   Private Const SND_MEMORY = &amp;H4 Private Const SND_NODEFAULT = &amp;H2 Private Const SND_SYNC = &amp;H0  Private Declare Function PlaySound Lib \"WINMM.DLL\" Alias \"PlaySoundA\" (ByRef Sound As Any, ByVal hLib As Long, ByVal lngFlag As Long) As Long  Private Sub cmdPlay_Click()     Dim dataArray() As Byte      'jangan lupa untuk mengetes kode ini soundnya digedeIn     dataArray = LoadResData(101, \"CUSTOM\")     Call PlaySound(dataArray(0), 0, SND_MEMORY Or SND_NODEFAULT Or SND_SYNC)     Erase dataArray End Sub  Untuk data bertipe CUSTOME ini, tidak terbatasnya hanya untuk menyimpan file WAV saja Anda bahkan bisa menyimpan file AVI, EXE, DLL, JPG, PNG, de el el (hampir semua jenis file).   Selamat mencoba :smile:   Referensi :      TheVbZone  ","categories": ["Visual Basic"],
        "tags": ["LoadResData","LoadResPicture","PlaySound","resource file","vbResBitmap","vbResIcon"],
        "url": "http://coding4ever.net/blog/2010/03/01/memanfaatkan-file-resource-untuk-menyimpan-text-icon-gambar-wav/",
        "teaser": null
      },{
        "title": "Membuat menu dengan 4 style",
        "excerpt":"Melengkapi koleksi artikel-artikel saya tentang membuat menu alternatif di VB, kali ini kita akan membuat tampilan menu seperti berikut :                 Tujuan saya membuat artikel ini adalah agar Anda semakin bingung menentukan pilihan membuat menu alternatif dan akhirnya back to basic menggunakan menu editor :grin: he he he just kidding.   Untuk membuat menu dengan 4 style diatas kita akan menggunakan komponen vbAccelerator CommandBar Control dan library pendukung VB6 SSubTmr, download dan ekstrak ke dua komponen tersebut trus dicopykan ke folder Windows\\System32 dan jangan lupa diregistrasikan dengan perintah regsvr32.   Membuat menu dengan vbAccelerator CommandBar Control sedikit berbeda dengan komponen VBSmart Menu XP dan vbAccelerator VB6 Explorer Bar.   Adapun urutan membuat menu dengan komponen vbAccelerator CommandBar Control adalah sebagai berikut :      Gimana? Apakah Anda jadi teringat akan sesuatu ? Yaph Anda benar :blush: langkah-langkahnya mirip coding menu di java menggunakan komponen swing (JMenuBar, JMenu dan JMenuItem)   Oke kita langsung saja mencoba untuk mempraktikkannya :           Buat project baru kemudian tambahkan komponen dan referensi berikut :                          Masukkan komponen vbAccelerator CommandBar Control dan ImageList ke form              khusus untuk komponen ImageList tambahkan beberapa icon dan jangan lupa mengeset keynya              1. Membuat Menu Bar   Dim objMenuBar  As cCommandBar Dim objMenu     As cCommandBarButtons  With cmdBar(0)     Set objMenuBar = .CommandBars.Add(\"MenuBar\")     Set objMenu = objMenuBar.Buttons End With  2. Membuat Menu   Untuk membuat menu kita membutuhkan prosedur berikut :   Private Sub addMenu(ByVal cmdBar As vbalCommandBar, ByVal objMenu As cCommandBarButtons, ByVal menuName As String, ByVal menuCaption As String, Optional showCaptionInToolbar As Boolean = True)      Dim btn     As cButton      Set btn = cmdBar.Buttons.Add(menuName, , menuCaption)     btn.showCaptionInToolbar = showCaptionInToolbar     objMenu.Add btn End Sub  3. Membuat Menu Item   Untuk membuat menu item/sub menu kita membutuhkan prosedur berikut :   Private Sub addMenuItem(ByVal cmdBar As vbalCommandBar, ByVal objMenuItem As cCommandBarButtons, ByVal menuName As String, ByVal menuCaption As String, _                         Optional iconIndex As Long = -1, Optional buttonStyle As EButtonStyle = eNormal, Optional shortcutKey As KeyCodeConstants, Optional enabled As Boolean = True, Optional selected As Boolean = False)      Dim btn     As cButton      Dim i       As Long     Dim n       As Long      If buttonStyle = eSeparator Then         n = 1         For i = 1 To cmdBar.Buttons.Count             If InStr(1, cmdBar.Buttons(i).key, \"mnuSpr\", vbTextCompare) &gt; 0 Then n = n + 1         Next i          menuName = \"mnuSpr\" &amp; n         menuCaption = \"\"     End If      Set btn = cmdBar.Buttons.Add(menuName, iconIndex, menuCaption, buttonStyle, , shortcutKey)     btn.enabled = enabled     btn.Checked = selected      objMenuItem.Add btn End Sub  Adapun kode untuk menghandle menu yang diklik adalah sebagai berikut :   Private Sub cmdBar_ButtonClick(index As Integer, btn As vbalCmdBar6.cButton)     Select Case btn.key         Case \"mnuNew\": 'TODO : something here         Case \"mnuOpen\": 'TODO : something here         Case \"mnuClose\": 'TODO : something here         Case \"mnuSave\": 'TODO : something here         Case \"mnuSaveAs\": 'TODO : something here         Case \"mnuPrintPreview\": 'TODO : something here         Case \"mnuPrint\": 'TODO : something here         Case \"mnuMailRecipient\": 'TODO : something here         Case \"mnuMailRecipientReview\": 'TODO : something here         Case \"mnuOnlineMeetingParticipant\": 'TODO : something here         Case \"mnuFaxRecipient\": 'TODO : something here         Case \"mnuMicrosoftPowerPoint\": 'TODO : something here         Case \"mnuExit\": End          Case \"mnuStyle1\": cmdBar(0).Style = eOfficeXP         Case \"mnuStyle2\": cmdBar(0).Style = eOffice2003         Case \"mnuStyle3\": cmdBar(0).Style = eMoney         Case \"mnuStyle4\": cmdBar(0).Style = eComCtl32     End Select End Sub  dan ini adalah sisa source codenya :   Private Function getIconIndex(ByVal key As String) As Long     getIconIndex = ImageList1.ListImages.Item(key).index - 1 End Function  Public Sub createCommandBars()     Dim objMenuBar          As cCommandBar     Dim objMenuBarItem      As cCommandBar      Dim objMenuBarSendTo    As cCommandBar      Dim objMenu             As cCommandBarButtons     Dim objMenuItem         As cCommandBarButtons     Dim objMenuItemSendTo   As cCommandBarButtons      Dim menuName            As String      With cmdBar(0)         '1. MEMBUAT MENU BAR         Set objMenuBar = .CommandBars.Add(\"MenuBar\") 'MENU BAR UNTUK MENAMPUNG MENU UTAMA. EX : MENU FILE DAN MENU STYLE MENU         Set objMenu = objMenuBar.Buttons          '2. MEMBUAT MENU/MAIN MENU (EX. FILE, STYLE MENU)         menuName = \"mnuFile\"         Call addMenu(cmdBar(0), objMenu, menuName, \"File\")         Set objMenuBarItem = .CommandBars.Add(menuName)         .Buttons(menuName).Bar = objMenuBarItem 'MENGAITKAN MENU FILE KE MENU BAR          '3. MEMBUAT MENU ITEM/SUB MENU (EX. NEW, OPEN, CLOSE de el el)         Set objMenuItem = objMenuBarItem.Buttons         Call addMenuItem(cmdBar(0), objMenuItem, \"mnuNew\", \"New\", getIconIndex(\"new\"), , vbKeyN)         Call addMenuItem(cmdBar(0), objMenuItem, \"mnuOpen\", \"Open\", getIconIndex(\"open\"), , vbKeyO)         Call addMenuItem(cmdBar(0), objMenuItem, \"mnuClose\", \"Close\", getIconIndex(\"close\"))         Call addMenuItem(cmdBar(0), objMenuItem, \"\", \"\", , eSeparator)         Call addMenuItem(cmdBar(0), objMenuItem, \"mnuSave\", \"Save\", getIconIndex(\"save\"), , vbKeyS)         Call addMenuItem(cmdBar(0), objMenuItem, \"mnuSaveAs\", \"Save As...\")         Call addMenuItem(cmdBar(0), objMenuItem, \"\", \"\", , eSeparator)         Call addMenuItem(cmdBar(0), objMenuItem, \"mnuPrintPreview\", \"Print Preview\", getIconIndex(\"preview\"))         Call addMenuItem(cmdBar(0), objMenuItem, \"mnuPrint\", \"Print\", getIconIndex(\"print\"), , vbKeyP)         Call addMenuItem(cmdBar(0), objMenuItem, \"\", \"\", , eSeparator)          Call addMenuItem(cmdBar(0), objMenuItem, \"mnuSendTo\", \"Send To\")         '&gt;&gt;&gt;&gt; SUB MENU SEND TO             Set objMenuBarSendTo = .CommandBars.Add(menuName &amp; \":mnuSendTo\")             .Buttons(\"mnuSendTo\").Bar = objMenuBarSendTo              Set objMenuItemSendTo = objMenuBarSendTo.Buttons             Call addMenuItem(cmdBar(0), objMenuItemSendTo, \"mnuMailRecipient\", \"Mail Recipient\", getIconIndex(\"mail\"))             Call addMenuItem(cmdBar(0), objMenuItemSendTo, \"mnuMailRecipientReview\", \"Mail Recipient (for Review)\")             Call addMenuItem(cmdBar(0), objMenuItemSendTo, \"mnuOnlineMeetingParticipant\", \"Online Meeting Participant\")             Call addMenuItem(cmdBar(0), objMenuItemSendTo, \"mnuFaxRecipient\", \"Fax Recipient...\", getIconIndex(\"fax\"))             Call addMenuItem(cmdBar(0), objMenuItemSendTo, \"\", \"\", , eSeparator)             Call addMenuItem(cmdBar(0), objMenuItemSendTo, \"mnuMicrosoftPowerPoint\", \"Microsoft PowerPoint\", getIconIndex(\"powerpoint\"))         '&lt;&lt;&lt;&lt;          Call addMenuItem(cmdBar(0), objMenuItem, \"\", \"\", , eSeparator)         Call addMenuItem(cmdBar(0), objMenuItem, \"mnuExit\", \"Exit\", , , vbKeyX)          'MENU : STYLE MENU         menuName = \"mnuStyleMenu\"         Call addMenu(cmdBar(0), objMenu, menuName, \"Style Menu\")         Set objMenuBarItem = .CommandBars.Add(menuName)         .Buttons(menuName).Bar = objMenuBarItem 'MENGAITKAN MENU STYLE MENU KE MENU BAR          '&gt;&gt; SUB MENU STYLE MENU         Set objMenuItem = objMenuBarItem.Buttons         Call addMenuItem(cmdBar(0), objMenuItem, \"mnuStyle1\", \"Office XP\", , eRadio)         Call addMenuItem(cmdBar(0), objMenuItem, \"mnuStyle2\", \"Office 2003\", , eRadio, , , True)         Call addMenuItem(cmdBar(0), objMenuItem, \"mnuStyle3\", \"Ms Money\", , eRadio)         Call addMenuItem(cmdBar(0), objMenuItem, \"mnuStyle4\", \"Standar\", , eRadio)         '&gt;&gt;          .MenuImageList = ImageList1         .Toolbar = .CommandBars(\"MenuBar\")     End With End Sub  Private Sub cmdBar_RequestNewInstance(index As Integer, ctl As Object)     Dim lNewIndex As Long      lNewIndex = cmdBar.UBound + 1     Load cmdBar(lNewIndex)      cmdBar(lNewIndex).Align = 0     Set ctl = cmdBar(lNewIndex) End Sub  Private Sub Form_Load()     Call createCommandBars End Sub  Oke mungkin itu saja yang bisa saya bahas pada artikel kali ini, dan mudah-mudahan Anda benar-benar memutuskan cukup menggunakan Menu Editor untuk membuat menu :grin:.   Sample program bisa didownload disini.   Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["membuat menu","menu","menu bar","menu item","swing","VB6 SSubTmr","vbAccelerator CommandBar Control","vbAccelerator VB6 Explorer Bar","vbsmart menu xp"],
        "url": "http://coding4ever.net/blog/2010/03/03/membuat-menu-dengan-4-style-2/",
        "teaser": null
      },{
        "title": "Mengakses windows registry komputer lain",
        "excerpt":"Artikel kali ini terilhami dari salah satu postingan yang ada di forum vb bego, waktu itu Penanya memposting beberapa baris kode untuk mengakses mengakses windows registry komputer lain dan ternyata gagal saat dijalankan.   Adapun fungsi API yang digunakan adalah RegConnectRegistry.   Berhubung hal ini juga baru bagi saya, akhirnya saya pun memulai pencarian dan tentunya ditemanin mbah Goeoegle dan Alhamdulillah mendapatkan pencerahan :blush:.     Ternyata sebelum kita bisa mengakses fungsi RegConnectRegistry, terlebih dahulu kita harus memanggil fungsi API LogonUser dan ImpersonateLoggedOnUser.   Oke berikut kode lengkapnya :   Option Explicit  Private Declare Function LogonUser Lib \"advapi32.dll\" Alias \"LogonUserA\" (ByVal lpszUsername As String, ByVal lpszDomain As String, ByVal lpszPassword As String, ByVal dwLogonType As Integer, ByVal dwLogonProvider As Integer, ByRef phToken As Long) As Boolean Private Declare Function ImpersonateLoggedOnUser Lib \"advapi32.dll\" (ByVal hToken As Long) As Long  Private Declare Function RegConnectRegistry Lib \"advapi32.dll\" Alias \"RegConnectRegistryA\" (ByVal lpMachineName As String, ByVal hKey As Long, phkResult As Long) As Long  Private Declare Function FormatMessage Lib \"kernel32\" Alias \"FormatMessageA\" (ByVal dwFlags As Long, lpSource As Any, ByVal dwMessageId As Long, ByVal dwLanguageId As Long, ByVal lpBuffer As String, ByVal nSize As Long, Arguments As Long) As Long Private Const FORMAT_MESSAGE_FROM_SYSTEM As Long = &amp;H1000  Private Const LOGON32_PROVIDER_DEFAULT As Long = 0 Private Const LOGON32_LOGON_NEW_CREDENTIALS As Long = 9 Private Const ERROR_SUCCESS = 0&amp;  Private Const HKEY_CURRENT_USER = &amp;H80000001  Private Function apiErrorText(ByVal ErrNum As Long) As String     Dim msg As String     Dim nRet As Long      msg = Space$(1024)     nRet = FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM, ByVal 0&amp;, ErrNum, 0&amp;, msg, Len(msg), ByVal 0&amp;)     If nRet Then         apiErrorText = Left$(msg, nRet)     Else         apiErrorText = \"Error (\" &amp; ErrNum &amp; \") not defined.\"     End If End Function  Private Function validateLogin(ByVal username As String, ByVal password As String, Optional ByVal komputerTarget As String = \".\") As Boolean     Dim result As Long     Dim hToken As Long      If LogonUser(username, komputerTarget, password, LOGON32_LOGON_NEW_CREDENTIALS, LOGON32_PROVIDER_DEFAULT, hToken) Then         result = ImpersonateLoggedOnUser(hToken)     End If      validateLogin = result End Function  Adapun contoh untuk penggunaan fungsi diatas sebagai berikut :   Private Sub cmdRemoteRegistry_Click()     Dim lRet            As Long     Dim hRemoteReg      As Long      Dim komputerTarget  As String      komputerTarget = \"192.168.0.2\"      If validateLogin(\"lab-01\", \"rahasia\", komputerTarget) Then         lRet = RegConnectRegistry(komputerTarget, HKEY_CURRENT_USER, hRemoteReg)          If (lRet = ERROR_SUCCESS) Then             MsgBox \"Successfully connected to remote registry\"              'TODO : lakukan akses registry seperti biasa             'ex : MsgBox getFromWindowsRegistry(hRemoteReg, \"Software\\K4m4r82's Laboratory\\SLS\", \"version\")          Else             MsgBox \"Error:\" &amp; Err.LastDllError &amp; \" -&gt; \" &amp; apiErrorText(Err.LastDllError), vbExclamation, \"Akses registry error\"             Unload Me         End If     End If End Sub  Selain itu agar kode diatas berjalan dengan sempurna ada beberapa settingan yang harus disesuaikan dikomputer yang akan diremote.      Selain itu Windows Firewall juga harus dinonaktifkan      Adapun alternatif lain jika ingin Windows Firewall tetap aktif maka pilihan File and Printer Sharing harus diaktifkan      Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["File and Printer Sharing","fungsi API","ImpersonateLoggedOnUser","LogonUser","RegConnectRegistry","window firewall"],
        "url": "http://coding4ever.net/blog/2010/03/08/mengakses-windows-registry-komputer-lain/",
        "teaser": null
      },{
        "title": "Tips agar bisa scroll mouse di editor code vb6",
        "excerpt":"Ini mungkin tips lama tapi saya sendiri juga baru tau he he he :blush:, maklum soalnya udah ngerasa cukup dengan editor codenya vb6 walaupun kadang-kadang cukup mengganjal dihati klo lagi coding di java menggunakan eclipse/netbeans.   Benar-benar perbedaan editor code yang terlalu mencolox :grin: salah satunya kekurangannya adalah di editor code vb 6 enggak bisa scroll mouse, tapi dengan tips berikut kekurangan ini bisa kita tutupi.   Oke berikut langkah-langkahnya :             Tutup dulu program VBnya            Download Add-In MouseWheel Fix disini kemudian ekstrak di lokasi yang Anda inginkan, misal c:\\MouseWheel                   Setelah itu langsung menuju ke TKP kemudian copykan file VB6IDEMouseWheelAddin.dll ke windows\\system32 (jangan lupa diregister).            Jalankan lagi program VBnya, kemudian klik menu Add-Ins -&gt; Add-In Manager …                   Aktifkan Add-In MouseWheel Fix                   Selesai       Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["Add-In","MouseWheel","scroll mouse di editor code vb6"],
        "url": "http://coding4ever.net/blog/2010/03/10/tips-agar-bisa-scroll-mouse-di-editor-code-vb6/",
        "teaser": null
      },{
        "title": "Menampilkan daftar driver yang terinstall",
        "excerpt":"Salah satu cara termudah untuk menampilkan driver yang terinstall adalah dengan menggunakan command line driverquery.   Untuk mencoba perintah ini kita terlebih dahulu masuk ke command prompt,  kemudian ketik driverquery :      Hasil outputnya adalah seperti berikut :     jpg)   Selanjutnya kita akan menyimpan output perintah driverquery ke file text, memparsingnya dan kemudian menampilkannya ke program.   Untuk mempermudah parsing kita akan mengetikan perintah driverquery /nh /fo csv (parameter /nh menampilkan daftar driver tanpa kolom header dan /fo csv menampilkan dengan format csv) kemudian untuk menyimpan outputnya ke file text cukup menambahkan tanda &gt;.   Jadi perintah lengkap yang harus diketikkan di command prompt adalah sebagai berikut :   driverquery /nh /fo csv &gt; daftar_driver.txt  Contoh hasil output yang sudah tersimpan      dari gambar diatas terlihat bahwa pembatas/separator kolom menggunakan karakter koma (,) selain itu masing-masing isi kolom diapit karakter “ yang akan kita hilangkan pada saat ditampilkan.   Private Sub cmdGetListDriver_Click()     Dim fso         As Scripting.FileSystemObject     Dim Ts          As Scripting.TextStream     Dim arrKolom()  As String     Dim driverName  As String      Set fso = New Scripting.FileSystemObject     Set Ts = fso.OpenTextFile(\"c:\\daftar_driver.txt\", ForReading, False)     Do While Not Ts.AtEndOfStream         If InStr(1, Ts.ReadLine, \",\") &gt; 0 Then 'pastikan data mengandung karakter ,             arrKolom = Split(Ts.ReadLine, \",\") 'ingat seperatornya menggunakan karakter ,              driverName = arrKolom(1) 'deskripsi lengkap driver ada dikolom 1             driverName = Replace(driverName, Chr(34), \"\") 'hapus karakter \"              lstDriver.AddItem driverName 'tampilkan driver ke ListBox         End If     Loop     Ts.Close     Set Ts = Nothing     Set fso = Nothing End Sub  Selain itu jangan lupa tambahkan juga referensi Microsoft Scripting Runtime.   Contoh output :      Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["command prompt","daftar driver","driverquery","Microsoft Scripting Runtime"],
        "url": "http://coding4ever.net/blog/2010/03/12/menampilkan-daftar-driver-yang-terinstall/",
        "teaser": null
      },{
        "title": "Membuat store procedure, trigger dan view di Firebird",
        "excerpt":"Menyambung artikel sebelumnya kali ini kita akan membuat store procedure, trigger dan view di Firebird dengan bantuan tool IBExpert.   Secara ringkas definisi store procedure, trigger dan view sebagai berikut :           Store procedure = Sekumpulan perintah yang mempunyai nama dan disimpan sebagai objek dari database yang nantinya bisa kita panggil dari aplikasi                  Trigger = Store procedure khusus yang otomatis aktif/dijalankan pada saat event-event tertentu ketika sebuah aksi (INSERT, UPDATE, DELETE) menimpa sebuah tabel. Contoh event yang ada di Firebird :              Before Insert       After Insert       Before Update       After Update       Before Delete       After Delete                View = Pernyataan DML (khusus SELECT) yang mempunyai nama dan disimpan juga sebagai objek dari database. View juga bisa dipanggil dari aplikasi.       Untuk mempermudah memahami pembuatan store procedure, trigger dan view kita akan menyelesaikan kasus-kasus berikut:              Menambahkan data supplier (store prosedure)       Mendapatkan jumlah stok berdasarkan kode barang (store prosedure yang dijadikan sebagai fungsi)       Mengurangi jumlah stok pada saat proses penjualan (trigger)       Menampilkan informasi pembelian (view)           Oke kita langsung saja aktifkan database DB PS SWALAYAN WS, jika Anda lupa bagaimana mengaktifkannya Anda bisa main-main kesini.           Membuat store prosedur       Klik kanan node Procedures kemudian pilih menu New Procedure …              Setelah itu akan tampil editor NEW PROCEDURE                   Membuat store prosedur yang dijadikan sebagai fungsi       Langkah-langkah sama seperti membuat store procedure biasa hanya saja selain membuat variabel di tab Input Parameters kita juga WAJIB membuat variabel untuk menampung nilai kembalian (return value) di tab Output Parameters.                   Membuat trigger       Klik kanan node Triggers kemudian pilih menu New Trigger …              Setelah itu akan tampil editor NEW TRIGGER                   Membuat view       Klik kanan node Views kemudian pilih menu New View …              Setelah itu akan tampil editor NEW VIEW              Sampai disini kita sudah berhasil membuat store procedure, trigger dan view. Gimana ? simple bukan :)   dan sample database bisa didownload disini.   Artikel berikutnya insya Allah kita akan mencoba membahas penggunaan/pemanggilan store procedure dan view yang ada di artikel ini dari aplikasi.   Selamat mencoba :blush:   Referensi :      Store procedure   Trigger   View  ","categories": ["Firebird"],
        "tags": ["DELETE","dml","firebird","INSERT","store procedure","trigger","UPDATE","view"],
        "url": "http://coding4ever.net/blog/2010/03/15/membuat-store-procedure-trigger-dan-view-di-firebird/",
        "teaser": null
      },{
        "title": "Info Kajian Umum - PALESTINA, Kapan Kembali Ke Tangan Kita ?",
        "excerpt":"   Kajian Umum di Jogja PALESTINA, Kapan Kembali Ke Tangan Kita ?   Pemateri : Ust. Mahful Safarudin, Lc. (Pengajar di Ma’had Al-Irsyad Tengaran, Salatiga) Tempat : Musholla Teknik (Mustek), Fakultas Teknik UGM Hari, Tanggal : Sabtu, 20 Maret 2010   Jazakallahu khairan bagi Anda yang mau membantu penyebaran publikasi ini.  ","categories": [],
        "tags": ["Fakultas Teknik UGM","kajian umum","Musholla Teknik (Mustek)"],
        "url": "http://coding4ever.net/blog/2010/03/17/info-kajian-umum-palestina-kapan-kembali-ke-tangan-kita/",
        "teaser": null
      },{
        "title": "Contoh pemanggilan store procedure dan view firebird dari aplikasi",
        "excerpt":"Ini merupakan artikel puncax :grin: dari pengenalan firebird yang dilanjutkan dengan pembuatan store procedure (SP), trigger dan view dan kini saat kita membahas penggunaan SP dan view.   Untuk mengakses firebird dari aplikasi kita membutuhkan Firebird ODBC yang bisa didownload disini   1. Store Procedure   Disini kita akan mengakses SP proc_add_supplier yang mempunyai tiga parameter yaitu : nama, alamat dan telepon     Ada 2 cara untuk mengakses SP :   Private Sub cmdAksesSP_Click()     Dim strSql  As String      strSql = \"EXECUTE PROCEDURE proc_add_supplier('KoKom Armagedon', 'Yogyakarta', '0813 8176 xxxx')\"     conn.Execute strSql 'conn -&gt; variabel dengan tipe ADODB.Connection End Sub  EXECUTE PROCEDURE merupakan perintah bawaan firebird untuk mengakses store procedure jadi tidak semua database server mempunyai perintah ini.   Cara yang ke dua dengan menggunakan kombinasi objek ADODB.Command, ADODB.Parameter dan ADODB.Connection.   Private Function addSupplier(ByVal nama As String, ByVal alamat As String, ByVal telepon As String) As Boolean     Dim cmd     As ADODB.Command     Dim param   As ADODB.Parameter     Dim i       As Long      On Error GoTo errHandle      Set cmd = New ADODB.Command     cmd.ActiveConnection = Conn      Set param = cmd.CreateParameter(\"nama\", adVarChar, adParamInput, 30, nama)     cmd.Parameters.Append param      Set param = cmd.CreateParameter(\"alamat\", adVarChar, adParamInput, 50, alamat)     cmd.Parameters.Append param      Set param = cmd.CreateParameter(\"telepon\", adVarChar, adParamInput, 20, telepon)     cmd.Parameters.Append param      cmd.CommandText = \"proc_add_supplier\"     cmd.CommandType = adCmdStoredProc     cmd.Execute      addSupplier = True      For i = 0 To cmd.Parameters.Count - 1         cmd.Parameters.Delete (0)     Next      Set cmd = Nothing     Set param = Nothing      Exit Function errHandle:     addSupplier = False End Function  kemudian tinggal panggil seperti ini   Private Sub cmdAksesSP_Click()     Dim result  As Boolean      result = addSupplier(\"KoKom Armagedon\", \"Yogykarta\", \"0813 8176 xxxx\") End Sub  2. Store Procedure yang dijadikan fungsi   Store procedure yang kita akses adalah func_get_stok yang mempunyai parameter kode barang. Caranya mirip dengan cara ke dua untuk mengakses store procedure biasa.   Private Function getStokBarang(ByVal kodeBarang As String) As Long     Dim cmd     As ADODB.Command     Dim param   As ADODB.Parameter     Dim i       As Long      On Error GoTo errHandle      Set cmd = New ADODB.Command     cmd.ActiveConnection = conn      Set param = cmd.CreateParameter(\"kode_barang\", adVarChar, adParamInput, 20, kodeBarang)     cmd.Parameters.Append param      Set param = cmd.CreateParameter(\"stok\", adNumeric, adParamOutput)  'ini tambahan parameter yg harus didaftarkan untuk menampung return value     param.Precision = 5     param.NumericScale = 2     cmd.Parameters.Append param      cmd.CommandText = \"func_get_stok\"     cmd.CommandType = adCmdStoredProc     cmd.Execute      getStokBarang = cmd.Parameters(\"stok\").Value 'membaca nilai kembalian fungsi (return value)      For i = 0 To cmd.Parameters.Count - 1         cmd.Parameters.Delete (0)     Next      Set cmd = Nothing     Set param = Nothing      Exit Function errHandle:     getStokBarang = 1 End Function  kemudian tinggal panggil seperti ini   Private Sub cmdAksesSP_Click()     Debug.Print \"jumlah stok : \" &amp; getStokBarang(\"12345\") End Sub  Variabel cmd, param dan i sebaiknya dideklarasikan di bagian [general declaration] jika akan digunakan lebih dari 1 kali.   3. View   Untuk mengakses view sama seperti memanggil query biasa, oleh karena itu kita membutuhkan variabel dengan tipe recordset untuk menampung hasil view/query.   Private Sub cmdAksesView_Click()     Dim rs      As ADODB.Recordset     Dim strSql  As String     Dim i       As Long      strSql = \"SELECT * FROM v_info_pembelian\" 'v_info_pembelian -&gt; nama view     Set rs = openRecordset(strSql)     If Not rs.EOF Then         For i = 1 To getRecordCount(rs)             Debug.Print \"Supplier : \" &amp; rs(\"nama\").Value &amp; vbCrLf &amp; _                         \"Alamat : \" &amp; rs(\"alamat\").Value &amp; vbCrLf &amp; _                         \"Nota : \" &amp; rs(\"nota\").Value &amp; vbCrLf &amp; _                         \"Tanggal \" &amp; Format(rs(\"tanggal\").Value, \"dd/MM/yyyy\")             rs.MoveNext         Next i     End If     Call closeRecordset(rs) End Sub  Sample program bisa didownload disini.   Selamat mencoba :blush:  ","categories": ["Firebird","Visual Basic"],
        "tags": ["Command","Connection","EXECUTE PROCEDURE","firebird","firebird odbc","fungsi","store procedure","view"],
        "url": "http://coding4ever.net/blog/2010/03/19/contoh-pemanggilan-store-procedure-dan-view-firebird-dari-aplikasi/",
        "teaser": null
      },{
        "title": "Bermain-main dengan windows service",
        "excerpt":"   SC is a command line program used for communicating with the NT Service Controller and services.    Ya dengan memanfaatkan tool ini** **kita bisa dengan mudah melakukan hal-hal berikut :      Menampilkan daftar service   Menghentikan service   Menjalan service   Menghapus service   Jika pada artikel sebelumnya kita sudah berhasil mendaftarkan aplikasi kita sebagai service, pada artikel ini kita akan membuat program dengan fitur diatas.   Artikel ini sendiri merupakan pengembangan dari artikel sebelumnya.     Sebelum kita masuk pada pembahasan inti kita akan bermain-main dulu dengan beberapa perintah SC berikut :   1. Menampilkan daftar service   sc query state= all  Contoh output yang dihasilkan      Informasi berharga yang kita dapatkan dari output diatas adalah SERVICE_NAME, DISPLAY_NAME dan STATE.   Langkah berikutnya kita akan meyimpan output ini ke file text yang mana akan kita olah via program, misal kita akan simpan dengan nama services.txt di lokasi drive c:.   sc query state= all &gt; c:\\service.txt  Contoh output setelah disimpan di file text      2. Menghentikan service   sc stop &lt;SERVICE_NAME&gt;  3. Menjalan service   sc start &lt;SERVICE_NAME&gt;  4. Menghapus service   sc delete &lt;SERVICE_NAME&gt;  Semua perintah SC yang dibutuhkan sudah kita dapatkan, sekarang kita masuk ke pembahasa inti.   Contoh program yang akan kita buat seperti berikut :      1. Prosedur untuk menjalankan command line   Private Declare Function OpenProcess Lib &amp;quot;kernel32&amp;quot; (ByVal dwDesiredAccess As Long, ByVal bInheritHandle As Long, ByVal dwProcessId As Long) As Long Private Declare Function WaitForSingleObject Lib &amp;quot;kernel32&amp;quot; (ByVal hHandle As Long, ByVal dwMilliseconds As Long) As Long Private Declare Function CloseHandle Lib &amp;quot;kernel32&amp;quot; (ByVal hObject As Long) As Long  Private Const SYNCHRONIZE       As Long = &amp;amp;H100000 Private Const INFINITE          As Long = &amp;amp;HFFFF  Private Sub execCommand(ByVal cmd As String)     Dim result  As Long     Dim lPid    As Long     Dim lHnd    As Long     Dim lRet    As Long      cmd = &amp;quot;cmd /c &amp;quot; &amp;amp; cmd     result = Shell(cmd, vbHide)      lPid = result     If lPid &lt;&gt;; 0 Then         lHnd = OpenProcess(SYNCHRONIZE, 0, lPid)         If lHnd &lt;&gt;; 0 Then             lRet = WaitForSingleObject(lHnd, INFINITE)             CloseHandle (lHnd)         End If     End If End Sub  Prosedur diatas tidak hanya menggunakan perintah Shell biasa tetapi juga menggunakan fungsi API OpenProcess dan WaitForSingleObject untuk mengetahui eksekusi perintah sudah selesai/belum.   Contoh penggunaan prosedur diatas   Private Sub cmdTes_Click()     Call execCommand(&amp;quot;sc stop MySQL&amp;quot;) 'menghentingan service mysql     Call execCommand(&amp;quot;sc start MySQL&amp;quot;) 'menjalankan service mysql     Call execCommand(&amp;quot;sc delete MySQL&amp;quot;) 'menghapus service mysql End Sub  2. Menampilkan service   Objek yang kita gunakan untuk menampilkan daftar service adalah ListView dan untuk iconnya disimpan di komponen ImageList.   Private Const REC_SPR           As String = &amp;quot;|&amp;quot; 'separator baris Private Const COL_SPR           As String = &amp;quot;#&amp;quot;  'separator kolom Private Const FILE_SERVICE      As String = &amp;quot;c:\\services.txt&amp;quot; 'file untuk menampung output perintah SC  Private Sub showService()     Dim i               As Long     Dim fileHandler     As Integer      Dim tmp1            As String     Dim tmp2            As String     Dim arrCol()        As String     Dim arrRec()        As String      Call execCommand(&amp;quot;sc query state= all &gt;; &amp;quot; &amp;amp; FILE_SERVICE)      fileHandler = FreeFile      Open FILE_SERVICE For Input As fileHandler     Do While Not EOF(fileHandler)         Input #fileHandler, tmp1         If Len(tmp1) &gt;; 0 Then             'ambil nama service             'nama service dibutuhkan untuk proses start, stop dan delete service             If Left(tmp1, 12) = &amp;quot;SERVICE_NAME&amp;quot; Then tmp2 = tmp2 &amp;amp; Mid$(tmp1, 15) &amp;amp; COL_SPR              'ambil informasi lengkap service             If Left(tmp1, 12) = &amp;quot;DISPLAY_NAME&amp;quot; Then tmp2 = tmp2 &amp;amp; Mid$(tmp1, 15) &amp;amp; COL_SPR              'state-&gt;; status service: stopped, running dan lain-lain             If InStr(1, tmp1, &amp;quot;STATE&amp;quot;) &gt;; 0 Then tmp2 = tmp2 &amp;amp; Mid$(tmp1, 25) &amp;amp; REC_SPR         End If     Loop     Close fileHandler      'contoh hasil perulangan diatas :     'postgresql-8.4#postgresql-8.4 - PostgreSQL Server 8.4#RUNNING|MySQL#MySQL#RUNNING     'SERVICE_NAME   DISPLAY_NAME                           STATE      If Len(tmp2) &gt;; 0 Then         tmp2 = Left(tmp2, Len(tmp2) - 1)          arrRec = Split(tmp2, REC_SPR) 'pecah var tmp2 menjadi beberapa baris, REC_SPR = |         With ListView1             .ListItems.Clear             For i = 0 To UBound(arrRec)                 If Len(arrRec(i)) &gt;; 0 Then                     arrCol = Split(arrRec(i), COL_SPR) 'pecah var arrRec menjadi beberapa kolom, COL_SPR = #                      'tampilkan ke listview                     .ListItems.Add , , arrCol(1), , 1 'DISPLAY_NAME                     .ListItems(i + 1).SubItems(1) = StrConv(arrCol(2), vbProperCase) 'STATE                     .ListItems(i + 1).SubItems(2) = arrCol(0) 'SERVICE_NAME                 End If             Next i         End With     End If End Sub  Private Sub Form_Load()     'inisialisasi listview     With ListView1         .View = lvwReport         .GridLines = True         .FullRowSelect = True         .SmallIcons = ImageList1 'inisialisasi ImageList          .ColumnHeaders.Add , , &amp;quot;Service&amp;quot;, 5000         .ColumnHeaders.Add , , &amp;quot;Status&amp;quot;, 1500          'kolom ini dibutuhkan untuk melakukan aksi terhadap service (start/stop service)         'widthny diset = 0         .ColumnHeaders.Add , , &amp;quot;ServiceName&amp;quot;, 0     End With End Sub  Selesai sudah pembahasan kita kali ini :), source code lengkap bisa didownload disini.   Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["bermain-main dengan windows service","imagelist","ListView","sc delete","sc start","sc stop"],
        "url": "http://coding4ever.net/blog/2010/03/22/bermain-main-dengan-windows-service/",
        "teaser": null
      },{
        "title": "Info lowongan programmer php",
        "excerpt":"Dear All,   Dengan ini kami kirimkan spesifikasi posisi  Programmer PHP di PT. Citrathirza Astarijaya (www.citrathirza.co.id)  yang dibutuhkan :      Mengenal  framework (menguasai Symfony merupakan nilai lebih)   Menguasai web design (css dan template)   Mampu membuat query atau stored procedure dalam  MySQL/PostgreSQL   Mengenal dan mampu memahami dokumentasi teknis (DAD, flowchart, mockups)   Bersedia bekerja di client (Jakarta)   Bagi yang  berminat silahkan kirimkan lamaran dan CV ke dendi@citrathirza.co.id   Terimakasih   Dendi  R  ","categories": [],
        "tags": [],
        "url": "http://coding4ever.net/blog/2010/03/24/info-lowongan-programmer-phpo/",
        "teaser": null
      },{
        "title": "Beberapa komponen Tab yang wajib dilirik",
        "excerpt":"1. vbAccelerator VB6 MDI Tab Component   Komponen ini digunakan untuk mengelompokan MDIChild form kedalam tab-tab. Contoh :      Contoh sourcecode penggunakan komponen ini diketik di MDIParent     Option Explicit  Private WithEvents m_cMDITabs   As cMDITabs  Public Sub closeChild(ByVal frmChild As Form)     On Error GoTo errHandle      Unload frmChild     m_cMDITabs.ForceRefresh      Exit Sub errHandle:     Call msgWarning(Err.Description) End Sub  Private Function formForHwnd(ByVal hwnd As Long) As Form     Dim frmChild As Form      On Error GoTo errHandle      For Each frmChild In Forms         If (frmChild.hwnd = hwnd) Then             Set formForHwnd = frmChild             Exit For         End If     Next      Exit Function errHandle:     Call msgWarning(Err.Description) End Function  Private Sub m_cMDITabs_CloseWindow(ByVal hwnd As Long)     Dim frm As Form      On Error GoTo errHandle      Set frm = formForHwnd(hwnd)     Unload frm     m_cMDITabs.ForceRefresh      Exit Sub errHandle:     Call msgWarning(Err.Description) End Sub  Private Sub MDIForm_Load()     Set m_cMDITabs = New cMDITabs     m_cMDITabs.Attach Me.hwnd End Sub  Selanjutnya untuk menutup MDIChild form, kita tinggal panggil public method closeChild milinya MDIParent :   Private Sub cmdSelesai_Click()     Call frmMain.closeChild(Me) End Sub  2. vbAccelerator VB6 VS Tab Control   Komponen ini digunakan untuk menggantikan komponen tab standar VB 6 (Microsoft Tabbed Dialog Control 6 dan TabStrip). Contoh :      Cara penggunaan komponen ini :   1. Tambahkan 2 atau lebih objek PictureBox kemudian ubah properties Namenya. Ex picTabPribadi dan picTabRiwayatJabatan   2. Tambahkan komponen vbAccelerator VB6 VS Tab Control kemudian kita ubah nambahnya menjadi tabMain      Untuk bagian kode program, tambahkan prosedur berikut :   Private Sub initTab()     Dim C As cTab      With tabMain         .ShowCloseButton = False         .AllowScroll = False         .TabAlign = TabAlignTop          Set C = .Tabs.Add(\"picTabPribadi\", , \"Data Pribadi\")         C.Panel = picTabPribadi          Set C = .Tabs.Add(\"picTabRiwayatJabatan\", , \"Riwayat Jabatan\")         C.Panel = picTabRiwayatJabatan     End With End Sub  Selanjutnya kita tinggal melakukan inisialisasi di event Form_Load :   Private Sub Form_Load()     Call initTab End Sub  Untuk komponen vbAccelerator VB6 MDI Tab Component membutuhkan library vbAccelerator VB6 Subclassing and Timer Assistant.   Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["MDIChild","MDIParent","vbAccelerator VB6 MDI Tab Component","vbAccelerator VB6 Subclassing and Timer Assistant","vbAccelerator VB6 VS Tab Control"],
        "url": "http://coding4ever.net/blog/2010/03/29/beberapa-komponen-tab-yang-wajib-dilirik/",
        "teaser": null
      },{
        "title": "Menambahkan skin pada paket instalasi (Inno Setup)",
        "excerpt":"Inilah krennya inno setup selain gratis dan open source juga banyak tersedia Third-Party Files, salah satunya ISSkin dari codejock.   Sebelum kita menambahkan skin, kita lihat dulu tampilan standar paket instalasi yang dibuat menggunakan inno setup.      Dan kita lihat setelah menambahkan skin        Gimana ? Menarik bukan ? :)   Oke langsung saja download sample ISSkin disini, ekstrak file ISSkinExample.zip dan terakhir jalankan file ISSkin.exe   Apakah cukup seperti itu saja ? Tentu tidak, kita harus menambahkan beberapa baris kode pada skrip inno setup di bagian [Files] dan [Code].   [Files] ; Add the ISSkin DLL used for skinning Inno Setup installations. Source: ISSkin.dll; DestDir: {app}; Flags: dontcopy  ; Add the Visual Style resource contains resources used for skinning, ; you can also use Microsoft Visual Styles (*.msstyles) resources. Source: Styles\\Office2007.cjstyles; DestDir: {tmp}; Flags: dontcopy  ; The following code block is used to load the ISS, pass in ; NormalAqua.ini as the second parameter to LoadSkin to use ; the Aqua color scheme instead of the default Blue color ; scheme. [Code] // Importing LoadSkin API from ISSkin.DLL procedure LoadSkin(lpszPath: String; lpszIniFileName: String); external 'LoadSkin@files:isskin.dll stdcall';  // Importing UnloadSkin API from ISSkin.DLL procedure UnloadSkin(); external 'UnloadSkin@files:isskin.dll stdcall';  // Importing ShowWindow Windows API from User32.DLL function ShowWindow(hWnd: Integer; uType: Integer): Integer; external 'ShowWindow@user32.dll stdcall';  function InitializeSetup(): Boolean; begin \tExtractTemporaryFile('Office2007.cjstyles'); \tLoadSkin(ExpandConstant('{tmp}\\Office2007.cjstyles'), 'NormalAqua.ini'); \tResult := True; end;  procedure DeinitializeSetup(); begin \t// Hide Window before unloading skin so user does not get \t// a glimse of an unskinned window before it is closed. \tShowWindow(StrToInt(ExpandConstant('{wizardhwnd}')), 0); \tUnloadSkin(); end;  Berikut adalah beberapa variasi skin hasil dari ngoprek kode berikut :   LoadSkin(ExpandConstant('{tmp}\\Office2007.cjstyles'), 'NormalAqua.ini');     LoadSkin(ExpandConstant('{tmp}\\Office2007.cjstyles'), 'NormalBlack.ini');     LoadSkin(ExpandConstant('{tmp}\\Vista.cjstyles'), 'NormalSilver.ini');     LoadSkin(ExpandConstant('{tmp}\\Vista.cjstyles'), '');  Selamat mencoba :blush:  ","categories": ["Inno Setup","Tools Installer"],
        "tags": ["codejock","inno setup","ISSkin"],
        "url": "http://coding4ever.net/blog/2010/03/31/menambahkan-skin-pada-paket-instalasi-inno-setup/",
        "teaser": null
      },{
        "title": "Menambahkan serial number pada paket instalasi (inno setup)",
        "excerpt":"Melengkapi koleksi artikel saya tentang pembuatan paket instalasi, kali ini kita akan menambahkan serial number pada paket instalasi yang kita buat menggunakan Inno Setup.   IKG (Inno Key Generator) adalah Third-Party files yang akan kita gunakan pada artikel ini dan Inno Setup yang saya gunakan adalah versi 5.0.8.   Silahkan Anda download IKG dari situs resminya atau bisa juga download disini tetapi saya lebih menyarankan Anda untuk  mendownload dari link ke dua saja :grin: karena sudah saya seleksi file-file apa saja yang dibutuhkan.     Jika sudah selesai downloadnya silahkan Anda ekstrak file IKG.rarnya, berikut adalah penjelasan singkat tentang file-file yang ada di dalam file IKG.rar      ISID.dll, file ini dibutuhkan untuk melakukan validasi serial number/unlock code yang diinputkan pada saat proses instalasi, otomatis harus kita sertakan pada saat pembuatan paket instalasi.   IKG.exe adalah tool untuk mengenerate file Inno Key yang berisi informasi user + serial number valid yang sudah terenkripsi, jadi setiap paket instalasi yang kita buat membutuhkan file inno key yang unik (huhhhh report juga ya) namanya juga mau aman (walaupun tidak 100%) report sedikitkan engga pa2 kan (ralat 1 public key inno bisa untuk beberapa user name yg berbeda).   IKGHelp.pdf, klo yang ini kayaxnya enggak perlu saya jelasin.   Oke langsung saja Anda jalankan file IKG.exe, setelah itu akan tampil form berikut :      Langkah pertama yang harus kita lakukan adalah mengeset password IKG, agar tidak semua orang bisa menggunakan tool ini.   Klik menu File -&gt; Change Bank Password      Selanjutnya kita tinggal masukkan passwordnya      Untuk menyederhanakan pembahasan, informasi yang akan kita tambahkan pada saat instalasi kita batasi sebagai berikut :      Registered Name   Registered Company   Registration Code   Private Key   Maka konfigurasi yang harus kita set pada tool IKG adalah sebagai berikut :      Kita tinggal menginputkan informasi Registered Name dan Organisation, untuk informasi Registration Code dan Private Key sudah otomatis terisi.   Jika sudah kita langsung saja simpan file Inno Keynya, file ini berisi informasi Registered Name, Registered Company, Registration Code dan Private Key (sesuai setting diatas) yang sudah dienkripsi.         Jadi jika kita akan membuat file setup berikutnya, kita harus mengetik ulang informasi Registered Name dan Registered Company yang lain (unik) dan menyimpan ulang file Inno Key (sebaiknya dengan nama yang berbeda).   Sampai disini kita akan memasuki bagian yang paling menyenangkan yaitu coding :grin:. Kita akan menambahkan beberapa baris kode pada bagian [Files] dan [Code].   [Files] ;file klien-1.iky dihasilkan oleh tool IKG Source: klien-1.iky; DestDir: {tmp}; Flags: ignoreversion Source: ISID.dll; DestDir: {sys}; Flags: ignoreversion  [Code] function ValidateSerialNumber(InnoKeyFile, User, Orgn, ProdCode, HDD, MAC, PrivateKey, Serial: String): Boolean; external 'ValidateSerialNumber@files:ISID.dll stdcall';  const     INNO_KEY = 'klien-1.iky';  var \tUserPage   : TInputQueryWizardPage; \tUserValues : TArrayOfString;  procedure InitializeWizard(); begin \t{ create the custom page }     UserPage := CreateInputQueryPage(wpInfoBefore, 'Informasi Registrasi', 'Anda memerlukan user yang valid agar bisa melanjutkan proses instalasi', \t\t'Masukkan informasi registrasi (case sensitive), kemudian klik tombol Lanjut &gt;.');  \tUserPage.Add('Registered Name:', False); \tUserPage.Add('Registered Company:', False); \tUserPage.Add('Registration Code:', False); \tUserPage.Add('Private Key:', False);  \t{ Set default values }   \tSetArrayLength(UserValues, 4);   \tRegQueryStringValue(HKLM, 'Software\\Microsoft\\Windows\\CurrentVersion', 'RegisteredOwner', UserValues[0]);   \tRegQueryStringValue(HKLM, 'Software\\Microsoft\\Windows\\CurrentVersion', 'RegisteredOrganization', UserValues[1]);   \tif (UserValues[0] = '') and (UserValues[1] = '') then begin     \tRegQueryStringValue(HKCU, 'Software\\Microsoft\\MS Setup (ACME)\\User Info', 'DefName', UserValues[0]);     \tRegQueryStringValue(HKCU, 'Software\\Microsoft\\MS Setup (ACME)\\User Info', 'DefCompany', UserValues[1]);   \tend;    \t{ Try to find the settings that were stored last time (also see below). }   \tUserPage.Values[0] := GetPreviousData('Name', UserValues[0]);   \tUserPage.Values[1] := GetPreviousData('Company', UserValues[1]);   \tUserPage.Values[2] := GetPreviousData('Unlock', UserValues[2]);   \tUserPage.Values[3] := GetPreviousData('Private', UserValues[3]);  end;  procedure RegisterPreviousData(PreviousDataKey: Integer); begin   { Store the settings so we can restore them next time }   SetPreviousData(PreviousDataKey, 'Name', UserPage.Values[0]);   SetPreviousData(PreviousDataKey, 'Company', UserPage.Values[1]);   SetPreviousData(PreviousDataKey, 'Unlock', UserPage.Values[2]);   SetPreviousData(PreviousDataKey, 'Private', UserPage.Values[3]); end;  function ScriptDlgPages(CurPage: Integer; BackClicked: Boolean): Boolean; var   \tExpPath: String;  begin \tResult := True;  \tif (CurPage = UserPage.ID) then \tbegin         ExtractTemporaryFile(INNO_KEY);\t\t{ the public key file }  \t\tExpPath := ExpandConstant('{tmp}\\' + INNO_KEY);  \t\tResult := False;  \t  \tUserValues[0] := UserPage.Values[0]; \t\tUserValues[1] := UserPage.Values[1]; \t\tUserValues[2] := UserPage.Values[2]; \t\tUserValues[3] := UserPage.Values[3];  \t\tif (UserValues[0] = '') or (UserValues[1] = '') or (UserValues[2] = '') or (UserValues[3] = '') then \t\t\tMsgBox('No fields can be blank !', mbError, MB_OK) \t\telse \t\tbegin \t\t\tResult := ValidateSerialNumber(ExpPath, UserValues[0], UserValues[1], '', '', '', UserValues[3], UserValues[2]);  \t\t\tif (not Result) then \t\t\t\tMsgBox('Invalid Entry !', mbError, MB_OK);  \t\tend \tend end;  function NextButtonClick(CurPage: Integer): Boolean; begin   Result := ScriptDlgPages(CurPage, False); end;  function BackButtonClick(CurPage: Integer): Boolean; begin   Result := True;//ScriptDlgPages(CurPage, True); end;  function HasHtmlHelp(): Boolean; begin \t{ HHCTRL.OCX GUID } \tResult := RegValueExists(HKCR, 'CLSID\\{4662DAB0-D393-11D0-9A56-00C04FB68B66}\\InprocServer32', ''); end;  function HasNoHtmlHelp(): Boolean; begin \tResult := not HasHtmlHelp; end;  Jika sudah selesai silahkan compile (CTRL+F9) skrip inno setup Anda, dan ingat skrip diatas hanya potongan skrip inno setup. Contoh skrip yang lengkap bisa Anda lihat disini dan sini.     Jika kita mencoba memasukkan informasi registrasi yang salah, maka akan tampil pesan berikut :      Selamat mencoba :blush:  ","categories": ["Inno Setup","Tools Installer"],
        "tags": ["IKG","Inno Key Generator","inno setup","Third-Party Files"],
        "url": "http://coding4ever.net/blog/2010/04/05/menambahkan-serial-number-pada-paket-instalasi-inno-setup/",
        "teaser": null
      },{
        "title": "Tips mengatur posisi caption objek CommandButton",
        "excerpt":"Salah satu objek standar VB 6 yang kurang beruntung adalah CommandButton :grin:, sejak lahirnya memang tidak mewarisi  properties Alignment seperti saudaranya yg lainnya (ex. TextBox, Label, de el  el) untungnya bisa memilih teman yg tepat dan bisa diandalkan :grin: siapa lagi kalo bukan fungsi API,  sehingga kekurangan ini pun akhirinya bisa ditutupi.   Oke, tambahkan sebuah modul di project Anda, kemudian copy paste kode berikut  :     Public Enum AlignButton     A_CENTER = &amp;H300&amp;     A_TOP = &amp;H400&amp;     A_TOPLEFT = &amp;H500&amp;     A_TOPRIGHT = &amp;H600&amp;     A_BOTTOM = &amp;H800&amp;     A_BOTTOMLEFT = &amp;H900&amp;     A_BOTTOMRIGHT = &amp;HA00&amp;     A_LEFT = &amp;H100&amp;     A_RIGHT = &amp;H200&amp; End Enum  Private Declare Function GetWindowLong Lib \"user32\" Alias \"GetWindowLongA\" (ByVal hwnd As Long, ByVal nIndex As Long) As Long Private Declare Function SetWindowLong Lib \"user32\" Alias \"SetWindowLongA\" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long Private Const GWL_STYLE&amp; = (-16)  Public Sub setAlignButton(ByVal btn As CommandButton, ByVal alignment As AlignButton)     Dim ret     As Long      ret = GetWindowLong(btn.hwnd, GWL_STYLE) And Not 0     If ret Then        ret = SetWindowLong(btn.hwnd, GWL_STYLE, ret Or alignment)        If ret Then btn.Refresh     End If End Sub  Kemudian pada form tambahkan beberapa objek CommandButton dan ketik kode berikut pada event  Form_Load :   Private Sub Form_Load()     Call setAlignButton(Command1, A_LEFT)     Call setAlignButton(Command2, A_TOP)     Call setAlignButton(Command3, A_RIGHT)     Call setAlignButton(Command4, A_BOTTOM) End Sub  dan hasilnya      Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["caption","commandbutton","GetWindowLong","posisi","setAlignButton","SetWindowLong"],
        "url": "http://coding4ever.net/blog/2010/04/09/tips-mengatur-posisi-caption-objek-commandbutton/",
        "teaser": null
      },{
        "title": "Smart Library School (Beta)",
        "excerpt":"What is Smart Library School ?   Smart Library School (SLS) adalah sistem informasi perpustakaan sekolah yang dibuat dan kembangkan menggunakan bahasa pemrograman Visual Basic 6 dan database Firebird, sifatnya freeware (tetapi bukan produk open source).   Saat ini masih versi beta 1 dan insya Alloh dalam waktu dekat versi beta 2 menyusul karena masih ada beberapa fitur yg belum sempat saya kerjakan.   Modul   Smart Library School mempunyai modul yang sangat lengkap dengan tampilan yang user friendly sehingga tidak kalah bersaing dengan software-software perpustakaan sekolah yang komersial.   Adapun modul-modulnya sebagai berikut :        Aplikasi Pendukung   Rencananya saya akan menambahkan aplikasi buku tamu dengan fitur sebagai berikut :      Mencatat data tamu (pembaca, pengunjung dan pengguna internet)   Pencarian buku   Download      Petunjuk Instalasi (1.3 MB)        Setup Instalasi              SetupSLS (6.2 MB), setup ini Anda download jika komputer Anda sudah terinstall database Firebird 2 atau Anda sudah memiliki master database Firebird 2       SetupSLSFullPackage (10.5 MB), aplikasi SLS + database Firebird 2           Alternatif link :              Petunjuk Instalasi       SetupSLS       SetupSLSFullPackage           Petunjuk Penggunaan Program   Screenshot                        Laporan bug/error   Berhubung ini masih versi beta, kemungkinan masih banyak error/bug yang ditemukan jadi saya senang sekali jika ada yang menginformasikannya ke k4m4r82@yahoo.com dengan subjek : bug sls.   » Update «   Smart Library School versi stabil sudah rilis, bisa dilihat di SINI   Selamat mencoba :blush:  ","categories": ["Freeware"],
        "tags": ["sistem informasi perpustakaan sekolah gratis","sls","Smart Library School"],
        "url": "http://coding4ever.net/blog/2010/04/10/smart-library-school-beta/",
        "teaser": null
      },{
        "title": "Membuat kalender nasional sendiri",
        "excerpt":"Kali kita akan membuat program untuk mengenerate kalender ke format Ms Excel sesuai tahun yang dipilih, kan lumayan enggax perlu download^2 lagi di internet.   Sample program sederhana ini sudah bisa mendeteksi hari minggu dan tahun kabisat, untuk hari libur lainnya seperti hari libur nasional harus dientri secara manual (via database :grin:), berhubung source codenya lumayan buanyakk akan sangat membosannya klo kita bahas.     Jadi kita sepakat ya enggak perlu bahas, gimana klo kita intip aja tampilannya :grin:      Lumayan mengecewakan :grin: apalagi klo menunggu proses ekspornya :sad: ditempat saya membutuhkan waktu sekitar 43 detik ya intinya tergantung speed komputernya, tetapi saya rasa seimbang dengan hasil yang didapatkan      Selamat MENCOBA :grin:  ","categories": ["Visual Basic"],
        "tags": ["kalender nasional","membuat kalender","Ms Excel","tahun kabisat"],
        "url": "http://coding4ever.net/blog/2010/04/13/membuat-kalender-nasional-sendiri/",
        "teaser": null
      },{
        "title": "Smart Library School (Beta 2)",
        "excerpt":"Smart Library School (SLS) beta 2 sudah rilis dengan perbaikan bug dan beberapa tambahan fitur baru :      Bug beta 1 bisa dilihat diSINI   Fitur baru            Cetak kartu anggota (Guru, Pegawai dan Siswa)       Cetak barcode kode inventaris       Cetak surat keterangan bebas perpustakaan       Validasi kesalahan login maksimal 3 x                      Screenshot Fitur Terbaru                                                             Download              Bagi yang sudah mendownload dan mencoba Smart Library School beta 1 bisa langsung download update beta 2 nya diSINI (2.02 MB)       SetupSLSBeta2 (6.2 MB), setup ini Anda download jika komputer Anda sudah terinstall database Firebird 2 atau Anda sudah memiliki master database Firebird 2       SetupSLSBeta2FullPackage (10.3 MB), aplikasi SLS + database Firebird 2       Petunjuk Instalasi           Laporan bug/error   Versi beta 2 ini kemungkinan masih banyak error/bug yang ditemukan jadi saya senang sekali jika ada yang menginformasikannya ke k4m4r82@yahoo.com dengan subjek : bug sls.   » Update «   Smart Library School versi stabil sudah rilis, bisa dilihat di SINI   Selamat mencoba :blush:  ","categories": ["Freeware"],
        "tags": ["barcode","beta 2","kartu anggota","Smart Library School","surat keterangan bebas perpustakaan"],
        "url": "http://coding4ever.net/blog/2010/04/19/smart-library-school-beta-2/",
        "teaser": null
      },{
        "title": "Contoh sederhana memanipulasi INI file untuk menyimpan informasi",
        "excerpt":"Ada banyak cara untuk menyimpan informasi yang dibutuhkan oleh aplikasi, kita bisa menyimpannya di registry windows, database atau cukup dengan memanfaatkan file teks biasa dengan format INI file.   Contoh kita akan menyimpan beberapa informasi berikut : serverName=informasi ip address server dbPath=lokasi database server Nama=Nama sekolah Alamat=Alamat sekolah Kota=Kota Sekolah    Berikut adalah contoh lengkap isi INI file yang berhubungan informasi di atas   [Sistem] serverName=192.168.1.1 dbPath=D:\\Proyek Eksternal\\SmartLibrarySchool\\Source\\Db  [Sekolah] Nama=SMU NEGERI YOGYAKARTA Alamat=Jl. Pogung Dalangan Kota=Yogyakarta  Untuk memudahkan kita menulis dan membaca file dengan format INI file kita membutuhkan 2 fungsi API yaitu :      WritePrivateProfileString (menulis)   GetPrivateProfileString (membaca)   Berikut deklarasi lengkap ke dua fungsi API tersebut   Private Declare Function WritePrivateProfileString Lib \"kernel32\" Alias \"WritePrivateProfileStringA\" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpString As Any, ByVal lpFileName As String) As Long Private Declare Function GetPrivateProfileString Lib \"kernel32\" Alias \"GetPrivateProfileStringA\" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long  Jika langsung menggunakan ke dua fungsi API tersebut rasanya kurang nyaman, sehingga kita akan membuat 2 buah prosedur/fungsi dengan nama yang lebih manusiawi.   Private Function readINI(ByVal fileName As String, ByVal sectionHeader As String, ByVal variableName As String, ByVal strDefault As String) As String     Dim buffer  As String     Dim x       As Long      buffer = String(255, 0)     x = GetPrivateProfileString(sectionHeader, variableName, strDefault, buffer, 255, fileName)     If x &lt;&gt; 0 Then         buffer = Left$(buffer, x)         readINI = buffer     Else         readINI = \"\"     End If End Function  Private Sub writeINI(ByVal fileName As String, ByVal sectionHeader As String, ByVal variableName As String, ByVal value As String)     Dim ret As Long      ret = WritePrivateProfileString(sectionHeader, variableName, value, fileName) End Sub  Cara menggunakan ke dua fungsi/prosedur diatas cukup gampang, contoh :   Private Const FILE_INI As String = \"konfig.ini\"  Private Sub cmdTulisFileINI_Click()     Call writeINI(App.Path &amp; \"\\\" &amp; FILE_INI, \"Sistem\", \"serverName\", \"192.168.1.1\")     Call writeINI(App.Path &amp; \"\\\" &amp; FILE_INI, \"Sistem\", \"dbPath\", \"D:\\Proyek Eksternal\\SmartLibrarySchool\\Source\\Db\")      Call writeINI(App.Path &amp; \"\\\" &amp; FILE_INI, \"Sekolah\", \"Nama\", \"SMU NEGERI YOGYAKARTA\")     Call writeINI(App.Path &amp; \"\\\" &amp; FILE_INI, \"Sekolah\", \"Alamat\", \"Jl. Pogung Dalangan\")     Call writeINI(App.Path &amp; \"\\\" &amp; FILE_INI, \"Sekolah\", \"dbPath\", \"Yogyakarta\") End Sub  Private Sub cmdBacaFileINI_Click()     MsgBox \"Server Name : \" &amp; readINI(App.Path &amp; \"\\\" &amp; FILE_INI, \"Sistem\", \"serverName\", \"\") &amp; vbCrLf &amp; _            \"DB Path : \" &amp; readINI(App.Path &amp; \"\\\" &amp; FILE_INI, \"Sistem\", \"dbPath\", \"\") End Sub  Contoh source code diatas dengan asumsi INI file (konfig.ini) disimpan difolder yang sama dengan aplikasi.    Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["fungsi API","GetPrivateProfileString","INI file","readINI","writeINI","WritePrivateProfileString"],
        "url": "http://coding4ever.net/blog/2010/04/23/contoh-sederhana-memanipulasi-ini-file-untuk-menyimpan-informasi/",
        "teaser": null
      },{
        "title": "Tips cara mengecek apakah Ms Excel sudah terinstall ?",
        "excerpt":"Jika Anda sering membuat laporan dengan format Ms Excel, maka adalah hal yang wajar jika sudah mengetahui cara ini tetapi jika belum juga jangan sungkan-sungkan untuk melanjutkan membaca artikel kali ini :grin:   Cara yang paling gampang adalah dengan mengecek key dibawah ini di windows registry :   HKEY_CLASSES_ROOT\\Excel.Application  Jika ditemukan berarti Ms Excel sudah terinstall, nah sekarang bagaimana cara mengimplementasikannya di Visual Basic 6.     Pertama adalah kita harus mendeklarsikan beberapa fungsi API dan konstanta untuk mengakses windows registry, berikut deklarasi lengkapnya :   Private Declare Function RegOpenKey Lib \"advapi32.dll\" Alias \"RegOpenKeyA\" (ByVal hKey As Long, ByVal lpSubKey As String, phkResult As Long) As Long Private Declare Function RegCloseKey Lib \"advapi32.dll\" (ByVal hKey As Long) As Long  Private Const HKEY_CLASSES_ROOT = &amp;H80000000  Kemudian kita buat sebuah fungsi, misal saja dengan nama isExcelInstalled   Private Function isExcelInstalled() As Boolean     Dim ret As Long      On Error GoTo errHandle      RegOpenKey HKEY_CLASSES_ROOT, \"Excel.Application\", ret     RegCloseKey ret      isExcelInstalled = (ret &lt;&gt; 0)      Exit Function errHandle:     isExcelInstalled = False End Function  Selanjutnya kita panggil fungsi diatas dengan cara berikut :   Private Sub cmdExportToXLS_Click()     If Not isExcelInstalled Then         MsgBox \"Maaf Ms Excel belum terinstall, proses ekspor batal\", vbExclamation, \"Peringatan\"      Else         'TODO : Lanjutkan proses ekspor     End If End Sub  Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["Excel.Applicatio","fungsi API","isExcelInstalled","Ms Excel","RegCloseKey","RegOpenKey"],
        "url": "http://coding4ever.net/blog/2010/04/26/tips-cara-mengecek-apakah-ms-excel-sudah-terinstall/",
        "teaser": null
      },{
        "title": "Membuat laporan dalam format Ms Excel plus ada gambarnya",
        "excerpt":"Artikel ini ditulis berdasarkan beberapa artikel favorit di blog ini :grin:, yaitu artikel INI dan ITU.   Inti pembahasan artikel kali ini adalah menampilkan gambar yang disimpan di database ke Ms Excel.   Untuk contoh disini kita akan menampilkan data siswa (nis, nama, alamat plus fotonya).   Ada banyak cara untuk menampilkan gambar di Ms Excel salah satunya dengan menggunakan prosedur berikut :     Private Sub addImage(ByVal objWBook As Object, ByVal imageName As String, ByVal kolom As String, ByVal iRow As Long, _                     ByVal width As Double, ByVal height As Double, _                     Optional minTop As Integer = 10, Optional plusLeft As Integer = 16, Optional worksheet As Long = 1)      Dim objPict As Object      Set objPict = objWBook.Worksheets(worksheet).Pictures.Insert(imageName)     With objPict         .Top = objWBook.Worksheets(worksheet).Range(kolom &amp; iRow).Top - minTop         .Left = objWBook.Worksheets(worksheet).Range(kolom &amp; iRow).Left + plusLeft         .width = width         .height = height     End With     Set objPict = Nothing End Sub  Kemudian untuk mengambil data berupa gambar dari database, prosedur yang digunakan adalah sebagai berikut :   Public Function getImageFromDB(ByVal query As String) As String     Dim sFile           As String      On Error GoTo errHandle      Set rsImage = New ADODB.Recordset     rsImage.Open query, conn, adOpenForwardOnly, adLockReadOnly     If Not rsImage.EOF Then         If Not IsNull(rsImage(0).Value) Then             nHandle = FreeFile              sFile = App.Path &amp; \"\\output.bin\"             If fileExists(sFile) Then Kill sFile             DoEvents              Open sFile For Binary Access Write As nHandle              lsize = rsImage(0).ActualSize             iChunks = lsize \\ CHUNK_SIZE             nFragmentOffset = lsize Mod CHUNK_SIZE              varChunk() = rsImage(0).GetChunk(nFragmentOffset)             Put nHandle, , varChunk()             For i = 1 To iChunks                  ReDim varChunk(CHUNK_SIZE) As Byte                   varChunk() = rsImage(0).GetChunk(CHUNK_SIZE)                  Put nHandle, , varChunk()                  DoEvents             Next             Close nHandle              getImageFromDB = sFile         End If     End If     Call closeRecordset(rsImage)      Exit Function errHandle:     getImageFromDB = \"\" End Function  Prosedur diatas merupakan revisi dari prosedur yang ada di artikel sebelumnya, perbedaannya hanya terletak pada return value (nilai kembaliannya) jika pada artikel sebelumnya return valuenya bertipe IPictureDisp sedang revisi prosedur pada artikel ini bertipe String.   Terakhir untuk mengekspor ke Ms Excel sekaligus contoh penggunaan ke dua prosedur diatas adalah sebagai berikut :   Private Sub cmdEkspor_Click()     Dim rs          As ADODB.Recordset      Dim objExcel    As Object     Dim objWBook    As Object     Dim objWSheet   As Object      Dim initRow     As Long     Dim strSql      As String      On Error GoTo errHandle      Screen.MousePointer = vbHourglass     DoEvents      'Create the Excel object     Set objExcel = CreateObject(\"Excel.application\") 'bikin object      'Create the workbook     Set objWBook = objExcel.Workbooks.Add      Set objWSheet = objWBook.Worksheets(1)     With objWSheet         initRow = 5          strSql = \"SELECT * FROM siswa\"         Set rs = conn.Execute(strSql)         If Not rs.EOF Then             Do While Not rs.EOF                 .cells(initRow, 5) = \"NIS\"                 .cells(initRow, 6) = \": \" &amp; rs(\"nis\").Value                  .cells(initRow + 1, 5) = \"Nama\"                 .cells(initRow + 1, 6) = \": \" &amp; rs(\"nama\").Value                  .cells(initRow + 2, 5) = \"Alamat\"                 .cells(initRow + 2, 6) = \": \" &amp; rs(\"alamat\").Value                  strSql = \"SELECT foto FROM siswa WHERE nis = '\" &amp; rs(\"nis\").Value &amp; \"'\"                 Call addImage(objWBook, getImageFromDB(strSql), \"C\", initRow, 45, 51, 12, 48)                  initRow = initRow + 5                 rs.MoveNext             Loop         End If         Call closeRecordset(rs)     End With      objExcel.Visible = True      If Not objWSheet Is Nothing Then Set objWSheet = Nothing     If Not objWBook Is Nothing Then Set objWBook = Nothing     If Not objExcel Is Nothing Then Set objExcel = Nothing      Screen.MousePointer = vbDefault      Exit Sub  errHandle:     If Not objWSheet Is Nothing Then Set objWSheet = Nothing     If Not objWBook Is Nothing Then Set objWBook = Nothing     If Not objExcel Is Nothing Then Set objExcel = Nothing End Sub  Contoh hasil ekspor      Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["addImage","getImageFromDB","laporan dalam format ms excel"],
        "url": "http://coding4ever.net/blog/2010/04/28/membuat-laporan-dalam-format-ms-excel-plus-ada-gambarnya/",
        "teaser": null
      },{
        "title": "Smart Library School Stable Release",
        "excerpt":"Ini adalah rilis final Smart Library School versi 1 build 52, ada beberapa fitur baru yang saya tambahkan yaitu:      Buat format data   Impor data   Auto backup data   Manual backup data   Fitur 1 dan 2 untuk memudahkan menginput data master, adapun modul master yang saya tambahkan untuk fitur ini adalah master Anggota (guru, pegawai dan siswa), Pengarang, Penerbit, Supplier, Lokasi rak, Kategori Buku dan Buku.        setelah menjalankan menu tersebut akan dibuatkan otomatis form pengisian data dengan format Ms Excel      hasil file excel pada gambar 2 langsung bisa diimpor melalui menu Impor data      Untuk fitur Auto backup saya memanfaatkan tool backup gratis FIBS 2.0.1. Fitur ini saya set akan aktif setiap jam 12:00 sedangkan untuk fitur backup manual saya hanya memanfaatkan fasilitas context menu biasa.      Agar proses instalasi lebih mudah, bagi yang ingin menggunakan SLS lebih dari 1 komputer, maka file instalasi saya bagi 2 yaitu file instalasi untuk klien dan server.   Link download      Petunjuk instalasi klien (1.24 MB) dan server (1.24 MB)   File instalasi klien (6 MB) dan server (10.9 MB)   Quick Referensi adalah petunjuk ringkas penggunaan Smart Library School (manual lengkap belum sempat saya kerjakan :grin:). Quick Referensi ini insya Allah saya posting pada postingan berikutnya.   Pengembangan versi berikutnya   Pengembangan Smart Library School tidak akan berhenti sampai disini, jika Anda punya ide/fitur-fitur baru yang ingin ditambahkan pada versi berikutnya silahkan diinformasikan di bagian komentar.   Selamat mencoba :blush:  ","categories": ["Freeware"],
        "tags": ["Auto backup","FIBS 2.0.1","Smart Library School Stable Release"],
        "url": "http://coding4ever.net/blog/2010/05/09/smart-library-school-stable-release/",
        "teaser": null
      },{
        "title": "Pengaturan Hak Akses Level Menu",
        "excerpt":"Salah satu fitur menarik yang sebaiknya dimiliki oleh aplikasi adalah fitur untuk pengaturan hak akses pengguna program. Contoh      Gambar diatas adalah fitur pengaturan hak akses yang dimiliki oleh aplikasi Smart Library School :grin:.     Artikel kali ini juga dibuat berdasarkan fitur tersebut dan tentunya sudah saya sensor agar layak untuk konsumsi umum :grin:.   Pertama kita akan buat rancangan tabelnya (operator, menu_induk dan menu_anak).   Berikut struktur lengkapnya :      Biar makin manteb kita liat juga contoh datanya :      Untuk menu program kita buat pake Menu Editor aja biar lebih simple, nah sekarang bagaimana caranya mengaktifkan/menonaktifkan menu sesuai dengan hak akses yang dimiliki oleh operator.   Query untuk mendapatkan hak akses masing-masing operator lebih kurang seperti berikut :   SELECT hak_akses FROM operator WHERE operator = ‘NAMA_OPERATOR’  Kemudian kita buat sebuah prosedur misal dengan nama disableMenu   Private Sub disableMenu(ByVal fMain As Form, ByVal hakAkses As String)     Dim ctl     As Control     Dim rsMenu  As ADODB.Recordset      strSql = \"SELECT menu_name \" &amp; _              \"FROM menu_anak \" &amp; _              \"WHERE id NOT IN (\" &amp; hakAkses &amp; \") \" &amp; _              \"ORDER BY id\"     Set rsMenu = openRecordset(strSql)     If Not rsMenu.EOF Then         Do While Not rsMenu.EOF             For Each ctl In fMain.Controls                 If TypeName(ctl) = \"Menu\" Then                     If ctl.Name = rsMenu(\"menu_name\").Value Then                         ctl.Enabled = False                         Exit For                     End If                 End If             Next              rsMenu.MoveNext         Loop     End If     Call closeRecordset(rsMenu) End Sub  Nah query + prosedur diatas ini kita letakkan di bagian frmLogin      Private Sub cmdLogin_Click()     Dim objOperator     As clsOperator     Dim statusOperator  As STATUS_OPERATOR     Dim hakAkses        As String      If isEmptyText(txtOperator, \"Operator\") Then Exit Sub     If isEmptyText(txtPassword, \"Password\") Then Exit Sub      Set objOperator = New clsOperator     With objOperator         .operator = txtOperator.Text         .password = txtPassword.Text          statusOperator = .isValidUser         hakAkses = .hakAkses     End With     Set objOperator = Nothing      Select Case statusOperator         Case OP_TDK_DITEMUKAN             Call msgWarning(\"Operator belum terdaftar !!!\")             txtOperator.SetFocus          Case OP_PASS_SALAH             Call msgWarning(\"Password salah\")             txtPassword.SetFocus          Case OP_PASS_OK             Call disableMenu(frmMain, hakAkses) 'panggil prosedur disableMenu disini             frmMain.Show              Unload Me     End Select End Sub  Selanjutnya kita switch ke bagian manipulasi data operator, berikut tampilannya :      Untuk tombol Tambah, Perbaiki dan Hapus diabaikan saja dan kita fokus pada tombol Hak Akses   Private Function getSelectedMenu(ByVal menuID As Long, ByVal hakAkses As String) As Long     Dim arrMenuAkses()  As String     Dim strMenuID       As String      Dim pos             As Long      If Not Len(hakAkses) &gt; 0 Then         getSelectedMenu = 0      Else         If InStr(1, hakAkses, \",\") &gt; 0 Then             arrMenuAkses = Split(hakAkses, \",\")              If menuID = arrMenuAkses(LBound(arrMenuAkses)) Then                 strMenuID = menuID &amp; \",\"              ElseIf menuID = arrMenuAkses(UBound(arrMenuAkses)) Then                 strMenuID = \",\" &amp; menuID              Else                 strMenuID = \",\" &amp; menuID &amp; \",\"             End If          Else             strMenuID = CStr(menuID)         End If          pos = InStr(1, hakAkses, strMenuID)         getSelectedMenu = IIf(pos &gt; 0, 1, 0)     End If End Function  Private Sub showMenu(ByVal operator As String, ByVal tree As XTreeOpt)     Dim rsMenuInduk     As ADODB.Recordset     Dim rsMenuAnak      As ADODB.Recordset      Dim selectedMenu    As Long     Dim keyChild        As String     Dim daftarHakAkses  As String      'ambil hak akses operator     strSql = \"SELECT hak_akses FROM operator WHERE operator = '\" &amp; rep(operator) &amp; \"'\"     daftarHakAkses = CStr(dbGetValue(strSql, \"1,2,3\")) '1,2,3 -&gt; hak akses default      With tree         .Clear          .AddCheck \"mnuAll\", , \"Daftar Menu Program\", , True          'menampilkan menu induk         strSql = \"SELECT id, menu_name, menu_caption \" &amp; _                  \"FROM menu_induk \" &amp; _                  \"ORDER BY id\"         Set rsMenuInduk = openRecordset(strSql)         If Not rsMenuInduk.EOF Then             Do While Not rsMenuInduk.EOF                 .AddCheck rsMenuInduk(\"menu_name\").Value, .Nodes(\"mnuAll\"), rsMenuInduk(\"menu_caption\").Value, , True                  'menampilkan menu anak                 strSql = \"SELECT id, menu_name, menu_caption \" &amp; _                          \"FROM menu_anak \" &amp; _                          \"WHERE menu_induk_id = \" &amp; rsMenuInduk(\"id\").Value &amp; \" \" &amp; _                          \"ORDER BY id\"                 Set rsMenuAnak = openRecordset(strSql)                 If Not rsMenuAnak.EOF Then                     Do While Not rsMenuAnak.EOF                         selectedMenu = getSelectedMenu(rsMenuAnak(\"id\").Value, daftarHakAkses)                          keyChild = \"K\" &amp; CStr(rsMenuAnak(\"id\").Value)                         .AddCheck keyChild, .Nodes(rsMenuInduk(\"menu_name\").Value), rsMenuAnak(\"menu_caption\").Value                         .Value(keyChild) = selectedMenu                          rsMenuAnak.MoveNext                     Loop                 End If                 Call closeRecordset(rsMenuAnak)                  rsMenuInduk.MoveNext             Loop         End If         Call closeRecordset(rsMenuInduk)          .ExpandAll         .Nodes(1).Selected = True     End With End Sub  Private Sub cmdHakAkses_Click()     With frmHakAkses         .operator = gridOP.TextMatrix(gridOP.Row, 1)         Call showMenu(.operator, .treeHakUser)          .Caption = \"Hak Akses : \" &amp; UCase(.operator)         .Show vbModal     End With End Sub  Contoh tampilan jika kita mengklik tombol Hak Akses      Komponen yang saya gunakan untuk menampilkan menu dalam bentuk hirarki diatas adalah komponen vbAccelerator VB6 Option Tree Control   Terakhir kita tutup dengan kode untuk menyimpan hak akses sesuai dengan menu yang dipilih.   Private Function getMenuID(ByVal strKode As String) As String     getMenuID = Right(strKode, Len(strKode) - 1) End Function  Private Sub cmdSimpan_Click()     Dim hakAkses   As String      Dim nodX        As Object     Dim nodY        As Object      Dim x           As Long     Dim y           As Long      Set nodX = treeHakUser.Nodes(1).Child     For x = 1 To treeHakUser.Nodes(1).Children         Set nodY = nodX.Child          For y = 1 To nodX.Children             If treeHakUser.Value(nodY.Index) = OptionTreeCheckFull Or treeHakUser.Value(nodY.Index) = OptionTreeCheckPartial Then                 hakAkses = hakAkses &amp; getMenuID(nodY.Key) &amp; \",\"             End If              Set nodY = nodY.Next         Next y          Set nodX = nodX.Next     Next x      If Len(hakAkses) &gt; 0 Then hakAkses = Left(hakAkses, Len(hakAkses) - 1)      If Not Len(hakAkses) &gt; 0 Then         MsgBox \"Minimal 1 hak akses untuk '\" &amp; UCase(operator) &amp; \"' harus dipilih\", vbExclamation, \"Peringatan\"      Else         strSql = \"UPDATE operator SET hak_akses = '\" &amp; hakAkses &amp; \"' WHERE operator = '\" &amp; rep(operator) &amp; \"'\"         conn.Execute strSql          MsgBox \"Perubahan hak akses '\" &amp; UCase(operator) &amp; \"' sudah disimpan.\", vbInformation, \"Informasi\"         Unload Me     End If End Sub  Eh tunggu dulu…. :grin: saya masih ada sedikit pertanyaan.   Gimana klo kita ingin menambah sub menu baru di bawah menu Laporan misal sub menu rekap pembelian dan rekap penjualan ?   Tentunya menu baru ini juga harus kita entrikan ke tabel menu_anak dan tentunya juga akan sedikit menyebalkan kalo ini dilakukan secara manual dan tentunya juga :grin: solusinya insya Allah akan kita bahas pada artikel berikutnya :grin:   Selamat MENCOBA :blush:  ","categories": ["Visual Basic"],
        "tags": ["hak akses","operator","Smart Library School","vbAccelerator VB6 Option Tree Control"],
        "url": "http://coding4ever.net/blog/2010/05/18/pengaturan-hak-akses-level-menu/",
        "teaser": null
      },{
        "title": "Mereset menu program",
        "excerpt":"Artikel ini dikhususkan bagi Anda yang sudah membaca artikel sebelumnya, mendownload sample program dan mencobanya, jika belum silahkan main-main dulu ke sini.   Coba tambahkan beberapa sub menu di menu laporan, misal kita akan menambahkan sub menu Laporan Rekap Pembelian, Rekap Penjualan dan Grafik Penjualan.   Jika sudah coba jalankan sample programnya kemudian bandingkan menu program dengan menu program yang tampil pada form pengaturan hak akses operator.      Terlihat bahwa menu baru yang kita tambahkan tidak tampil di form pengaturan hak akses. Agar menu baru tersebut tampil kita harus menambahkan data menu baru tersebut ke tabel menu_anak.        Klo sudah coba jalankan lagi sample programnya      Gimana ? :grin: hasilnya masih kurang memuaskan ya? Karena posisi menu di form pengaturan hak akses tidak sama dengan menu program.   Untuk menyelesaikan masalah ini kita harus mengurutkan ulang field ID di tabel menu_anak      Sekarang kita coba lagi jalankan sample programnya      Hasilnya sudah memuaskan tetapi sampai disini kita bisa menyimpulkan bahwa menambah/menghapus menu program adalah sesuatu yang mengerikan :grin:.   Oke untuk menyelesaikan masalah ini, kita akan membuat sebuah prosedur kecil di frmLogin. Misal dengan nama resetMenu.   Tugas prosedur ini sangat sederhana yaitu :      Membandingkan menu program dengan data menu yang tersimpan di tabel menu_anak, jika tidak sama hapus data menu di table menu_anak kemudian insert ulang   Jika terjadi perubahan menu, update ulang data hak akses khusus user ADMIN   Berikut cuplikan prosedur resetMenu   Private Sub resetMenu(ByVal frm As Form, ByRef hakAksesBaru As String)     Dim ctl             As Control      Dim parentMenuID    As Long     Dim childMenuID     As Long     Dim ret             As Long      Dim aksesMenuAdmin  As String      For Each ctl In frm.Controls         If TypeName(ctl) = \"Menu\" Then             If Not (InStr(ctl.Name, \"mnuSpr\") &gt; 0) Then 'abaikan menu separtor                 If ctl.Visible = True Then                     Select Case ctl.Name                         Case \"mnuMaster\", \"mnuTransaksi\", \"mnuBiaya\", \"mnuLaporan\", \"mnuPengaturan\"                             'abaikan menu induk                          Case Else 'yang diproses hanya menu anak                             If ctl.Enabled Then childMenuID = childMenuID + 1                     End Select                 End If             End If         End If     Next      strSql = \"SELECT COUNT(*) FROM menu_anak\"     ret = CLng(dbGetValue(strSql, 0))     If ret = childMenuID Then Exit Sub 'tidak ada penambah/pengurangan menu      'jika ada perubahan reset data menu_anak     strSql = \"DELETE FROM menu_anak\"     conn.Execute strSql     DoEvents      childMenuID = 1     For Each ctl In frm.Controls         If TypeName(ctl) = \"Menu\" Then             If Not (InStr(ctl.Name, \"mnuSpr\") &gt; 0) Then                 If ctl.Visible = True Then                     Select Case ctl.Name                         Case \"mnuMaster\": parentMenuID = 1                         Case \"mnuTransaksi\": parentMenuID = 2                         Case \"mnuBiaya\": parentMenuID = 3                         Case \"mnuLaporan\": parentMenuID = 4                         Case \"mnuPengaturan\": parentMenuID = 5                     End Select                      Select Case ctl.Name                         Case \"mnuMaster\", \"mnuTransaksi\", \"mnuBiaya\", \"mnuLaporan\", \"mnuPengaturan\"                             'abaikan menu induk                          Case Else                             If ctl.Enabled Then                                 strSql = \"INSERT INTO menu_anak (menu_induk_id, id, menu_name, menu_caption) VALUES (\" &amp; _                                          parentMenuID &amp; \", \" &amp; childMenuID &amp; \", '\" &amp; ctl.Name &amp; \"', '\" &amp; ctl.Caption &amp; \"')\"                                 conn.Execute strSql                                  aksesMenuAdmin = aksesMenuAdmin &amp; childMenuID &amp; \",\"                                  childMenuID = childMenuID + 1                             End If                     End Select                 End If             End If         End If     Next      If Len(aksesMenuAdmin) &gt; 0 Then aksesMenuAdmin = Left(aksesMenuAdmin, Len(aksesMenuAdmin) - 1)     hakAksesBaru = aksesMenuAdmin      'reset ulang hak akses khusus user admin     strSql = \"UPDATE operator SET hak_akses = '\" &amp; hakAksesBaru &amp; \"' WHERE operator = 'ADMIN'\"     conn.Execute strSql End Sub  Selanjutnya tinggal panggil prosedur tersebut di event cmdLogin_Click   Private Sub cmdLogin_Click()     Dim objOperator     As clsOperator     Dim statusOperator  As STATUS_OPERATOR     Dim hakAkses        As String      If isEmptyText(txtOperator, \"Operator\") Then Exit Sub     If isEmptyText(txtPassword, \"Password\") Then Exit Sub      Set objOperator = New clsOperator     With objOperator         .operator = txtOperator.Text         .password = txtPassword.Text          statusOperator = .isValidUser         hakAkses = .hakAkses     End With     Set objOperator = Nothing      Select Case statusOperator         Case OP_TDK_DITEMUKAN             Call msgWarning(\"Operator belum terdaftar !!!\")             txtOperator.SetFocus          Case OP_PASS_SALAH             Call msgWarning(\"Password salah\")             txtPassword.SetFocus          Case OP_PASS_OK             Call resetMenu(frmMain, hakAkses) 'pemanggilan prosedur resetMenu             Call disableMenu(frmMain, hakAkses)             frmMain.Show              Unload Me     End Select End Sub  Selamat MENCOBA :grin:  ","categories": ["Visual Basic"],
        "tags": ["menu anak","reset"],
        "url": "http://coding4ever.net/blog/2010/05/25/mereset-menu-program/",
        "teaser": null
      },{
        "title": "Memanfaatkan library IKG untuk membuat aktivasi + keygen",
        "excerpt":"Sebelumnya saya ucapkan terima kasih kepada salah seorang pengunjung blog saya yang sudah memberikan koreksi pada salah satu artikel saya yang berjudul Menambahkan serial number pada paket instalasi (inno setup).   Karena adanya koreksi itu saya jadi punya ide untuk menulis artikel ini :grin:   Oke kita langsung saja, file library yang akan kita gunakan disini adalah IKGCG.DLL (untuk generate serial number) dan ISID.DLL (untuk melakukan validasi serial number)   Langkah awal sebelum kita masuk ke bagian kode program adalah membuat file Inno Key yang berfungsi sebagai public key yang akan kita distribusikan bersama aplikasi.   Bagaimana cara membuat file Inno Key ini, Anda bisa merujuk ke artikel saya yang berjudul Menambahkan serial number pada paket instalasi (inno setup).     1. Membuat Form Keygen   Buat project baru kemudian desain tampilan seperti gambar berikut :      download file IKGCG.rar, ekstrak dan copykan ke folder project. Berikut adalah source code lengkapnya :   Option Explicit  Private Declare Function GenerateSerialNumber Lib \"IKGCG.DLL\" (ByVal innoKeyFile As String, ByVal User As String, ByVal Orgn As String, ByVal ProdCode As String, ByVal HDD As String, ByVal MAC As String, ByVal privateKey As String, ByVal UnlockCode As String) As Boolean  Private Function getSerialNumber(ByVal registeredName As String, ByVal organisation As String) As String     Dim innoKeyFile     As String     Dim privateKey      As String     Dim serialNumber    As String * 12     Dim ret             As Boolean      innoKeyFile = App.Path &amp; \"\\key.iky\"     privateKey = \"3D07966E-9AB4-4EBE-BF41-91C2D6611AC0\" 'nilai ini didapat pada saat pembuatan file inno key      ret = GenerateSerialNumber(innoKeyFile, registeredName, organisation, \"\", \"\", \"\", privateKey, serialNumber)     getSerialNumber = serialNumber End Function  Private Sub cmdGenerate_Click()     txtSerialNumber.Text = getSerialNumber(txtRegisteredName.Text, txtOrganisation.Text) End Sub  Hal penting yang perlu diperhatikan pada source code diatas adalah nilai variabel privateKey, nilai ini harus sama dengan nilai PRIVATE KEY pada saat membuat file Inno Key      2. Membuat Form Aktivasi      Setelah kita selesai mendesain tampilan seperti gambar diatas download file ISID.rar, ekstrak dan copykan ke folder project. Berikut kode lengkapnya :   Option Explicit  Private Declare Function ValidateSerialNumber Lib \"ISID.DLL\" (ByVal innoKeyFile As String, ByVal User As String, ByVal Orgn As String, ByVal ProdCode As String, ByVal HDD As String, ByVal MAC As String, ByVal privateKey As String, ByVal Serial As String) As Boolean  Public Function isValidSerialNumber(ByVal registeredName As String, ByVal organisation As String, ByVal serialNumber As String) As Boolean     Dim innoKeyFile     As String     Dim privateKey      As String     Dim ret             As Boolean      innoKeyFile = App.Path &amp; \"\\key.iky\"     privateKey = \"3D07966E-9AB4-4EBE-BF41-91C2D6611AC0\" 'nilai ini didapat pada saat pembuatan file inno key      isValidSerialNumber = ValidateSerialNumber(innoKeyFile, registeredName, organisation, \"\", \"\", \"\", privateKey, serialNumber) End Function  Public Sub Main()     Dim registeredName  As String     Dim organisation    As String     Dim serialNumber    As String      registeredName = GetSetting(\"MyApp\", \"Aktivasi\", \"RegisteredName\", \"\")     organisation = GetSetting(\"MyApp\", \"Aktivasi\", \"Organisation\", \"\")     serialNumber = GetSetting(\"MyApp\", \"Aktivasi\", \"SerialNumber\", \"\")      If isValidSerialNumber(registeredName, organisation, serialNumber) Then         'TODO : tampilkan form utama     Else         frmAktivasi.Show     End If End Sub  Selanjutnya tinggal pangil di form aktivasi seperti berikut :   Option Explicit  Private Sub cmdOk_Click()     If isValidSerialNumber(txtRegisteredName.Text, txtOrganisation.Text, txtSerialNumber.Text) Then         Call SaveSetting(\"MyApp\", \"Aktivasi\", \"RegisteredName\", txtRegisteredName.Text)         Call SaveSetting(\"MyApp\", \"Aktivasi\", \"Organisation\", txtOrganisation.Text)         Call SaveSetting(\"MyApp\", \"Aktivasi\", \"SerialNumber\", txtSerialNumber.Text)          MsgBox \"Aktivasi berhasil\", vbInformation, \"Informasi\"          'TODO : tampilkan form utama      Else         MsgBox \"Aktivasi gagal\", vbExclamation, \"Peringatan\"     End If End Sub  Private Sub Command1_Click()     Unload Me End Sub  Selamat MENCOBA :blush:  ","categories": ["Visual Basic"],
        "tags": ["aktivasi","IKG","inno setup","keygen","private key","public key","serial number"],
        "url": "http://coding4ever.net/blog/2010/05/31/memanfaatkan-library-ikg-untuk-membuat-aktivasi-keygen/",
        "teaser": null
      },{
        "title": "Menampilkan data dalam format grafik",
        "excerpt":"Kali ini saya akan share bagai mana menampilkan data dalam format grafik. Visual Basic sendiri sudah punya komponen untuk menghandle masalah ini tapi untuk artikel kali ini, saya menggunakan komponen grafik dari componentone dan untuk download komponennya bisa langsung ke SINI.   Sedangkan untuk sample kasus, kita akan menampilkan data statistik penerimaan mahasiswa baru, berikut tampilannya        berikut kode untuk pengaturan grafiknya, untuk contoh disini berupa grafik bar/batang :   Private Sub settingGrafik(ByVal Grafik As Chart2D, ByVal title As String, ByVal axesYTitle As String)     Grafik.Header.Text = title      ' Change Footer Formatting     Grafik.Footer.Font.Size = 9      ' Format the Y-axis to use Currency format     Grafik.ChartArea.Axes(\"Y\").LabelFormat.Category = oc2dCategoryStandard      ' Add Axes titles     Grafik.ChartArea.Axes(\"Y\").title = axesYTitle      With Grafik.ChartArea         .Bar.ClusterWidth = 60 'lebar bar grafik         .Bar.ClusterOverlap = -100 'jarak antar bar grafik     End With      With Grafik.Header         .Font.Size = 10         .Font.Bold = True     End With      ' Rotate the Y-Axis 90 degrees     Grafik.ChartArea.Axes(\"Y\").TitleRotation = oc2dRotate90Degrees      ' Add the legend to the chart     Grafik.Legend.IsShowing = True     Grafik.ChartGroups(1).ChartType = oc2dTypeBar 'jenis grafiknya diatur disini End Sub  Selanjutnya tinggal kita tampilkan grafiknya :   Private Sub cmdPrevGrafik_Click()     Dim numPoints   As Long     Dim numSeries   As Long      Dim iIndex      As Long     Dim iThn        As Long     Dim i           As Long     Dim jmlMhs      As Long      Grafik.Visible = False     DoEvents     With Grafik.ChartGroups(1).Data         .numSeries = UBound(arrJurusan) + 1 'set jumlah jurusan         .numPoints(1) = Val(cmbTahun2.Text) - Val(cmbTahun1.Text) + 1          numPoints = 0         iIndex = 0          Grafik.ChartLabels.RemoveAll         For iThn = Val(cmbTahun1.Text) To Val(cmbTahun2.Text)             numPoints = numPoints + 1             numSeries = 0             For i = LBound(arrJurusan) To UBound(arrJurusan)                 jmlMhs = getJumlahMhs(iThn, arrJurusan(i))                  numSeries = numSeries + 1                 .X(1, numPoints) = numPoints                 .Y(numSeries, numPoints) = jmlMhs                  Grafik.ChartLabels.Add                 iIndex = iIndex + 1                 With Grafik.ChartLabels(iIndex)                     .AttachMethod = oc2dAttachDataIndex                      .AttachDataIndex.Series = numSeries                     .AttachDataIndex.Point = numPoints                     .Text = jmlMhs                  End With             Next i         Next iThn     End With      With Grafik.ChartGroups(1).SeriesLabels         .RemoveAll          Grafik.Legend.Text = \"Jurusan\"         For i = LBound(arrJurusan) To UBound(arrJurusan)             .Add arrJurusan(i)         Next     End With      With Grafik.ChartGroups(1).PointLabels         'untuk menampilkan tahun         Grafik.ChartArea.Axes(\"X\").AnnotationMethod = oc2dAnnotatePointLabels         .RemoveAll         For i = Val(cmbTahun1.Text) To Val(cmbTahun2.Text)             .Add i         Next          Grafik.ChartArea.Axes(\"X\").title = \"T a h u n\"     End With      Grafik.Visible = True End Sub  Selamat MENCOBA :blush:  ","categories": ["Visual Basic"],
        "tags": ["chart","componenone","grafik","mahasiswa baru","Microsoft Chart"],
        "url": "http://coding4ever.net/blog/2010/06/09/menampilkan-data-dalam-format-grafik/",
        "teaser": null
      },{
        "title": "Mengenal lebih dekat database SQLite",
        "excerpt":"Biasanya nih bagi kita yang udah sering nyemplung di dunia pemrograman bahkan sampe kelelep :grin: pasti udah kenal yang namanya Ms Access dari Microsoft atau Paradox dari Borland.   Itu adalah beberapa contoh database standalone yang sudah sering kita gunakan, nah sekarang saya mengajak Anda untuk mengenal lebih dekat database standalone lainnya yaitu SQLite.   Dan tahukah Anda bahwa firefox juga menggunakan SQLite untuk mengelola data bookmarks dan historynya.   Jadi klo mau tau, apa saja fitur dari SQLite jangan malu-malu untuk segera mengklik link INI.   Pada artikel kali ini kita akan mencoba membuat database dan beberapa tabel di SQLite sesuai rancangan berikut :        Persiapan tool           Agar pembuatan database dan tabelnya lebih mudah dan menyenangkan, download dulu SQLite Managernya di sini.            Klo udah, install dan jalankan SQLite Managernya.       Membuat database dan tabel           Klik menu File -&gt; New Database                   Isikan lokasi penyimpan database dan alias pada kotak dialog Database Creation Properties                   Jika berhasil akan tampil nama database di node sebelah kiri, kemudian untuk membuat tabel baru klik menu Table -&gt; New Table                   Selanjutnya isikan informasi nama tabel, field berikut tipe datanya.                   Jika semua field yang dibutuhkan sudah lengkap, klik tombol Apply                   Jika berhasil nama tabel akan muncul di node sebelah kiri.              Membuat tabel dengan field auto number   Ada yang beda dengan SQLite dalam pembuatan field auto number, dimana SQLite mensyaratkan field auto numbernya harus bertipe INTEGER.   Oke kita akan ambil contoh pembuatan tabel ITEM_BELI, dimana tabel ini mempunyai field ID yang berfungsi untuk mencatat record transaksi pembelian.           Buat tabel sama seperti langkah-langkah sebelumnya                   Jika field sudah ditambahkan (ex. field ID), klik tab Indexes kemudian klik tombol Add                   Pada dialog New Index atur setingan field sesuai gambar                          Balik ke dialog Desing tabel kemudian klik tombol Apply              Membuat foreign key           Aktifkan tabel, klik tab Foreign Keys kemudian klik tombol Add                          Kembali ke dialog Design tabel kemudian klik tombol Apply              Untuk pembuatan tabel lainnya tinggal ulangi langkah-langkah sebelumnya. Contoh hasil akhir pembuatan tabel :              Membuat Trigger   Yang benar aja SQLite mendukung trigger ? Iya klo enggak percaya main-main aja ke sini.   Sample database lengkap bisa di download di sini.   » Update «   Ikuti juga artikel bagaimana cara mengakses database SQLite dari Visual Basic 6 di sini.   Selamat mencoba :blush:  ","categories": ["SQLite"],
        "tags": ["auto number","borland","Database","database standalone","foreign key","microsoft","ms access","paradox","sqlite","table","trigger"],
        "url": "http://coding4ever.net/blog/2010/06/14/mengenal-lebih-dekat-database-sqlite/",
        "teaser": null
      },{
        "title": "Source code sistem informasi sekolah",
        "excerpt":"Ini source code lama, jaman kuliah2xh dulu :grin: dibuat dalam rangka belajar membuat kelas (class) untuk akses database dan kebetulan waktu itu lagi liburan dan ada sample program yang bisa ditiru namanya Sahrya Siswa :grin:.   Ingat kata mbah Einstein “Mencontoh bukanlah salah satu cara untuk belajar, tapi satu – satunya cara untuk belajar” :grin:   Sahrya Siswa sendiri adalah produk komersil limit pemakaian 30 hari.   Source code ini juga sudah pernah saya publikasikan di milis indoprog-vb, sewaktu saya masih aktif disana.     Distribusi Source Code   Sisfo Siswa ini dibuat menggunakan Visual Basic 6.0 dan Ms Access 2000. Untuk memudahkan distribusi, source code + komponen2x pendukung saya jadikan dalam 1 paket instalasi, default folder source code ada di drive “c:\\SisFoSiswa”.   Login Aplikasi      User Name : ADMIN   Password : admin (case sensitive)     Modul Aplikasi   Sisfo Siswa mempunyai modul-modul sebagai berikut:      Master   Registrasi   Siswa   Absensi (dalam pengembangan)   Pembayaran (dalam pengembangan)   Rapor   STTB   Jadwal (dalam pengembangan)   Konfigurasi   Memulai Program   Berikut ini adalah urutan yang harus pertama kali Anda kerjakan setelah instalasi program.      Mengatur konfigurasi program.   Mengisi data master.   Mengatur user.   Membuat tahun ajaran.   Mengaktifkan periode belajar yang kini sedang berlangsung.   Membuat kelas-kelas untuk masing-masing tahun ajaran.   Melakukan registrasi siswa.   Menempatkan siswa ke kelas-kelas tujuan.   Untuk selanjutnya Anda dapat mengulangi langkah keempat sampai kedelapan di setiap tahun ajaran baru.   Setelah semua hal diatas Anda kerjakan maka Anda dapat memulai hal-hal dibawah ini.      Melengkapi data pribadi siswa dan catatan siswa.   Mencatat absensi siswa.   Mencatat pembayaran siswa (dalam pengembangan).   Mencatat nilai rapor &amp; STTB.   Membuat jadwal belajar (dalam pengembangan).   Laporan   Tidak ada menu khusus untuk laporan, setiap data ditampilkan dalam bentuk tabel/grid. Seperti daftar siswa dan daftar nilai mata pelajaran.   Setiap data yang ditampilkan dalam bentuk tabel/grid dapat diekspor datanya menjadi data Microsoft Excel, dengan cara meng-klik kanan grid yang bersangkutan dan pilih menu Kirim Data Ke Excel.   Sisfo Siswa akan mengekspor data dalam tabel/grid bila komputer Anda telah terinstalasi Microsoft Excel.   Screenshot      Selamat MENCOBA :blush:  ","categories": ["Visual Basic"],
        "tags": ["ms access","Sahrya Siswa","source code","source code sistem informasi sekolah"],
        "url": "http://coding4ever.net/blog/2010/06/17/source-code-sistem-informasi-sekolah/",
        "teaser": null
      },{
        "title": "Mengeset properties MaxLength TextBox secara otomatis",
        "excerpt":"Salah satu cara untuk memvalidasi inputan berupa TextBox dari user adalah dengan membatasi jumlah input sesuai dengan lebar field/kolom yang kita definisikan pada saat pembuatan struktur tabel.   Tentunya akan sedikit membosankan dan melelahkan jika kita akan membuat tampilan seperti form-form berikut :              kemudian mengeset properties MaxLength secara manual tentu pekerjaan yang berisiko tinggi ha ha ha :grin:, belum lagi jika terjadi perubahan lebar field/kolom pada struktur tabel.   Untuk mengimplementasikan teori diatas, maka kita membutuhkan 2 buah kelas/class yang saya beri nama clsAttribut dan clsAutoMaxLength.   Saya juga pernah menulis artikel sederhana bagai mana membuat kelas/class di Visual Basic 6.   Berikut adalah kode lengkap untuk clsAttribut   Option Explicit  Private mFieldName  As String Private mObjTextBox As TextBox  Public Property Let fieldName(ByVal vData As String)     mFieldName = vData End Property Public Property Get fieldName() As String     fieldName = mFieldName End Property  Public Property Let objTextBox(ByVal vData As TextBox)     Set mObjTextBox = vData End Property Public Property Get objTextBox() As TextBox     Set objTextBox = mObjTextBox End Property  dan dibawah ini adalah kode clsAutoMaxLength   Option Explicit  Private mFormName   As Form Private mCol        As Collection Private mTableName  As String  Public Property Let tableName(ByVal vData As String)     mTableName = vData End Property Public Property Get tableName() As String     tableName = mTableName End Property  Public Property Let formName(ByVal vData As Form)     Set mFormName = vData End Property Public Property Get formName() As Form     Set formName = mFormName End Property  Private Property Get getColumns(ByVal indexKey As Long) As clsAttribut     Set getColumns = mCol(indexKey) End Property  Private Function isFieldExists(ByVal fieldName As String, ByRef textBoxName As String) As Boolean     Dim objAttributs    As clsAttribut     Dim i               As Integer      Set objAttributs = New clsAttribut     For i = 1 To mCol.Count         Set objAttributs = getColumns(i)         If LCase(objAttributs.fieldName) = LCase(fieldName) Then             textBoxName = objAttributs.objTextBox.Name             isFieldExists = True              Exit For         End If     Next i     Set objAttributs = Nothing End Function  Private Function isTableExists() As Boolean     Dim rs      As ADODB.Recordset     Dim strSql  As String      On Error GoTo errHandle      strSql = \"SELECT * FROM \" &amp; tableName &amp; \"\"     Set rs = New ADODB.Recordset     rs.Open strSql, conn, adOpenForwardOnly, adLockReadOnly     rs.Close     Set rs = Nothing      isTableExists = True     Exit Function errHandle:     isTableExists = False End Function  Public Sub addAttributs(ByVal fieldName As String, ByVal objTextBox As TextBox)     Dim objNewMember As clsAttribut      Set objNewMember = New clsAttribut     objNewMember.fieldName = fieldName     objNewMember.objTextBox = objTextBox      mCol.Add objNewMember     Set objNewMember = Nothing End Sub  Public Sub autoMaxLength()     Dim rs              As ADODB.Recordset     Dim ctl             As Object      Dim strSql          As String     Dim textBoxName     As String      Dim i               As Integer      If isTableExists Then         strSql = \"SELECT * FROM \" &amp; tableName &amp; \"\"         Set rs = New ADODB.Recordset         rs.Open strSql, conn, adOpenForwardOnly, adLockReadOnly         For i = 0 To rs.Fields.Count - 1 'perulangan sejumlah field             'bandingkan field yg diinput manual dg yang di table             If isFieldExists(rs.Fields(i).Name, textBoxName) Then                 'ulang sebanyak komponen yg ada di form                 For Each ctl In formName.Controls                     'bandingkan textbox yg ada di form dg yg diinput manual                     If TypeName(ctl) = \"TextBox\" And ctl.Name = textBoxName Then                         ctl.MaxLength = rs.Fields(i).DefinedSize 'set MaxLength                         Exit For                     End If                 Next             End If         Next i         rs.Close         Set rs = Nothing      Else         MsgBox \"Nama tabel salah\", vbExclamation, \"Peringatan\"     End If End Sub  Private Sub Class_Initialize()     Set mCol = New Collection End Sub  Private Sub Class_Terminate()     Set mCol = Nothing End Sub  Contoh penggunaan ke dua kelas diatas sangatlah gampang cukup kita tambahkan 1 Form dan beberapa komponen TextBox, selanjutnya pada event Form_Load ketikkan kode berikut :   Private Sub Form_Load()     Dim obj As clsAutoMaxLength      Set obj = New clsAutoMaxLength     With obj         .formName = Me         .tableName = \"siswa\"          .addAttributs \"nis\", txtNIS         .addAttributs \"nama\", txtNama         .addAttributs \"alamat\", txtAlamat         .addAttributs \"telepon\", txtTelepon          Call .autoMaxLength     End With     Set obj = Nothing End Sub  Jalankan program dan properties MaxLength objek TextBox otomatis menyesuaikan dengan lebar field pada tabel.      Dan jangan lupa untuk mencoba source diatas program kita harus sudah terhubung ke database.   Selamat MENCOBA :blush:  ","categories": ["Visual Basic"],
        "tags": ["class","kelas","mengeset MaxLength otomatis","validasi textbox"],
        "url": "http://coding4ever.net/blog/2010/06/24/mengeset-properties-maxlength-textbox-secara-otomatis/",
        "teaser": null
      },{
        "title": "Membuat Y!M Translator sendiri",
        "excerpt":"Artikel kali ini merupakan pengembangan dari 2 artikel saya sebelumnya yaitu Menganalisa dan membuat mesin penjawab otomatis Y!M dan Manganalisa source code mesin penjawab otomatis Y!M versi 8, 9 &amp; 10.   Sebenarnya sih iseng-iseng aja dan ternyata berhasil ha ha ha :). Oke kita langsung saja, apa saja yg perlu disiapkan untuk membuat aplikasi ini :   1. Skrip php yang menyederhanakan proses parsing dari output Google Translate.   Alamat URLnya bisa diakses di http://amikom.ac.id/service.php?t=pesan_yg_ingin_diterjemankan&amp;l=target terjemahan.   Contoh penggunaan URL tersebut :   http://amikom.ac.id/service.php?t=rubah cokelat yang cepat melompat diatas anjing pemalas&amp;l=en        2. Yahoo! Messenger   3. Tool kesayangan kita Visual Basic :grin:   Untuk mengirim dan menerima hasil URLnya saya menggunakan komponen Microsoft Internet Controls (dari menu Project -&gt; Components -&gt; Microsoft Internet Controls), pembahasan tuntas bagaimana menerima dan membalas pesan yang masuk via Yahoo! Messenger sudah saya bahasa di dua artikel diatas.   Untuk pembahasan artikel kali ini saya fokuskan bagaimana menggunakan komponen Microsoft Internet Controls untuk mengirim dan menerima hasil URL      Mengirim URL   Private Sub cmdKirimURL_Click()     Dim url As String     Dim msg As String      msg = \"rubah cokelat yang cepat melompat diatas anjing pemalas\"      url = \"http://amikom.ac.id/service.php?t=\" &amp; msg &amp; \"&amp;l=en\"     WebBrowser1.navigate url End Sub  Hasilnya lebih kurang seperti berikut :      Untuk membaca hasil tersebut gunakan kode berikut :   Private Sub cmdBacaHasilURL_Click()     Dim terjemahan  As String      terjemahan = WebBrowser1.document.getElementById(\"translation\").innerHTML     MsgBox terjemahan End Sub     Mungkin muncul pertanyaan, darimana saya mendapatkan informasi element id “translation”, ada 2 cara yang saya ketahui :   1. Coba ketikkan secara manual alamat urlnya : http://amikom.ac.id/service.php?t=rubah cokelat yang cepat melompat diatas anjing pemalas&amp;l=en      seleksi hasil terjemahan, kemudian klik kanan pilih menu View Selection Source, setelah itu akan mendapatkan tampilan seperti berikut :      2. Ini cara yang paling gampang, tinggal nanya aja sama yang membuat skrip phpnya element idnya dikasih nama apa :grin:   Jadi dengan menggabungkan teknik sederhana ini plus dua artikel diatas, kita juga bisa membuat aplikasi Y!M Translator sendiri.   Berikut source code inti dari aplikasi Y!M Translate   Private Sub tmrAutoReplay_Timer()     Dim hwndYMMainClass     As Long      Dim msg                 As String     Dim ymID                As String     Dim url                 As String     Dim terjemahan          As String      On Error GoTo errHandle      Select Case ymVersion         Case \"8\"             hwndYMMainClass = FindWindow(\"YSearchMenuWndClass\", vbNullString)          Case \"9\"             hwndYMMainClass = FindWindow(\"ATL:007C07F0\", vbNullString)          Case \"10\"             hwndYMMainClass = FindWindow(\"CConvWndBase\", vbNullString)      End Select      If hwndYMMainClass &lt;&gt; 0 Then         ymID = getYMID(hwndYMMainClass)         msg = getYMMessage(hwndYMMainClass)          msg = Replace(msg, \"Bookmark\", \"\")          lstMessageIn.AddItem ymID &amp; \": \" &amp; msg         lstMessageIn.ListIndex = lstMessageIn.ListCount - 1          If Len(msg) &gt; 0 Then             url = \"http://amikom.ac.id/service.php?t=\" &amp; msg &amp; \"&amp;l=en\"              WebBrowser1.Navigate url             While WebBrowser1.ReadyState &lt; 4                 DoEvents: DoEvents: DoEvents             Wend             Call pause(1)              terjemahan = WebBrowser1.Document.getElementById(\"translation\").innerHTML              Call ymChatSend(hwndYMMainClass, \"&lt;#0A8EFE&gt;\" &amp; msg &amp; \"&lt;/#&gt; -&gt; &lt;b&gt;\" &amp; terjemahan &amp; \"&lt;/b&gt;\")             Call closeYM(hwndYMMainClass)         End If     End If      Exit Sub errHandle:     Call closeYM(hwndYMMainClass) End Sub           Selamat MENCOBA :blush:  ","categories": ["Visual Basic"],
        "tags": ["FindWindow","mesin penjawab otomatis","Microsoft Internet Controls","Y!M Translator"],
        "url": "http://coding4ever.net/blog/2010/06/29/membuat-ym-translator-sendiri/",
        "teaser": null
      },{
        "title": "Mengakses database SQLite menggunakan library dhSQLite",
        "excerpt":"Ada yang kurang di artikel sebelumnya, yaitu saya belum membahas bagaimana mengakses database SQLite dalam pembuatan aplikasi database.   Secara umum aksi yang sering dilakukan dalam pembuatan aplikasi database hanya seputar pernyataan DML (Insert, Update, Delete dan Select), jadi untuk menyederhanakan pembahasan saya pun membatasi artikel kali ini hanya seputar permasalahan tersebut.   Sebenarnya cukup dengan library ADO pun kita sudah bisa mengakses database SQLite, tetapi pada artikel kali ini saya menggunakan library dhSQLite.   Untuk mengakses database SQLite menggunakan dhSQLite kita cukup menggunakan 3 kelas yaitu :      cConnection, sesuai namanya kelas ini digunakan untuk membuat koneksi ke database   cRecordset, digunakan untuk menampung pernyataan select   cCommand, digunakan untuk mengeksekusi pernyataan insert, update dan delete     sedangkan untuk sample database bisa langsung Anda download disini.   1. Membuat koneksi   Tambahkan sebuah modul, kemudian ketik kode berikut :   Public Function openDb() As Boolean     On Error GoTo errHandle      Set conn = New cConnection     conn.openDb \"C:\\dbpos\\dbpos.db3\"     openDb = True      Exit Function errHandle:     openDb = False End Function  dengan asumsi database dbpos.db3 sudah ada di folder C:\\dbpos.   Untuk mencoba fungsi openDb diatas, kita akan memanfaat prosedur Main berikut :   Public Sub Main()     Dim ret As Boolean      ret = openDb     If ret Then         'TODO : tampilkan form utama     Else         MsgBox \"Koneksi gagal\", vbExclamation, \"Peringatan\"     End If End Sub  Tentunya agar prosedur Main tersebut bisa dijalankan, kita harus merubah Startup Object menjadi Sub Main.      2. Menambahkan data   Menambahkan data menggunakan objek cCommand sangat mudah sekali, lihat kode berikut :   Private Sub cmdSimpan_Click()     Dim cmd As cCommand      strSql = \"INSERT INTO barang (kode_barang, nama_barang, stok, harga_beli, harga_jual) VALUES (?, ?, ?, ?, ?)\"     Set cmd = conn.CreateCommand(strSql)     With cmd         .SetText 1, txtKodeBarang.Text         .SetText 2, txtNamaBarang.Text         .SetDouble 3, Val(txtStok.Text)         .SetDouble 4, Val(txtHargaBeli.Text)         .SetDouble 5, Val(txtHargaJual.Text)         .Execute     End With     Set cmd = Nothing End Sub  Mirip sekali bukan menambahkan data menggunakan interface PreparedStatement di java :grin:   Angka 1,2 .. 5 merupakan urutkan field pada pernyataan dml, sedangkan method yang dipanggil setelah berhasil menciptakan objek cCommand sesuai dengan tipe data field.   Contoh kode barang bertipe varchar, maka method yang dipanggil adalah SetText, sedangkan stok, harga beli dan harga jual bertipe numeric makanya method SetDouble yang dipanggil dan jika bertipe integer tinggal panggil aja method SetInt32 dan begitu seterusnya.   Oke kita lihat lagi pada pernyataan berikutnya.   3. Mengedit data   Private Sub cmdEdit_Click()     Dim cmd As cCommand      strSql = \"UPDATE barang SET nama_barang = ?, stok = ?, harga_beli = ?, harga_jual = ? \" &amp; _              \"WHERE kode_barang = ?\"     Set cmd = conn.CreateCommand(strSql)     With cmd         .SetText 1, txtNamaBarang.Text         .SetDouble 2, Val(txtStok.Text)         .SetDouble 3, Val(txtHargaBeli.Text)         .SetDouble 4, Val(txtHargaJual.Text)         .SetText 5, txtKodeBarang.Text         .Execute     End With     Set cmd = Nothing End Sub  4. Menghapus data   Private Sub cmdHapus_Click()     Dim cmd As cCommand      strSql = \"DELETE FROM barang WHERE kode_barang = ?\"     Set cmd = conn.CreateCommand(strSql)     With cmd         .SetText 1, txtKodeBarang.Text         .Execute     End With     Set cmd = Nothing End Sub  5. Menampilkan data   Untuk menampilkan data kita menggunakan pernyataan SELECT, dan ingat pernyataan SELECT mengembalikan data dalam bentuk recordset, sehingga kita harus membuat objek dengan tipe cRecordset.   Private Sub cmdTampilkan_Click()     Dim rs  As cRecordset      strSql = \"SELECT kode_barang, nama_barang, stok, harga_beli, harga_jual \" &amp; _              \"FROM barang \" &amp; _              \"ORDER BY nama_barang\"     Set rs = conn.OpenRecordset(strSql, True)     If Not rs.EOF Then         Do While Not rs.EOF             Debug.Print rs(\"kode_barang\").Value &amp; \", \" &amp; rs(\"nama_barang\").Value             rs.MoveNext         Loop     End If End Sub  6. Insert, Update dan Delete dalam jumlah banyak   Hati-hati jangan langsung mengunakan kode seperti berikut :   Private Sub cmdTest1_Click()     Dim cmd As cCommand     Dim i   As Integer      strSql = \"INSERT INTO tabel_test (no_urut) VALUES (?)\"      Set cmd = conn.CreateCommand(strSql)     For i = 1 To 1000         cmd.SetInt32 1, i         cmd.Execute     Next i     Set cmd = Nothing End Sub  hasil uji coba di laptop saya membutuhkan waktu sekitar 1 menitan, tetapi bandingkan jika menggunakan transaction   Private Sub cmdTest2_Click()     Dim cmd As cCommand     Dim i   As Integer      strSql = \"INSERT INTO tabel_test (no_urut) VALUES (?)\"      Set cmd = conn.CreateCommand(strSql)     conn.BeginTrans     For i = 1 To 1000         cmd.SetInt32 1, i         cmd.Execute          If i Mod 200 = 0 Then             conn.CommitTrans             DoEvents              conn.BeginTrans         End If     Next i     conn.CommitTrans     Set cmd = Nothing End Sub  hanya membutuhkan waktu 1 detik, wowww lumayan bedakan.   Oke terakhir untuk mencoba semua kode diatas, library dhSQLite harus sudah direferensikan di project kita.      Selamat mencoba :blush:  ","categories": ["SQLite","Visual Basic"],
        "tags": ["Database","DELETE","dhSQLite","INSERT","java","PreparedStatement","select","sqlite","UPDATE"],
        "url": "http://coding4ever.net/blog/2010/07/05/mengakses-database-sqlite-menggunakan-library-dhsqlite/",
        "teaser": null
      },{
        "title": "Membuat sms gateway itu gampang, jangan dipersulit !!!",
        "excerpt":"Berhubung banyaknya pengunjung yang nyasar ke blog ini, gara-gara keyword “sms gateway” saya jadi merasa bersalah klo enggax ikut-ikutan membahas artikel yang satu ini he he he :grin:.   Walaupun sudah banyak blog yang membahas tentang masalah ini, tapi kayaxnya tema “sms gateway” masih hangat dan saru eh… seru untuk dibahas :grin:, dan tentunya dengan adanya artikel ini saya berharap lebih banyak lagi yang tersesat ke blog ini :grin:.   Oke jadi kasusnya apa nih, kita ambil aja sample sederhana yaitu “pembuatan sms gateway untuk request nilai siswa” dan untuk menyederhanakan pembahasan keywordnya kita batasi saja yaitu request nilai tugas dan ulangan.   Apa yang harus di persiapkan, pertama kita rancang dulu databasenya dan berhubung artikel saya yang membahas tentang database SQLite masih hangat jadi untuk databasenya kita menggunakan SQLite saja.     SQLite adalah database standalone yang kecil, mungil dan gratis. Bagaimana cara membuat database di SQLite sudah saya bahas disini kemudian bagaimana mengaksesnya dari aplikasi juga sudah saya bahasa disini.   Berikut adalah rancangan sederhana database sms yang akan kita buat :      Ada banyak cara untuk membaca sms masuk dan membalasanya, salah satunya adalah menggunakan perintah AT COMMAND dan Microsoft sendiri sudah menyediakan komponen yang bisa mengeksekusi perintah-perintah tersebut.   Tentunya cara ini (menggunakan AT COMMAND) bukan cara yang favorit dikalangan programmer instan seperti Anda dan Saya :grin:, jadi diartikel ini saya menggunakan komponen pihak ketiga.      Ingat komponen ini adalah shareware, segala resiko (kemudahan dalam membuat aplikasi sms gateway) ditanggung sendiri :grin:, saya disini hanya share dan tidak terikat kerja sama dengan pihak ketiga tersebut.    Halah pernyataan ngawur :grin:   Berikut adalah cuplikan source code untuk membaca dan mengirim sms menggunakan komponen ActiveXpert SMS   1. Membaca SMS Masuk   Private Sub cmdBacaSMS_Click()     Dim objGsmIn        As ASmsCtrl.GsmIn      Set objGsmIn = New ASmsCtrl.GsmIn     With objGsmIn         .Activate \"XXX-XXXX-XXXX-XXXXX\"  'diisi serial number yg Anda dapatkan secara ilegal         .Device = \"COM1\" 'disesuaikan dengan port COM yang digunakan         .DeviceSpeed = 19200 'default = 0          .Storage = 2 '0=sim 1=device 2=any         .DeleteAfterReceive = True         .Receive          If .LastError = 0 Or .LastError = 23140 Then ' Success             .GetFirstMessage              While .LastError = 0                 Debug.Print \"Pengirim : \" &amp; .MessageSender                 Debug.Print \"Isi SMS : \" &amp; .MessageData                  'TODO : INSERT KE TABEL SMS_IN                  .GetNextMessage             Wend         End If     End With     Set objGsmIn = Nothing End Sub  2. Mengirim sms   Private Sub cmdKirimSMS_Click()     Dim objGsmOut       As ASmsCtrl.GsmOut     Dim objConstants    As ASmsCtrl.Constants      Set objGsmOut = New ASmsCtrl.GsmOut     Set objConstants = New ASmsCtrl.Constants      With objGsmOut         .Activate \"XXX-XXXX-XXXX-XXXXX\"  'diisi serial number yg Anda dapatkan secara ilegal         .Device = \"COM1\" 'disesuaikan dengan port COM yang digunakan         .DeviceSpeed = 19200 'default = 0         .RequestStatusReport = False          .MessageType = objConstants.asMESSAGETYPE_TEXT 'mengirim pesan maksimal 160 karakter         '.MessageType = objConstants.asMESSAGETYPE_TEXT_MULTIPART 'jika lebih dari 160 karakter gunakan opsi ini          .MessageRecipient = \"nomor tujuan\" 'biasanya menggunakan prefix +62         .MessageData = \"isi pesan\"         .Send 'kirim     End With      Set objConstants = Nothing     Set objGsmOut = Nothing End Sub  Jadi cukup dengan bermodalkan 2 cuplikan kode diatas kita akan menyelesaikan aplikasi yg dibahas pada artikel kali ini.   Adapun untuk keyword yang akan digunakan sebagai berikut :   1. Request nilai tugas   keyword : tgs#nis   contoh : tgs#9941224165   balasan : Nilai tugas (NAMA SISWA) : BI=95, IPA=75, IPS=80, MTK=85   2. Request nilai ulangan harian   keyword : uh#nis   contoh : uh#9941224165   balasan : Nilai ulangan (NAMA SISWA) : BI=95, IPA=75, IPS=80, MTK=85   Berikut penjelasan ringkas beberapa cuplikan source code yang digunakan dalam pembuatan aplikasi sms gateway ini.   Private Function connectToDevice(ByVal device As String) As Boolean     Dim objGsm      As ASmsCtrl.GsmOut     Dim manufaktur  As String      On Error GoTo errHandle      Set objGsm = New ASmsCtrl.GsmOut     With objGsm         .Activate SERIAL_NUMBER         .device = device          manufaktur = .SendCommand(\"AT+CGMI\", 500)  'menampilkan informasi manufactur         manufaktur = Replace$(manufaktur, vbCrLf, \"\")         manufaktur = Replace$(manufaktur, \"OK\", \"\")         manufaktur = Replace$(manufaktur, \"ERROR\", \"\")         manufaktur = Replace$(manufaktur, \"AT+CGMI\", \"\")     End With     Set objGsm = Nothing      If Len(manufaktur) &gt; 0 Then         txtModem.Text = manufaktur         connectToDevice = True     End If      Exit Function errHandle:     connectToDevice = False End Function  Sesuai namanya fungsi connectToDevice digunakan untuk mengecek status modem sms yang terpasang, salah satu caranya adalah dengan mengirimkan AT COMMAND “AT+CGM”, AT COMMAND ini berfungsi untuk mendapatkan informasi manufaktur.   Sebagai contoh jika modem sms yg digunakan adalah hp siemens maka nilai yg dihasilkan dari perintah ini adalah “SIEMENS” dan tentunya hp yg bersangkutan juga harus mendukung AT COMMAND.   Private Sub readSMS()     Dim objGsmIn        As ASmsCtrl.GsmIn     Dim objConstants    As ASmsCtrl.Constants     Dim cmd             As cCommand      Dim keyword         As String     Dim phoneNumber     As String     Dim i               As Integer      On Error GoTo errHandle      Screen.MousePointer = vbHourglass     cmdStop.Enabled = False     tmrReceiveSms.Enabled = False      DoEvents      Set objGsmIn = New ASmsCtrl.GsmIn     Set objConstants = New ASmsCtrl.Constants      With objGsmIn         .Activate SERIAL_NUMBER         .device = cmbPORT.Text         .DeviceSpeed = 0          .Storage = cmbStorage.ItemData(cmbStorage.ListIndex)         .DeleteAfterReceive = True 'hapus sms jika sudah dibaca         .Receive          If .LastError = 0 Or .LastError = 23140 Then 'baca sms sukses             .GetFirstMessage              strSql = \"INSERT INTO sms_in (phone_number, sms_keyword, date_in, time_in) VALUES (?, ?, ?, ?)\"             Set cmd = conn.CreateCommand(strSql)             conn.BeginTrans              i = 1             While .LastError = 0                 phoneNumber = rep0to62(.MessageSender)                 keyword = .MessageData                  cmd.SetText 1, phoneNumber                 cmd.SetText 2, keyword                 cmd.SetDate 3, Format(Now, \"yyyy/MM/dd\")                 cmd.SetTime 4, Format(Now, \"hh:mm:ss\")                  cmd.Execute                  If i Mod 10 = 0 Then                     conn.CommitTrans                     DoEvents                      conn.BeginTrans                 End If                  i = i + 1                  .GetNextMessage             Wend              conn.CommitTrans             Set cmd = Nothing          End If     End With     Set objGsmIn = Nothing      If cekSMSIn Then         Call sendSMS     Else         Call Wait(5000)     End If      cmdStop.Enabled = True     Screen.MousePointer = vbDefault      tmrReceiveSms.Enabled = True      Exit Sub errHandle:     tmrReceiveSms.Enabled = True End Sub  Prosedur readSMS digunakan untuk membaca sms masuk dan menyimpannya ke tabel sms_in, berhubung komponen ActiveXpert SMS tidak mempunyai event yg menandai adanya sms masuk maka sebagai gantinya kita menggunakan timer untuk memanggil prosedur readSMS.   Salah satu properties penting yang dimiliki oleh ActiveXpert SMS adalah DeleteAfterReceive, jika nilainya diset true maka sms yg masuk akan otomatis dihapus dan tentunya setelah smsnya dibaca.   Private Function cekSMSIn() As Boolean     Dim ret As Integer      strSql = \"SELECT COUNT(*) FROM sms_in WHERE status = 0\" 'jika status = 0 berarti sms masuk belum di proses     ret = CInt(dbGetValue(strSql, 0))     If ret &gt; 0 Then 'ada sms yg belum diproses         cekSMSIn = True     End If End Function  Prosedur cekSMSIn dibutuhkan oleh prosedur readSMS, jadi dengan adanya prosedur cekSMSIn ini program akan mengetahui kapan waktu yg tepat untuk memanggil prosedur sendSMS.   Private Sub sendSMS()     Dim rsSend          As cRecordset     Dim cmd             As cCommand      Dim objGsmOut       As ASmsCtrl.GsmOut     Dim objConstants    As ASmsCtrl.Constants      Dim phoneNumber     As String     Dim keyword         As String     Dim smsBalasan      As String      On Error GoTo errHandle      'cek sms yang belum di proses, ditandai dg status = 0     strSql = \"SELECT id, phone_number, sms_keyword \" &amp; _              \"FROM sms_in \" &amp; _              \"WHERE status = 0 \" &amp; _              \"ORDER BY id\"     Set rsSend = conn.OpenRecordset(strSql)     If Not rsSend.EOF Then         Set objGsmOut = New ASmsCtrl.GsmOut         Set objConstants = New ASmsCtrl.Constants          objGsmOut.Activate SERIAL_NUMBER         objGsmOut.device = cmbPORT.Text         objGsmOut.DeviceSpeed = 0         objGsmOut.RequestStatusReport = False         objGsmOut.MessageType = objConstants.asMESSAGETYPE_TEXT_MULTIPART          Do While Not rsSend.EOF             'ganti prefix nomor hp 0 -&gt; +62             phoneNumber = rep0to62(\"\" &amp; rsSend(\"phone_number\").Value)             keyword = rsSend(\"sms_keyword\").Value              smsBalasan = getBalasanSms(keyword, phoneNumber)              objGsmOut.MessageRecipient = phoneNumber             objGsmOut.MessageData = smsBalasan             objGsmOut.Send              If objGsmOut.LastError = 0 Or objGsmOut.LastError = 23140 Then 'sms sukses dikirim                 'update status sms -&gt; 1                 strSql = \"UPDATE sms_in SET status = ?, no_ref = ? \" &amp; _                          \"WHERE id = ?\"                 Set cmd = conn.CreateCommand(strSql)                 With cmd                     .SetInt32 1, 1                     .SetInt32 2, objGsmOut.MessageReference                     .SetInt32 3, rsSend(\"id\").Value                      .Execute                 End With                 Set cmd = Nothing                  'insert ke tabel sms_out, untuk histori sms keluar                 strSql = \"INSERT INTO sms_out (phone_number, replay_msg, date_out, time_out) VALUES (?, ?, ?, ?)\"                 Set cmd = conn.CreateCommand(strSql)                 With cmd                     .SetText 1, phoneNumber                     .SetText 2, smsBalasan                     .SetDate 3, Format(Now, \"yyyy/MM/dd\")                     .SetTime 4, Format(Now, \"hh:mm:ss\")                      .Execute                 End With                 Set cmd = Nothing              Else 'sms gagal dikirim                 'update status sms -&gt; 1                  'ini masih bisa dikembangkan lagi dengan menambah kolom max_jumlah_kirim di tabel sms_in                 'jadi bisa diberi aturan sms yg gagal dikirim &gt; 3x baru status smsnya diupdate menjadi 1                 strSql = \"UPDATE sms_in SET status = ?, no_ref = ? \" &amp; _                          \"WHERE id = ?\"                 Set cmd = conn.CreateCommand(strSql)                 With cmd                     .SetInt32 1, 1                     .SetInt32 2, objGsmOut.MessageReference                     .SetInt32 3, rsSend(\"id\").Value                      .Execute                 End With                 Set cmd = Nothing             End If              Call Wait(5000)              rsSend.MoveNext         Loop         Set objConstants = Nothing         Set objGsmOut = Nothing     End If      Exit Sub errHandle:     Resume Next End Sub  Prosedur sendSMS akan mengolah sms masuk yg belum di proses (ditandai dengan status = 0), mengupdate statusnya menjadi 1 jika berhasil mengirimkan sms, kemudian menyimpannya ke tabel sms_out sebagai histori pengiriman sms.   Public Function rep0to62(ByVal phoneNumber As String) As String     'fungsi untuk mengganti prefix 0 -&gt; +62      rep0to62 = phoneNumber     If Left(phoneNumber, 1) = \"0\" Then rep0to62 = \"+62\" &amp; Right(phoneNumber, Len(phoneNumber) - 1) End Function  Sesuai namanya fungsi ini berguna untuk mengganti prefix nomor hp 0 menjadi +62 (kode indonesia).   Terakhir fungsi untuk memproses keyword sms yang masuk dan sekaligus sebagai balasan untuk sms keluar.   Public Function getBalasanSms(ByVal keywordSms As String, ByVal phoneNumber As String) As String     Dim rs              As cRecordset     Dim param1          As String     Dim arrKeyword()    As String      Dim prefix          As String     Dim nilai           As String     Dim nama            As String      Dim tha             As String     Dim semester        As String      If Len(keywordSms) &gt; 0 Then         If InStr(1, keywordSms, \"#\") &gt; 0 Then 'karakter # -&gt; separator keyword             arrKeyword = Split(keywordSms, \"#\")             If Not (Len(arrKeyword(0)) &gt; 0) Then                 getBalasanSms = \"Keyword sms salah\"                 Exit Function              Else                 'do nothing             End If          Else             ReDim arrKeyword(0)             arrKeyword(0) = keywordSms         End If      Else         getBalasanSms = \"Keyword sms salah\"         Exit Function     End If      prefix = arrKeyword(0)     prefix = UCase$(prefix)      If UBound(arrKeyword) &gt; 0 Then param1 = arrKeyword(1) 'untuk contoh disini param1 bernilai nomor induk siswa      'untuk pengembangan lebih lanjut tahun ajaran dan semester dibuat settingan tersendiri     tha = \"2009/2010\"     semester = 2      Select Case prefix         Case \"TGS\"             'validasi nis siswa             If Not isValidNIS(param1) Then getBalasanSms = Replace(NIS_SALAH, \"&lt;nis&gt;\", param1): Exit Function              'validasi no hp siswa             'nama sekolah sebaiknya disimpan didalam variabel             If Not isValidHPSiswa(param1, phoneNumber) Then                 getBalasanSms = Replace(HP_UNREG, \"&lt;nama_sekolah&gt;\", \"SMA Negeri Yogyakarta\")                 getBalasanSms = Replace(getBalasanSms, \"&lt;no_hp&gt;\", phoneNumber): Exit Function             End If              strSql = \"SELECT UPPER(nama) FROM siswa WHERE nis = '\" &amp; param1 &amp; \"'\"             nama = CStr(dbGetValue(strSql, \"\"))              'mulai proses pencarian nilai             strSql = \"SELECT matapelajaran_kode, nilai \" &amp; _                      \"FROM nilai_tugas \" &amp; _                      \"WHERE siswa_nis = '\" &amp; param1 &amp; \"' AND tahun_ajaran = '\" &amp; tha &amp; \"' AND semester = \" &amp; semester &amp; \" \" &amp; _                      \"ORDER BY matapelajaran_kode\"             Set rs = conn.OpenRecordset(strSql)             If Not rs.EOF Then                 Do While Not rs.EOF                     nilai = nilai &amp; rs(\"matapelajaran_kode\").Value &amp; \"=\" &amp; rs(\"nilai\").Value &amp; \", \"                     rs.MoveNext                 Loop             End If              If Len(nilai) &gt; 0 Then                 nilai = Left(nilai, Len(nilai) - 2)                 getBalasanSms = \"Nilai tugas (\" &amp; nama &amp; \") : \" &amp; nilai              Else                 getBalasanSms = \"Nilai tugas (\" &amp; nama &amp; \") sedang dalam proses pendataan\"             End If          Case \"UH\"             'validasi nis siswa             If Not isValidNIS(param1) Then getBalasanSms = Replace(NIS_SALAH, \"&lt;nis&gt;\", param1): Exit Function              'validasi no hp siswa             'nama sekolah sebaiknya disimpan didalam variabel             If Not isValidHPSiswa(param1, phoneNumber) Then                 getBalasanSms = Replace(HP_UNREG, \"&lt;nama_sekolah&gt;\", \"SMA Negeri Yogyakarta\")                 getBalasanSms = Replace(getBalasanSms, \"&lt;no_hp&gt;\", phoneNumber): Exit Function             End If              strSql = \"SELECT UPPER(nama) FROM siswa WHERE nis = '\" &amp; param1 &amp; \"'\"             nama = CStr(dbGetValue(strSql, \"\"))              'mulai proses pencarian nilai             strSql = \"SELECT matapelajaran_kode, nilai \" &amp; _                      \"FROM nilai_ulangan \" &amp; _                      \"WHERE siswa_nis = '\" &amp; param1 &amp; \"' AND tahun_ajaran = '\" &amp; tha &amp; \"' AND semester = \" &amp; semester &amp; \" \" &amp; _                      \"ORDER BY matapelajaran_kode\"             Set rs = conn.OpenRecordset(strSql)             If Not rs.EOF Then                 Do While Not rs.EOF                     nilai = nilai &amp; rs(\"matapelajaran_kode\").Value &amp; \"=\" &amp; rs(\"nilai\").Value &amp; \", \"                     rs.MoveNext                 Loop             End If              If Len(nilai) &gt; 0 Then                 nilai = Left(nilai, Len(nilai) - 2)                 getBalasanSms = \"Nilai ulangan (\" &amp; nama &amp; \") : \" &amp; nilai              Else                 getBalasanSms = \"Nilai ulangan (\" &amp; nama &amp; \") sedang dalam proses pendataan\"             End If          Case Else             getBalasanSms = \"Keyword sms salah\"     End Select End Function     Untuk mengetahui daftar hp/modem apa saja yang didukung, jangan sungkan dan malu-malu untuk mengklik link ini.   Selamat MENCOBA :blush:  ","categories": ["SQLite","Visual Basic","SMS Gateway"],
        "tags": ["ActiveXpert SMS","AT COMMAND","hp","modem","pembuatan sms gateway","shareware","SMS Gateway"],
        "url": "http://coding4ever.net/blog/2010/07/12/membuat-sms-gateway-itu-gampang-jangan-dipersulit/",
        "teaser": null
      },{
        "title": "SMS Tausiyah Manager",
        "excerpt":"Intro   Dalam rangka menyambut bulan suci Ramadhan 1431 H saya merilis aplikasi sms gateway gratis dengan nama “SMS Tausiyah Manager”, aplikasi ini saya buat menggunakan Visual Basic 6 dan untuk databasenya menggunakan SQLite plus proses instalasi yang sangat mudah sehingga siapa pun bisa dengan gampang mendistribusikan dan menggunakan aplikasi ini :grin:   Jadi jika Anda mempunyai kenalan/relasi yang mempunyai agenda/kegiatan Islami selama bulan suci Ramadhan, mungkin agenda tambahan berupa layanan SMS Tausiyah gratis ini bisa dijadikan sebagai bahan pertimbangan.   Aplikasi ini saya bagi menjadi dua :      SMS Service, bagian yang bertugas untuk menangani sms masuk dan keluar   SMS Manager bagian pengolahan data (member, kontak, inbox, outbox dan lain-lain)   Keyword      reg#nama, sesuai namanya keyword ini untuk berlangganan layanan sms tausiyah   unreg, untuk berhenti berlangganan layanan sms tausiyah   saran#isi saran     Kebutuhan Sistem      PC/Laptop, berhubung saya developnya di Win XP sebaiknya Anda juga menggunakan OS yang sama :grin:   Untuk modem cukup menggunakan hp + kabel data, untuk mengetes program ini saya menggunakan hp Siemens C55 dengan kabel data Cellular One (port USB)   Dan tentunya Software SMS Tausiyah Manager :grin:   Berikut adalah daftar modem/hp yang didukung oleh aplikasi ini :      Petunjuk Instalasi dan Penggunaan      Instalasi perangkat kabel data hp yang akan digunakan (342 kb)   Instalasi SMS Tausiyah Manager (205 kb)   Petunjuk penggunaan SMS Tausiyah Manager (548 kb)   Petunjuk penggunaan SMS Tausiyah Service (48 kb)   Screenshot               Link Download   File instalasi SMS Tausiyah Manager bisa Anda download diSINI (5.43 mb), aplikasi ini baru saya tes di Windows XP, dan untuk Windows 7 mudah-mudahan tidak ada masalah kompabilitas :grin:   Laporan bug/error   Berhubung terbatasnya resource yang saya gunakan untuk mengetes aplikasi ini, jika ada bug/error yang Anda temukan selama mencoba aplikasi ini mohon konfirmasinya ke k4m4r82@yahoo.com.   Selamat mencoba :blush:  ","categories": ["Freeware","Visual Basic","SMS Gateway"],
        "tags": ["inbox","outbox","ramadhan 1431 H","sms gateway","sms keluar","sms masuk","sms tausiyah","visual basic","SMS Gateway"],
        "url": "http://coding4ever.net/blog/2010/07/27/sms-tausiyah-manager/",
        "teaser": null
      },{
        "title": "Tips mengecek komponen yg di gunakan dalam pembuatan aplikasi",
        "excerpt":"Mencontoh lagi-lagi merupakan sesuatu yang menyenangkan dan kadang-kadang bisa memberikan kita motivasi lebih :grin:.   Kita ambil contoh misalkan Anda sudah mendownload salah satu aplikasi gratis di blog ini kemudian mencoba mengklik menu Master -&gt; Buku dan Anda pun langsung terpana (he he he :grin:) melihat tampilan berikut :      di form tersebut Anda penasaran komponen apa yang digunakan untuk menampilkan data dalam bentuk tabel, mau langsung bertanya ke admin blog ini kayaxnya males banget :blush:     Tapi jangan kuatir ada cara lain yang mungkin bisa Anda coba.   1. Menggunakan tool Spy++   Aktifkan tool Spy++ yang ada group Visual Studio 6               Yaph cukup seperti itu aja, simple kan :blush:   2. Menggunakan tool Extractor file instalasi   Untuk contoh disini saya menggunakan tool Universal Extractor.      Universal Extractor is a program designed to decompress and extract files from any type of archive or installer, such as ZIP or RAR files, self-extracting EXE files, application installers, etc.    Oke download dulu Universal Extractor di sini dan jangan lupa langsung diinstall, untuk mencobanya cari salah satu file instalasi yang Anda punya terutama yang dibuat menggunakan Inno Setup atau NSIS kemudian tinggal klik kanan file tersebut pilih menu UniExtract Files…            Selamat mencoba :blush:  ","categories": [],
        "tags": ["inno setup","nsis","Spy++","Universal Extractor","Visual Studio 6"],
        "url": "http://coding4ever.net/blog/2010/08/02/tips-mengecek-komponen-yg-di-gunakan-dalam-pembuatan-aplikasi/",
        "teaser": null
      },{
        "title": "Rutin patch database",
        "excerpt":"Kesibukan “coding demi sesuap nasi” he he he :grin:, sempat membuat blog ini enggak keurus.   Untungnya ada beberapa pengunjung yang berbaik hati untuk meninggalkan komennya sehingga saya pun jadi rutin untuk mengecek blog ini.   Melakukan perubahan struktur database merupakan pekerjaan sampingan yang mau tidak mau harus kita terima dengan ikhlas jika membuat aplikasi terutama aplikasi masal, karena biasanya aplikasi tipe ini sering sekali terjadi perubahan untuk memenuhi kebutuhan klien.     Untuk contoh disini saya menggunakan database Firebird.   Firebird sendiri sudah menyediakan command line tool (isql) untuk mengeksekusi pernyataan DML (SELECT, INSERT, UPDATE dan DELETE), DDL (CREATE, DROP, ALTER) dan DCL (GRANT, REVOKE de el el).   Isql ini mirip dengan tool mysql, referensi lengkap tentang isql bisa dilihat disini.   Untuk menjalankan isql kita membutuhkan library fbclient.dll dan secara default kedua file ini biasanya ngumpul di folder “C:\\Program Files\\Firebird\\Firebird_x_x\\bin” jika Anda sudah menemukannya, copykan kedua file tersebut ke folder aplikasi Anda. Hal ini kita lakukan untuk menyederhanakan dalam penulisan kode program.   Kita ambil contoh kasus, misal pada saat rilis awal program kita mempunyai struktur tabel siswa seperti berikut :      kemudian terjadi perubahan struktur table siswa dengan adanya penambahan field NAMA_AYAH dan NAMA_IBU      perintah DDL yang kita gunakan untuk menambahkan kedua field tersebut adalah sebagai berikut :   ALTER TABLE SISWA ADD NAMA_AYAH VARCHAR(30); ALTER TABLE SISWA ADD NAMA_IBU VARCHAR(30);  kemudian skrip diatas kita simpan dengan nama patchdb.sql   Sampai disini muncul masalah yaitu isql tidak bisa langsung mengeksekusi skrip diatas, agar skrip diatas bisa dieksekusi maka file patchdb.sql harus kita edit dengan menambahkan beberapa kode berikut :   SET SQL DIALECT 3; CONNECT 'C:\\Program Files\\SmartLibrary\\DBSLS.FDB' USER 'SYSDBA' PASSWORD 'masterkey'; //masterkey adalah password default Firebird  sehingga isi akhir dari file patchdb.sql adalah sebagai berikut :   SET SQL DIALECT 3; CONNECT 'C:\\Program Files\\SmartLibrary\\DBSLS.FDB' USER 'SYSDBA' PASSWORD 'masterkey'; //masterkey adalah password default Firebird  ALTER TABLE SISWA ADD NAMA_AYAH VARCHAR(30); ALTER TABLE SISWA ADD NAMA_IBU VARCHAR(30);  Skrip diatas dengan asumsi lokasi database (DBSLS.FDB) satu folder dengan aplikasi utama. Oke sekarang saatnya kita mengeksekusi file patchdb.sql dengan memanfaatkan utility isql.   Untuk mencobanya tambahkan sebuah modul kemudian copy paste kode berikut selain itu tambahkan juga referensi Microsoft Scripting Runtime di project Anda :   Option Explicit  Private Declare Function OpenProcess Lib \"kernel32\" (ByVal dwDesiredAccess As Long, ByVal bInheritHandle As Long, ByVal dwProcessId As Long) As Long Private Declare Function WaitForSingleObject Lib \"kernel32\" (ByVal hHandle As Long, ByVal dwMilliseconds As Long) As Long Private Declare Function CloseHandle Lib \"kernel32\" (ByVal hObject As Long) As Long  Private Const SYNCHRONIZE   As Long = &amp;H100000 Private Const INFINITE      As Long = &amp;HFFFF Private Const FILE_PATCH    As String = \"patchdb.sql\"  Dim fso As Scripting.FileSystemObject  Private Function fileExists(ByVal namaFile As String) As Boolean     On Error GoTo errHandle      If Not (Len(namaFile) &gt; 0) Then fileExists = False: Exit Function      Set fso = New Scripting.FileSystemObject     fileExists = fso.fileExists(namaFile)     Set fso = Nothing      Exit Function errHandle:     fileExists = False End Function  Private Sub patchDB()     Dim ShellX  As Long     Dim lPid    As Long     Dim lHnd    As Long     Dim lRet    As Long      Dim cmd As String      On Error GoTo errHandle      cmd = Chr(34) &amp; App.Path &amp; \"\\isql.exe \" &amp; Chr(34) &amp; \" -q -i \" &amp; Chr(34) &amp; App.Path &amp; \"\\\" &amp; FILE_PATCH &amp; Chr(34)      'pastikan file isql.exe dan fbclient.dll ada di folder aplikasi     If fileExists(App.Path &amp; \"\\isql.exe\") And fileExists(App.Path &amp; \"\\fbclient.dll\") Then          'pastikan juga file patchdb.sql ada         If fileExists(App.Path &amp; \"\\\" &amp; FILE_PATCH) Then             cmd = Chr(34) &amp; App.Path &amp; \"\\isql.exe \" &amp; Chr(34) &amp; \" -q -i \" &amp; Chr(34) &amp; App.Path &amp; \"\\\" &amp; FILE_PATCH &amp; Chr(34)             ShellX = Shell(cmd, vbHide)              lPid = ShellX             If lPid &lt;&gt; 0 Then                 lHnd = OpenProcess(SYNCHRONIZE, 0, lPid)                 If lHnd &lt;&gt; 0 Then                     lRet = WaitForSingleObject(lHnd, INFINITE)                     CloseHandle (lHnd)                 End If             End If         End If     End If      Exit Sub errHandle:     MsgBox Err.Description, vbExclamation, \"Warning\" End Sub  Public Sub Main()     Call patchDB End Sub  Pada contoh diatas penulisan kode :   CONNECT 'C:\\Program Files\\SmartLibrary\\DBSLS.FDB' USER 'SYSDBA' PASSWORD 'masterkey';  masih hard-coding tentunya hal ini akan menyebabkan error jika aplikasi diinstall selain difolder “C:\\Program Files\\SmartLibrary”, jadi silahkan kembangkan sendiri untuk penyelesaiannya :blush:   Kesimpulannya dengan menggunakan metode sederhana seperti ini, setiap ada perubahan struktur database kita cukup mengirimkan file patchdb.sql yang berisi perubahan struktur database ke klien, gimana simple kan ?.   Selamat mencoba :blush:  ","categories": ["Firebird","Visual Basic"],
        "tags": ["coding","dcl","dll","dml","fbclient.dll","firebird","isql","Microsoft Scripting Runtime","mysql","patch database"],
        "url": "http://coding4ever.net/blog/2010/08/16/rutin-patch-database/",
        "teaser": null
      },{
        "title": "Update SMS Tausiyah Manager",
        "excerpt":"Terima kasih saya ucapkan kepada mas Haerul atas respon penggunaan SMS Tausiyah Manager dimana pada saat mencoba program ini sms yang masuk gagal dibaca oleh aplikasi service sms tausiyah.   Berhubung saya belum pernah mencoba menggunakan hp nokia 3110c (selama ini saya selalu menggunakan hp siemens c55), saya hanya memperkirakan hp nokia 3110c belum mendukung fitur pembacaan sms dengan mode “Any of the storages” atau kalo dalam istilah AT COMMANDnya disebut “MT”     Untuk mengganti secara manual lokasi pembacaan sms sudah saya tambahkan di form Setting Program      saran saya coba pilihan storage diganti menjadi DEVICE      setelah perubahan berhasil disimpan, service sms tausiyah di stop dan dijalankan ulang.   Untuk update aplikasi SMS Tausiyah Managernya bisa didownload disini (1.35 MB)   Selamat mencoba :blush:  ","categories": ["Freeware","SMS Gateway"],
        "tags": ["AT COMMAND","nokia","update sms tausiyah manager","SMS Gateway"],
        "url": "http://coding4ever.net/blog/2010/08/17/update-sms-tausiyah-manager/",
        "teaser": null
      },{
        "title": "Membuat form input hari libur",
        "excerpt":"Salah satu fitur menarik yang dimiliki aplikasi Smart Library School yaitu form untuk input hari libur, dengan adanya fitur ini memudahkan operator untuk mencatat data hari libur.      Nah pada postingan kali ini saya akan share source code untuk membuat form tersebut, adapun komponen yang digunakan cukup :      MSFlexGrid untuk menampilkan tanggal   CommandButton untuk navigasi/perpindahan bulan   TextBox untuk untuk menampilkan bulan aktif   ListBox untuk menampilkan keterangan hari libur        Oke untuk pertama kita akan memformat tampilkan MsFlexGrid, adapun sourcenya seperti berikut :   Dim arrHari(6)  As String  Private Sub initHari()     arrHari(0) = \"Minggu\"     arrHari(1) = \"Senin\"     arrHari(2) = \"Selasa\"     arrHari(3) = \"Rabu\"     arrHari(4) = \"Kamis\"     arrHari(5) = \"Jum'at\"     arrHari(6) = \"Sabtu\" End Sub  Private Sub initGrid()     With gridKalender         .Cols = 7         .Rows = 7         .FixedRows = 1         .FixedCols = 0          For x = 0 To .Cols - 1             .Col = x             .Row = 0              .CellFontBold = True             .FixedAlignment(x) = flexAlignCenterCenter              .ColWidth(x) = 700             .ColAlignment(x) = flexAlignCenterCenter         Next x          For x = 0 To .Cols - 1             .TextMatrix(0, x) = arrHari(x) 'menampilkan hari         Next          For x = 0 To .Rows - 1             .RowHeight(x) = 500         Next          .GridLines = flexGridFlat         .GridLinesFixed = flexGridFlat          .ForeColorFixed = &amp;H0&amp; 'WARNA_HITAM         .BackColorSel = &amp;HED9564 'WARNA_BIRU     End With End Sub  Private Sub Form_Load()     Call initHari     Call initGrid End Sub  jika source diatas dijalankan akan menghasilkan tampilan seperti berikut :      Selanjutnya kita akan membuat prosedur untuk mengenerate data kalender bulan yang aktif, menampilkan hari libur minggu dan hari libur lainnya.   Dim setMonth    As Date  Private Function roundOff(ByVal num As Double) As Integer     Dim str     As String     Dim str2    As String     Dim ctr     As Integer      str = CStr(num)     For ctr = 1 To Len(str)         If Mid(str, ctr, 1) = \".\" Then             roundOff = CInt(str2)             Exit Function         Else             str2 = str2 &amp; Mid(str, ctr, 1)         End If     Next      roundOff = CInt(str2) End Function  Private Function detrmMonth(ByVal bulan As Integer) As Integer     Select Case bulan         Case 1 'January             If leap = True Then                 detrmMonth = 6             Else                 detrmMonth = 0             End If          Case 2 'Febuary             If leap = True Then                 detrmMonth = 2             Else                 detrmMonth = 3             End If          Case 3 'March             detrmMonth = 3          Case 4 'April             detrmMonth = 6          Case 5 'May             detrmMonth = 1          Case 6 'June             detrmMonth = 4          Case 7 'July             detrmMonth = 6          Case 8 'August             detrmMonth = 2          Case 9 'September             detrmMonth = 5          Case 10 'October             detrmMonth = 0          Case 11 'November             detrmMonth = 3          Case 12 'December             detrmMonth = 5     End Select End Function  Private Function DOTW(ByVal hari As Integer, ByVal bulan As Integer, ByVal tahun As Integer) As String     Dim yr      As Double     Dim result  As Integer      yr = tahun / 4     result = roundOff(yr) + tahun      yr = tahun / 100     result = result - roundOff(yr)      yr = tahun / 400     result = result + roundOff(yr)     result = result + hari     result = result + detrmMonth(bulan)     result = result - 1     result = result Mod 7      DOTW = getHariByAngka(result) End Function  Private Function getHariByAngka(ByVal hari As Integer) As String     Select Case hari         Case 0: getHariByAngka = \"Minggu\"         Case 1: getHariByAngka = \"Senin\"         Case 2: getHariByAngka = \"Selasa\"         Case 3: getHariByAngka = \"Rabu\"         Case 4: getHariByAngka = \"Kamis\"         Case 5: getHariByAngka = \"Jum'at\"         Case 6: getHariByAngka = \"Sabtu\"     End Select End Function  Private Function getAngkaByHari(ByVal hari As String) As Integer     Select Case hari         Case \"Minggu\": getAngkaByHari = 0         Case \"Senin\": getAngkaByHari = 1         Case \"Selasa\": getAngkaByHari = 2         Case \"Rabu\": getAngkaByHari = 3         Case \"Kamis\": getAngkaByHari = 4         Case \"Jum'at\": getAngkaByHari = 5         Case \"Sabtu\": getAngkaByHari = 6     End Select End Function  Private Sub setToDay(ByVal Col As Integer, ByVal Row As Integer)     With gridKalender         .Col = Col         .Row = Row          .CellPictureAlignment = flexAlignCenterTop         Set .CellPicture = LoadPicture(App.Path &amp; \"\\today.bmp\")          .CellFontBold = True     End With End Sub  Private Function getRowByCell(ByVal cell As Integer) As Integer     Select Case cell         Case 1 To 7: getRowByCell = 1         Case 8 To 14: getRowByCell = 2         Case 15 To 21: getRowByCell = 3         Case 22 To 28: getRowByCell = 4         Case 29 To 35: getRowByCell = 5         Case 36 To 42: getRowByCell = 6         Case Else: getRowByCell = 1     End Select End Function  Private Function getColByCell(ByVal cell As Integer) As Integer     Select Case cell         Case 1, 8, 15, 22, 29, 36             getColByCell = 0          Case 2, 9, 16, 23, 30, 37             getColByCell = 1          Case 3, 10, 17, 24, 31, 38             getColByCell = 2          Case 4, 11, 18, 25, 32, 39             getColByCell = 3          Case 5, 12, 19, 26, 33, 40             getColByCell = 4          Case 6, 13, 20, 27, 34, 41             getColByCell = 5          Case 7, 14, 21, 28, 35, 42             getColByCell = 6     End Select End Function  Private Sub setHariLibur(ByVal hari As Integer)     Dim x   As Long     Dim y   As Long      With gridKalender         For x = 0 To .Cols - 1             For y = 1 To .Rows - 1                 If Val(.TextMatrix(y, x)) = hari Then                     .Col = x                     .Row = y                      If Day(Now) = hari Then 'hari libur pas hari ini                         .CellPictureAlignment = flexAlignCenterTop                     Else                         .CellPictureAlignment = flexAlignLeftTop                     End If                      Set .CellPicture = LoadPicture(App.Path &amp; \"\\smile.bmp\")                      .CellFontBold = True                     .CellForeColor = vbRed                 End If             Next y         Next x     End With End Sub  Private Sub makeCalendar(ByVal jumlahHari As Integer, ByVal bulan As Integer, ByVal tahun As Integer)     Dim hari        As Integer     Dim y           As Integer     Dim Index       As Integer     Dim cell        As Integer      Dim baris       As Integer     Dim kolom       As Integer     Dim ret         As Integer      Dim str         As String     Dim ketLibur    As String      cell = 0     lstKetHariLibur.Clear     For hari = 1 To jumlahHari         str = DOTW(hari, bulan, tahun)         y = getAngkaByHari(str)          For Index = cell To 41             baris = getRowByCell(cell)             kolom = getColByCell(cell)              If kolom = y Then                 Index = 41                 gridKalender.TextMatrix(baris, kolom) = hari                  If Day(Now) = hari And Month(Now) = bulan Then Call setToDay(kolom, baris) 'setToDay -&gt; prosedur untuk menampilkan icon today                  If kolom = 0 Then                     Call setHariLibur(hari)                 Else                     strSql = \"SELECT COUNT(*) FROM hari_libur \" &amp; _                              \"WHERE DAY(tanggal) = \" &amp; hari &amp; \" AND \" &amp; _                              \"MONTH(tanggal) = \" &amp; bulan &amp; \" AND YEAR(tanggal) = \" &amp; tahun &amp; \"\"                     ret = CInt(dbGetValue(strSql, 0))                     If ret &gt; 0 Then                         Call setHariLibur(hari)                          strSql = \"SELECT keterangan FROM hari_libur \" &amp; _                                  \"WHERE DAY(tanggal) = \" &amp; hari &amp; \" AND \" &amp; _                                  \"MONTH(tanggal) = \" &amp; bulan &amp; \" AND YEAR(tanggal) = \" &amp; tahun &amp; \"\"                         ketLibur = CStr(dbGetValue(strSql, \"\"))                         lstKetHariLibur.AddItem hari &amp; \" : \" &amp; ketLibur                     End If                 End If              Else                 If baris &gt; 0 And kolom &gt; 0 Then gridKalender.TextMatrix(baris, kolom) = \"\"             End If              cell = cell + 1         Next     Next End Sub  Private Function getJumlahHariByBulan(ByVal bulan As Integer, ByVal tahun As Long) As Integer     getJumlahHariByBulan = Day(DateSerial(tahun, bulan + 1, 0)) End Function  Private Sub resetKalender()     Dim x   As Integer     Dim y   As Integer      With gridKalender         For x = 0 To .Cols - 1             For y = 1 To .Rows - 1                 .TextMatrix(y, x) = \"\"                  .Col = x                 .Row = y                 Set .CellPicture = Nothing                  .CellFontBold = False                 .CellForeColor = &amp;H0&amp; 'WARNA_HITAM                 .CellBackColor = &amp;H80000005 'WARNA_PUTIH             Next         Next     End With End Sub  Private Sub genKalender()     Dim jumlahHariByBulan   As Integer     Dim num                 As Integer      num = Year(setMonth) Mod 4     If num = 0 Then         leap = True     Else         leap = False     End If      Call resetKalender      jumlahHariByBulan = getJumlahHariByBulan(Month(setMonth), Year(setMonth))     Call makeCalendar(jumlahHariByBulan, Month(setMonth), Year(setMonth)) End Sub  Private Sub Form_Load()     Call initHari     Call initGrid      setMonth = Date     Call genKalender End Sub  Hari libur akan disimpan didatabase Ms Access dengan struktur seperti berikut :      Prosedur berikutnya adalah untuk melakukan navigasi/perpindahan antar bulan      Dim setMonth    As Date  Private Sub refreshBulan(ByVal bulan As Date)     txtBulan.Text = getBulanIndonesia(Month(bulan)) &amp; \" \" &amp; Year(bulan) End Sub  Private Sub cmdNext_Click()     setMonth = setNewMonth(True)     Call refreshBulan(setMonth)     Call genKalender End Sub  Private Sub cmdPrev_Click()     setMonth = setNewMonth(False)     Call refreshBulan(setMonth)     Call genKalender End Sub  Untuk menambah dan menghapus hari libur kita akan memanfaat menu biasa dengan mode Pop Up dan untuk menghemat form untuk inputannya cukup menggunakan fungsi InputBox            Private Sub mnuHariLibur_Click()     Dim inputKetLibur   As String     Dim tanggal         As String     Dim ret             As Integer      inputKetLibur = InputBox(\"Keterangan Hari Libur\", \"Hari Libur\")     If Len(inputKetLibur) &gt; 0 Then         tanggal = Year(setMonth) &amp; \"/\" &amp; Month(setMonth) &amp; \"/\" &amp; Val(gridKalender.TextMatrix(gridKalender.Row, gridKalender.Col))          strSql = \"SELECT COUNT(*) FROM hari_libur \" &amp; _                  \"WHERE tanggal = #\" &amp; tanggal &amp; \"#\"         ret = CInt(dbGetValue(strSql, 0))         If ret = 0 Then             strSql = \"INSERT INTO hari_libur(tanggal, keterangan) VALUES (#\" &amp; _                      tanggal &amp; \"#,'\" &amp; inputKetLibur &amp; \"')\"             conn.Execute strSql         End If          Call genKalender         cmdNext.SetFocus     End If End Sub  Private Sub mnuHapusHariLibur_Click()     Dim tanggal As String      If MsgBox(\"Apakan Anda ingin menghapus hari libur ???\", vbExclamation + vbYesNo, \"Konfirmasi\") = vbYes Then         If Val(gridKalender.TextMatrix(gridKalender.Row, gridKalender.Col)) &gt; 0 Then             tanggal = Year(setMonth) &amp; \"/\" &amp; Month(setMonth) &amp; \"/\" &amp; Val(gridKalender.TextMatrix(gridKalender.Row, gridKalender.Col))              strSql = \"DELETE FROM hari_libur \" &amp; _                      \"WHERE tanggal = #\" &amp; tanggal &amp; \"#\"             conn.Execute strSql              Call genKalender             cmdNext.SetFocus         End If     End If End Sub  adapun kode untuk menampilkan popup menu pada saat mengklik kanan kalender adalah seperti berikut :   Private Sub gridKalender_MouseUp(Button As Integer, Shift As Integer, x As Single, y As Single)     If Button = vbRightButton Then         With gridKalender             If .MouseCol = 0 Then 'kolom hari minggu, semua menu dinonaktifkan                 mnuHariLibur.Enabled = False                 mnuHapusHariLibur.Enabled = False              Else                 If Val(.TextMatrix(.MouseRow, .MouseCol)) &gt; 0 Then                     .Row = .MouseRow                     .Col = .MouseCol                      If .CellForeColor &gt; 0 Then 'font warna merah, berarti hari libur                         mnuHariLibur.Enabled = False 'menu hari libur dinonaktifkan                         mnuHapusHariLibur.Enabled = True                      Else                         mnuHariLibur.Enabled = True                         mnuHapusHariLibur.Enabled = False                     End If                  Else                     mnuHariLibur.Enabled = True                     mnuHapusHariLibur.Enabled = False                 End If             End If         End With          PopupMenu mnuPopUp     End If End Sub  sebagai penutup kita akan menambahkan prosedur otomatis untuk menyimpan hari libur khusus minggu yang akan dijalankan pada method Main   Private Function getFirstSunday() As Integer     Dim firstDay As String      firstDay = Year(Now) &amp; \"/\" &amp; Month(Now) &amp; \"/1\"     firstDay = Weekday(firstDay)     If Val(firstDay) &gt; 1 Then         getFirstSunday = 9 - Val(firstDay)     Else         getFirstSunday = Val(firstDay)     End If End Function  Private Sub addHariMinggu()     Dim i           As Integer     Dim firstDay    As Integer     Dim ret         As Integer      Dim tgl         As String      firstDay = getFirstSunday 'ambil tgl hari minggu pertama     For i = firstDay To getJumlahHariByBulan(Month(Now), Year(Now)) Step 7         tgl = Year(Now) &amp; \"/\" &amp; Month(Now) &amp; \"/\" &amp; i          strSql = \"SELECT COUNT(*) FROM hari_libur \" &amp; _                  \"WHERE tanggal = #\" &amp; tgl &amp; \"# AND keterangan = 'Minggu'\"         ret = CInt(dbGetValue(strSql, 0))         If ret = 0 Then             strSql = \"INSERT INTO hari_libur(tanggal, keterangan) VALUES (#\" &amp; tgl &amp; \"#, 'Minggu')\"             conn.Execute strSql         End If     Next End Sub  Private Sub openDb()     Set conn = New ADODB.Connection     conn.ConnectionString = \"Provider=Microsoft.Jet.OLEDB.4.0;Data Source= \" &amp; App.Path &amp; \"\\sampleDB.mdb\"     conn.Open End Sub  Public Sub Main()     Call openDb      'prosedur otomatis untuk mengisikan tgl libur khusus hari minggu     Call addHariMinggu     frmHariLibur.Show End Sub     Selamat MENCOBA :blush:  ","categories": ["Visual Basic"],
        "tags": ["commandbutton","input hari libur","kalender","MSFlexGrid","Smart Library School","TextBox"],
        "url": "http://coding4ever.net/blog/2010/08/26/membuat-form-input-hari-libur/",
        "teaser": null
      },{
        "title": "Membuat rumus penilaian dinamis",
        "excerpt":"Setahun yang lalu, sewaktu saya masih aktif mengembangkan aplikasi sekolah di beberapa kabupaten di Riau, masalah yang sering saya hadapi adalah tidak adanya standarisasi rumus dalam menentukan nilai akhir siswa (rapor akhir), tetapi untung saja variabel nilainya masih sama (rata2 tugas, rata2 ulangan, uts dan uas).   Pada awalnya saya hanya menyediakan input prosentasi untuk masing-masing nilai tersebut, dan tentu saja cara ini tidak memberikan solusi yang terbaik mengingat masing-masing guru terkadang mempunyai rumus penilaian yang berbeda.   Jadi alternatif solusi lain yang saya tawarkan adalah dengan memberikan keleluasaan untuk menginputkan sendiri rumus dan untuk melakukan ini kita harus mendefinisikan konstanta untuk mewakili nilai-nilai diatas sebagai berikut :        Contoh untuk mendapatkan nilai akhir dengan rumus :   Nilai Akhir = ((Rata2 tugas + Rata2 ulangan + UTS) / 3 x 0.6) + (UAS x 0.4)   Maka rumus yang harus diinputkan adalah sebagai berikut :      Gimana sampe disini konsepnya sudah jelas bukan, klo iya kita bahas kodenya satu per satu dan untuk menyederhanakan program, nilai dari rata2x tugas, rata2x ulangan, uts dan uas langsung diinputkan via textbox.   Pertama kita desain dulu tampilannya seperti berikut :      kemudian tambahkan fungsi berikut untuk memvalidasi inputan nilai hanya boleh angka.   Private Function validAngka(KeyAscii As Integer) As Integer     Dim strValid As String      On Error GoTo errHandle      strValid = \"0123456789.\"      If InStr(strValid, Chr(KeyAscii)) = 0 And Not (KeyAscii = vbKeyBack) Then         validAngka = 0     Else         validAngka = KeyAscii     End If      Exit Function errHandle:     validAngka = 0 End Function  kemudian tinggal panggil dimasing-masing event keypress inputan nilai   Private Sub txtRata2Tugas_KeyPress(KeyAscii As Integer)     KeyAscii = validAngka(KeyAscii) End Sub  Private Sub txtRata2Ulangan_KeyPress(KeyAscii As Integer)     KeyAscii = validAngka(KeyAscii) End Sub  Private Sub txtUAS_KeyPress(KeyAscii As Integer)     KeyAscii = validAngka(KeyAscii) End Sub  Private Sub txtUTS_KeyPress(KeyAscii As Integer)     KeyAscii = validAngka(KeyAscii) End Sub  selain memvalidasi inputan nilai kita juga harus memvalidasi inputan rumus penilaian, berikut fungsinya.   Private Function validKarakterRumus(KeyAscii As Integer) As Integer     Dim strValid As String      On Error GoTo errHandle      strValid = \"0123456789aArRtTuUsS()&lt;&gt;+*/-. \"      If InStr(strValid, Chr(KeyAscii)) = 0 And Not (KeyAscii = vbKeyBack) Then         validKarakterRumus = 0     Else         validKarakterRumus = KeyAscii     End If      Exit Function errHandle:     validKarakterRumus = 0 End Function  sama seperti sebelumnya tinggal panggil di event keypress inputan rumus   Private Sub txtRumus_KeyPress(KeyAscii As Integer)     KeyAscii = Asc(UCase(Chr(KeyAscii))) 'otomatis huruf besar     KeyAscii = validKarakterRumus(KeyAscii) End Sub  terakhir untuk tombol Proses akan melakukan pengecekan terhadap rumus yang diinputkan jika oke akan langsung menampilkan hasil nya :   Private Function isValidConst(ByVal value As String) As Boolean     Dim i           As Integer     Dim strNotValid As String      On Error GoTo errHandle      strNotValid = \"aArRtTuUsS\" 'karakter konstanta RT, RU, UTS dan UAS      isValidConst = True     For i = 1 To Len(value)         If InStr(1, strNotValid, Mid(value, i, 1)) &gt; 0 Then             isValidConst = False             Exit For         End If     Next      Exit Function errHandle:     isValidConst = True End Function  Private Function isValidRumusPenilaian(ByVal rumus As String) As Boolean     Dim script              As Object     Dim result              As Long      Dim strParsing1         As String     Dim strParsing2         As String     Dim strFinalParsing     As String      On Error GoTo errHandle      strParsing1 = Replace(rumus, \" \", \"\") ' menghapus spasi      strParsing2 = Replace(strParsing1, \"&lt;RT&gt;\", 0)     strParsing2 = Replace(strParsing2, \"&lt;RU&gt;\", 0)     strParsing2 = Replace(strParsing2, \"&lt;UTS&gt;\", 0)     strParsing2 = Replace(strParsing2, \"&lt;UAS&gt;\", 0)      strFinalParsing = Replace(strParsing2, \"&lt;\", \"\")      strFinalParsing = Replace(strFinalParsing, \"&gt;\", \"\")     If Not (Len(strFinalParsing) &gt; 0) Then strFinalParsing = \"0\"      'cek klo ada rumus yg tidak sesuai dg konstanta yg sudah didefinisikan, ex : &lt;RT&gt; ditulis &lt;TR&gt;     If Not isValidConst(strFinalParsing) Then         isValidRumusPenilaian = False      Else         Set script = CreateObject(\"ScriptControl\")         script.Language = \"VBScript\"         result = script.Eval(strFinalParsing)         Set script = Nothing          isValidRumusPenilaian = True     End If      Exit Function  errHandle:     isValidRumusPenilaian = False End Function  Private Function execFormula(ByVal rumus As String) As Single     Dim script  As Object      On Error GoTo errHandle      Set script = CreateObject(\"ScriptControl\")     script.Language = \"VBScript\"     execFormula = script.Eval(rumus)     Set script = Nothing      Exit Function errHandle:     execFormula = 0 End Function  Private Function getNilaiAkhirByRumus(ByVal rumus As String, ByVal nilaiRT As Single, ByVal nilaiRU As Single, _                                       ByVal nilaiUTS As Single, ByVal nilaiUAS As Single) As Single      Dim strParsing1         As String     Dim strParsing2         As String     Dim strFinalParsing     As String      On Error GoTo errHandle      strParsing1 = Replace(rumus, \" \", \"\") ' menghapus spasi     strParsing2 = Replace(strParsing1, \"&lt;RT&gt;\", nilaiRT) ' mengganti const &lt;RT&gt; ke nilai nilaiRT     strParsing2 = Replace(strParsing2, \"&lt;RU&gt;\", nilaiRU)  ' mengganti const &lt;RU&gt; ke nilai nilaiRU     strParsing2 = Replace(strParsing2, \"&lt;UTS&gt;\", nilaiUTS)  ' mengganti const &lt;UTS&gt; ke nilaiUTS     strParsing2 = Replace(strParsing2, \"&lt;UAS&gt;\", nilaiUAS)  ' mengganti const &lt;UAS&gt; ke nilaiUAS      strFinalParsing = Replace(strParsing2, \"&lt;\", \"\")     strFinalParsing = Replace(strFinalParsing, \"&gt;\", \"\")      If Not (Len(strFinalParsing) &gt; 0) Then strFinalParsing = \"0\"      getNilaiAkhirByRumus = FormatNumber(execFormula(strFinalParsing), 0)      Exit Function  errHandle:     getNilaiAkhirByRumus = 0 End Function  Private Sub cmdProses_Click()     If isValidRumusPenilaian(txtRumus.Text) Then         txtNilaiAkhir.Text = getNilaiAkhirByRumus(txtRumus.Text, Val(txtRata2Tugas.Text), Val(txtRata2Ulangan.Text), Val(txtUTS.Text), Val(txtUAS.Text))      Else         MsgBox \"Rumus yang Anda inputkan tidak valid\", vbExclamation, \"Peringatan\"         txtRumus.SetFocus     End If End Sub     Selamat MENCOBA :blush:  ","categories": ["Visual Basic"],
        "tags": ["aplikasi sekolah","rumus penilaian dinamis"],
        "url": "http://coding4ever.net/blog/2010/09/02/membuat-rumus-penilaian-dinamis/",
        "teaser": null
      },{
        "title": "Horeeee lebaran lagi :)",
        "excerpt":"  ","categories": [],
        "tags": [],
        "url": "http://coding4ever.net/blog/2010/09/09/horeeee-lebaran-lagi/",
        "teaser": null
      },{
        "title": "Beberapa alternatif menampilkan file gambar via jaringan",
        "excerpt":"Di beberapa aplikasi seperti sistem informasi sekolah mengharuskan kita untuk menampilkan gambar pada form-form tertentu seperti Logo Sekolah, TTD Kepala Sekolah dan Foto Guru/Siswa.   Adapun komponen standar yang biasa digunakan untuk menampilkan gambar di Visual Basic adalah komponen Image dan PictureBox. Kodenya pun sangat sederhana bisa kita lihat seperti dibawah ini :   Private Sub cmdLoadFoto_Click()     picSiswa.Picture = LoadPicture(\"Lokasi_file_gambar\\file_foto.jpg\") End Sub  dan berdasarkan kode sederhana diatas akan kita kembangkan kodenya agar bisa menampilkan gambar via jaringan :     1. Menyimpan gambar langsung di database   Cara ini sangat efektif sekali untuk menyimpan gambar yang ukurannya kecil dan tidak terlalu banyak, misal logo sekolah atau TTD kepala sekolah. Jadi hilangkan pikiran2x kotor :grin: untuk menyimpan foto-foto guru/siswa langsung didatabase karena hal ini akan mempengaruhi kinerja database, walaupun jaman sekarang hardisk2xnya udah gede tapi tetap saja menyimpan gambar secara langsung (dalam jumlah banyak) kurang baik untuk kesehatan database :grin:.   Bagaimana cara menyimpan dan menampilkan gambar dari database sudah saya bahas tuntas diSINI.   2. Share folder   Nah klo file gambarnya lumayan banyak seperti foto guru/siswa, cara ini mungkin bisa dicoba. Jadi foto guru/siswanya dikumpulkan di dalam 1 folder kemudian di share, selanjutnya dari aplikasi tinggal panggil seperti berikut :   Private Sub cmdLoadFoto_Click()     picSiswa.Picture = LoadPicture(\"\\\\ip_server\\folder_yg_dishare\\file_foto.jpg\")      'atau dengan menyebutkan langsung nama komputer     picSiswa.Picture = LoadPicture(\"\\\\nama_komputer_server\\folder_yg_dishare\\file_foto.jpg\") End Sub  Permasalah yang sering muncul menggunakan cara ini adalah, folder yang dishare gagal/tidak dapat diakses dari komputer lain dan tentu saja kode diatas juga akan gagal menampilkan gambarnya.   Jika Anda menemukan kasus seperti ini, mungkin langkah-langkah berikut bisa di coba :      Mengaktifkan File and Printer Sharing   Mengaktifkan pilihan Use simple file sharing pada setting folder option   Menyamakan user dan password komputer server dan klien   Menonaktifkan windows firewall   Jika langkah-langkah diatas masih gagal juga, mungkin kita akan coba cara yang terakhir.   3. Memanfaatkan service FTP   Untuk mengaktifkan service FTP di windows (untuk contoh disini saya menggunakan windows xp sp2) kita bisa menggunakan Internet Information Services (IIS) atau memanfaatkan tool gratis yg banyak beredar dipasaran seperti FileZilla Server dan di artikel ini saya menggunakan FileZilla Server. Oke langsung saja download filenya diSINI.   Berikut langkah-langkah instalasi plus konfigurasinya.   1. Instalasi   Jalankan file FileZilla Server yang sudah Anda download kemudian tinggal ikuti saja wizard instalasinya.                        2. Menambahkan group user   Disini kita akan menambahkan group dan user yang diberi izin untuk mengakses folder tertentu, dalam hal ini folder foto.   Setelah proses instalasi diatas selesai kita langsung dihadapkan pada form login.      Isikan password Administrator misalkan “admin”, setelah itu akan tampil form utama FileZilla Server Interface.      kemudian klik tombol toolber user group, setelah itu akan tampil dialog untuk menambahkan user group      isikan nama group misal “akses_foto”  seperti gambar diatas, selanjutkan kita akan menentukan folder yang akan diakses dengan mengaktifkan node Shared folders         3. Menambahkan user      kemudian klik tombol toolbar user accounts, setelah itu akan tampil dialog untuk menambahkan user.         kemudian jangan lupa isikan password usernya, misal “rahasia”      Langkah-langkah untuk menambahkan group dan user cukup sampai disini.   4. Mendaftarkan port FTP   Agar port FTP (defaultnya 21) bisa diakses komputer lain, maka port tersebut harus kita daftarkan di windows firewall. Jika windows firewallnya dinonaktifkan maka langkah-langkah ini bisa kita abaikan.   Berikut langkah-langkah mendaftarkan port FTP.           Masuk ke Control Panel -&gt; Windows Firewall, kemudian aktifkan tab Exceptions                   Klik tombol Add Port, kemudian isikan informasi Name dan Port number                   Jika berhasil pada list Programs and Services akan ditampilkan port yang baru kita daftarkan              5. Ngetes service FTP via command prompt   Setelah semua proses selesai mulai dari instalasi, konfigurasi group dan user yang diakhiri dengan mendaftarkan port FTP, saatnya kita mencoba untuk mengetes service FTPnya dari komputer lain.   Dengan asumsi ip server adalah “192.168.0.6”, kita masuk ke dos prompt kemudian ketik ftp 192.168.0.6      Jika konfigurasi service FTP yang kita lakukan dilangkah-langkah sebelumnya benar, kita akan diminta untuk memasukkan username dan password dan jika berhasil prompt akan berganti menjadi ftp&gt; yang menandakan bahwa username dan password kita benar.   Untuk testing lebih lanjut, kita akan coba menampilkan daftar direktori dan file dengan printah ls.    terakhir untuk keluar dari prompt ftp ketik printah bye.    Sampe disini semua persiapan kita sudah selesai dan saatnya mengeluarkan jurus pamungkas :grin: untuk mengakses service FTP dari vb.   Ada banyak referensi salah satunya bisa langsung merujuk ke sumber Microsoft atau yang paling gampang dengan memanfaatkan kelas FTPClass, untuk contoh disini saya akan menggunakan kelas FTPClass.   Berikut contoh penggunaan kelas tersebut.   1. Menampilkan daftar direktori dan file   Private Sub cmdDaftarFile_Click()     Dim objFTP      As FTPClass     Dim objFTPFile  As FTPFileClass      Dim serverName  As String     Dim userName    As String     Dim password    As String      serverName = \"192.168.0.6\"     userName = \"k4m4r82\"     password = \"rahasia\"      Set objFTP = New FTPClass     If objFTP.OpenFTP(serverName, userName, password) Then         If objFTP.SetCurrentFolder(\"/\") Then             For Each objFTPFile In objFTP.Files                 List1.AddItem objFTPFile.FileName             Next         End If         objFTP.CloseFTP      Else         'TODO : tampilkan pesan gagal membuka port FTP     End If     Set objFTP = Nothing End Sub  2. Menampilkan file gambar sesuai dengan pembahasan inti artikel kita kali ini   Private Sub cmdLoadFoto_Click()     Dim objFTP      As FTPClass      Dim serverName  As String     Dim userName    As String     Dim password    As String     Dim foto        As String      serverName = \"192.168.0.6\"     userName = \"k4m4r82\"     password = \"rahasia\"      foto = \"02024112.jpg\" 'contoh nama file gambar yang ingin ditampilkan      Set objFTP = New FTPClass     If objFTP.OpenFTP(serverName, userName, password) Then         If objFTP.SetCurrentFolder(\"/\") Then             If objFTP.FileExists(foto) Then 'cek dulu file gambarnya dan jika ada...                 Call objFTP.GetFile(foto, App.Path &amp; \"\\\" &amp; foto, True) 'download file gambarnya ke komputer lokal                 picSiswa.Picture = LoadPicture(App.Path &amp; \"\\\" &amp; foto) 'baru ditampilkan             End If         End If         objFTP.CloseFTP      Else         'TODO : tampilkan pesan gagal membuka port FTP     End If     Set objFTP = Nothing End Sub     Selamat MENCOBA :blush:  ","categories": ["Visual Basic"],
        "tags": ["filezilla server","foto guru","foto siswa","ftpclass","Image","PictureBox","service ftp","share folder","sistem informasi sekolah"],
        "url": "http://coding4ever.net/blog/2010/09/20/beberapa-alternatif-menampilkan-file-gambar-via-jaringan/",
        "teaser": null
      },{
        "title": "Merubah setting Regional and Language Options via aplikasi",
        "excerpt":"Pada kasus-kasus tertentu ada program yang error gara-gara pengaruh setting Regional and Language Options, misal ada yg 100% jalan klo diset ke English tapi malah error klo diset ke Indonesian atau sebaliknya.   Dan pada artikel ini saya akan share bagaimana caranya merubah setting Regional and Language Options ke English (United States) secara paksa :grin: setiap aplikasi kita dijalankan.   Modalnya juga murah cukup dengan memanfaatkan beberapa fungsi API untuk mengakses registry windows.   Sebelum kita bercoding ria ada baiknya kita mengetahui dimana lokasi penyimpanan Setting Regional and Language Options di registry windows.   Dibawah ini adalah lokasi penyimpanannya   HKEY_CURRENT_USER\\Control Panel\\International       Oke kita langsung saja tambahkan sebuah modul kemudian copas kode berikut :   Option Explicit  Private Declare Function RegCloseKey Lib \"advapi32.dll\" (ByVal hKey As Long) As Long Private Declare Function RegCreateKey Lib \"advapi32.dll\" Alias \"RegCreateKeyA\" (ByVal hKey As Long, ByVal lpSubKey As String, phkResult As Long) As Long Private Declare Function RegSetValueEx Lib \"advapi32.dll\" Alias \"RegSetValueExA\" (ByVal hKey As Long, ByVal lpValueName As String, ByVal Reserved As Long, ByVal dwType As Long, lpData As Any, ByVal cbData As Long) As Long Private Declare Function GetLocaleInfo Lib \"kernel32\" Alias \"GetLocaleInfoA\" (ByVal Locale As Long, ByVal LCType As Long, ByVal lpLCData As String, ByVal cchData As Long) As Long  Private Const HKEY_CURRENT_USER = &amp;H80000001 Private Const LOCALE_SENGCOUNTRY     As Long = &amp;H1002 '  English name of country Private Const LOCALE_USER_DEFAULT    As Long = &amp;H400 Private Const REGIONAL_SETTING       As String = \"United States\" Private Const REG_SZ = 1 ' Unicode nul terminated string  Private Sub saveToWindowsRegistry(hKey As Long, strPath As String, strValue As String, strData As String)     Dim ret As Long      On Error Resume Next      'Create a new key     RegCreateKey hKey, strPath, ret     'Save a string to the key     RegSetValueEx ret, strValue, 0, REG_SZ, ByVal strData, Len(strData)     'close the key     RegCloseKey ret End Sub  Private Function getInfoRegionalSettings(ByVal lInfo As Long) As String     Dim buffer As String, ret As String      On Error Resume Next      buffer = String$(256, 0)     ret = GetLocaleInfo(LOCALE_USER_DEFAULT, lInfo, buffer, Len(buffer))     If ret &gt; 0 Then         getInfoRegionalSettings = Left$(buffer, ret - 1)     Else         getInfoRegionalSettings = \"\"     End If End Function  Public Sub setDefRegionalSetting()     If getInfoRegionalSettings(LOCALE_SENGCOUNTRY) &lt;&gt; REGIONAL_SETTING Then         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"iCountry\", \"1\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"iCurrDigits\", \"2\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"iCurrency\", \"0\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"iDate\", \"0\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"iDigits\", \"2\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"iLZero\", \"1\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"iMeasure\", \"1\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"iNegCurr\", \"0\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"iTime\", \"0\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"iTLZero\", \"0\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"Locale\", \"00000409\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"s1159\", \"AM\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"s2359\", \"PM\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"sCountry\", \"United States\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"sCurrency\", \"$\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"sDate\", \"/\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"sDecimal\", \".\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"sLanguage\", \"ENU\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"sList\", \",\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"sLongDate\", \"dddd, MMMM dd, yyyy\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"sShortDate\", \"M/d/yyyy\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"sThousand\", \",\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"sTime\", \":\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"sTimeFormat\", \"h:mm:ss tt\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"iTimePrefix\", \"0\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"sMonDecimalSep\", \".\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"sMonThousandSep\", \",\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"iNegNumber\", \"1\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"sNativeDigits\", \"0123456789\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"NumShape\", \"1\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"iCalendarType\", \"1\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"iFirstDayOfWeek\", \"6\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"iFirstWeekOfYear\", \"0\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"sGrouping\", \"3;0\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"sMonGrouping\", \"3;0\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"sPositiveSign\", \"\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\", \"sNegativeSign\", \"-\")         Call saveToWindowsRegistry(HKEY_CURRENT_USER, \"Control Panel\\International\\Geo\", \"Nation\", \"244\")     End If End Sub  Selanjutnya tinggal panggil prosedur setDefRegionalSetting diatas di prosedur Main :   Public Sub Main()     Call setDefRegionalSetting     'TODO : tampilkan form utama End Sub  Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["api","Regional and Language Options","windows registry"],
        "url": "http://coding4ever.net/blog/2010/10/18/merubah-setting-regional-and-language-options-via-aplikasi/",
        "teaser": null
      },{
        "title": "Lari pagi dengan nike+ sportband lebih semangat :)",
        "excerpt":"Ingat loh pola hidup programmer (tapi bukan proGAMMER :)) biasanya enggak sehat, makan enggak teratur terutama anax kos :grin:, klo lagi bergadang coding enggak seru klo enggak pake cemilan plus kebanyakan duduk :grin:.   Saya sendiri minimal menghabiskan waktu di depan komputer (coding kerjaan kantor+proyek pribadi he he he) sekitar 15 jam per hari :lol: benar-benar kurang kerjaan kali ya :grin:.   Untungnya udah beberapa bulan ini rutin lari pagi minimal seminggu 5 kali wowww benar-benar terasa bedanya fisik jadi lebih fit trus kemarin iseng-iseng ke amplas trus beli nike+ sportband harganya lumayan 650 rban :grin:  n tadi pagi langsung dicoba :). Ini nih hasilnya.      Hemm lumayankan sekarang jadi tau dalam waktu 27 menit ternyata saya bisa menempuh jarak 4.76 km, jadi target besok harus lebih dari 5 km :grin:.   Dengan menggunakan nike+ sportband kita jadi tau kecepatan, lama waktu, jarak tempuh dan kalori yang dihabiskan selama berlari dan untuk melihat hasil grafik seperti diatas data yang tersimpan di nike+ sportband harus diupload ke situs Nike Running tentunya harus menjadi anggota komunita dari nike running.     ","categories": [],
        "tags": ["lari pagi","nike running","nike+ sportband"],
        "url": "http://coding4ever.net/blog/2010/10/23/lari-pagi-dengan-nike-sportband-lebih-semangat/",
        "teaser": null
      },{
        "title": "Qurban dengan sesama bersama YPIA",
        "excerpt":"   Menyembelih hewan qurban adalah sesuatu yang disyari’atkan berdasarkan Al Qur’an, As Sunnah dan Ijma’ (konsensus kaum muslimin).     Diantara ayat Al Qur’an dan hadits Nabi shallahu ‘alaihi wa sallam yang menjadi pertanda disyari’atkannya ibadah qurban yaitu :   Allah Ta’ala berfirman (yang artinya),      “Maka dirikanlah shalat karena Tuhanmu dan berqurbanlah.” (QS. Al Kautsar: 2) “Katakanlah: sesungguhnya shalatku, sembelihanku, hidupku dan matiku hanyalah untuk Allah, Rabb semesta alam.” (QS. Al An’am: 162).    Nabi shallahu ‘alaihi wa sallam bersabda (yang artinya),      “Tidaklah anak Adam melakukan suatu amalan pada hari Nahr (Idul Adha) yang lebih dicintai oleh Allah melebihi mengalirkan darah (qurban), maka hendaknya kalian melakukannya dengan perasaan senang.” (HR. Tirmidzi, shahih)    Pelaksanaan penyembelihan dan penyaluran hewan qurban di  Desa Beluk, Kec. Bayat, Kab. Klaten, Jawa Tengah. Informasi: 08561732977, www.muslim.or.id Penyelenggara : Yayasan Pendidikan Islam Al-Atsari (YPIA) Yogyakarta   DOKUMENTASI KEGIATAN PENYEMBELIHAN &amp; PENYALURAN HEWAN QURBAN IDUL ADHA 1430 H            Jazakallahu khairan  ","categories": [],
        "tags": ["idul adha","qurban","www.muslim.or.id","ypia"],
        "url": "http://coding4ever.net/blog/2010/10/26/qurban-dengan-sesama-bersama-ypia/",
        "teaser": null
      },{
        "title": "Pahala dengan Berbagi Ceramah MP3",
        "excerpt":"   Pendidikan Agama untuk Pemula Ceramah MP3 yang insya Allah berguna bagi pemula yang ingin mendalami agama Islam secara benar sesuai dengan Al-Quran dan Sunnah.   Berbakti Kepada Orang Tua Ceramah MP3 yang menjelaskan amalan yang paling mendekatkan seseorang kepada Allah yaitu dengan berbakti kepada orang tua.   Terorisme, Wahabi dan Jihad Islam Kumpulan kajian audio ilmiah tentang Terorisme, Demokrasi, Daulah Islamiyyah, Wahabisme, Jihad Islam, Solusi, Golongan yang Selamat dan Penjelasan tentang apa itu Salafi/salafy.   Problematika Remaja Ceramah-ceramah MP3 tentang kasus dan problematika remaja, mengupas tuntas berbagai permasalahan yang dihadapi remaja beserta solusinya.   Wanita Muslimah Ceramah tentang wanita muslimah, jalan mencapai kebahagiaan, emansipasi wanita, jilbab dan wasiat untuk wanita muslimah.      Barangsiapa yang mengajak kepada petunjuk, maka baginya ada pahala yang sama dengan pahala orang yang mengikutinya dan tidak dikurangi sedikitpun juga dari pahala-pahala mereka. (HR Muslim no. 2674).    Semoga bermanfaat :)   Sumber : kajian.net  ","categories": [],
        "tags": ["kajian"],
        "url": "http://coding4ever.net/blog/2010/11/09/pahala-dengan-berbagi-ceramah-mp3/",
        "teaser": null
      },{
        "title": "Cara mudah mencetak kode barcode",
        "excerpt":"Senang banget akhirnya bisa posting artikel coding lagi :)   Sesuai judulnya jadi kita akan mencetak kode barcode, jadi bukan membuat kode barcode karena coding untuk membuat kode barcode lumayan menyita waktu dan tenaga (asalkan buatnya dari nol bukan copas source code :grin:)   Beberapa waktu yang lalu saya sudah membahas bagaimana membuat form input hari libur yang diambil dari salah satu fitur Smart Library School, kali ini saya membahas fitur lainnya yaitu pencetakan kode barcode yang tentunya dengan cara yang instan :grin:   Ada 2 mode pencetakan yang akan saya share disini :             Cetak barcode tunggal, sesuai namanya kita akan mencetak 1 kode barcode dengan posisi yang bisa kita atur sendiri.                   Cetak barcode kelompok, mencetak beberapa kode barcode sekaligus              Proses pembuatan barcodenya sendiri tidak perlu koding khusus, yang diperlukan hanya kode untuk mencetaknya itulah mudahnya klo menggunakan komponen pihak ke tiga he he he :grin:.      Ingat komponen ini adalah shareware, segala resiko (kemudahan dalam mencetak kode barcode) ditanggung sendiri :grin:, saya disini hanya share dan tidak terikat kerja sama dengan pihak ketiga tersebut.    :smiling_imp:   Oke langsung saja kita akan buat rancangan tampilannya seperti berikut :      Adapun kode pencetakannya adalah sebagai berikut :   Private Sub cmdCetak_Click()     Dim batasKiri   As Single     Dim batasAtas   As Single      Dim posisi      As Integer      If MsgBox(\"Apakah proses pencetakan kode barcode ingin dilanjutkan ?\", vbExclamation + vbYesNo, \"Konfirmasi\") = vbYes Then         Screen.MousePointer = vbHourglass         DoEvents          Printer.PSet (0, 0), vbWhite         Printer.ScaleMode = vbPixels          batasKiri = 0         batasAtas = 2.5         posisi = 0          Do While posisi &lt; 30             If Check1(posisi).Value = Checked Then                 If posisi &gt;= 0 And posisi &lt;= 5 Then                     batasKiri = 0                  ElseIf posisi &gt;= 6 And posisi &lt;= 11 Then                     batasKiri = 4                  ElseIf posisi &gt;= 12 And posisi &lt;= 17 Then                     batasKiri = 8                  ElseIf posisi &gt;= 18 And posisi &lt;= 23 Then                     batasKiri = 12                  Else                     batasKiri = 16                 End If                  Select Case posisi                     Case 0, 6, 12, 18, 24                         batasAtas = 0.5                     Case 1, 7, 13, 19, 25                         batasAtas = 3.2                     Case 2, 8, 14, 20, 26                         batasAtas = 5.8                     Case 3, 9, 15, 21, 27                         batasAtas = 8.4                     Case 4, 10, 16, 22, 28                         batasAtas = 11.2                     Case 5, 11, 17, 23, 29                         batasAtas = 13.9                 End Select                  TBarCode51.Text = txtKodeBarcode.Text                 TBarCode51.BackStyle = BKS_Transparent                 TBarCode51.BCDraw Printer.hDC, Printer.ScaleX(batasKiri, vbCentimeters), Printer.ScaleY(batasAtas, vbCentimeters), Printer.ScaleX(3, vbCentimeters), Printer.ScaleY(1.5, vbCentimeters)             End If             posisi = posisi + 1         Loop         Printer.EndDoc          Screen.MousePointer = vbDefault     End If End Sub     dan terakhir kode untuk mencetak barcode kelompok :   Private Sub cmdCetak_Click()     Dim x           As Long     Dim y           As Long     Dim Index       As Integer      Dim sgLeft1     As Single     Dim sgleft2     As Single     Dim sgTop       As Single      Dim fExit       As Boolean      If MsgBox(\"Apakah proses pencetakan kode barcode ingin dilanjutkan ?\", vbExclamation + vbYesNo, \"Konfirmasi\") = vbYes Then         Screen.MousePointer = vbHourglass         DoEvents          Printer.PSet (0, 0), vbWhite         Printer.ScaleMode = vbPixels         sgTop = Printer.ScaleY(2.5, vbCentimeters)         sgLeft1 = Printer.ScaleX(1, vbCentimeters)          While fExit = False             x = 1             While fExit = False And x &lt;= 3                 y = 1                 While fExit = False And y &lt;= 4                     'top margin                     If y &gt; 1 Then                         sgTop = sgTop + Printer.ScaleY(3.5, vbCentimeters)                     Else                         sgTop = Printer.ScaleY(2.5, vbCentimeters)                     End If                      'left margin                     If x = 1 Then                         sgleft2 = Printer.ScaleX(1, vbCentimeters)                     ElseIf x = 2 Then                         sgleft2 = sgLeft1 + Printer.ScaleX(6.79, vbCentimeters)                     Else                         sgleft2 = sgLeft1 + Printer.ScaleX(6.64, vbCentimeters)                     End If                      If Not ((Index + 1) &gt; lstDaftarBarcode.ListCount) Then                         TBarCode51.Text = lstDaftarBarcode.List(Index)                         TBarCode51.BackStyle = BKS_Transparent                         TBarCode51.BCDraw Printer.hDC, sgleft2, sgTop, Printer.ScaleX(4.4, vbCentimeters), Printer.ScaleY(1, vbCentimeters)                     End If                      If (Index + 1) &gt; lstDaftarBarcode.ListCount Then                         fExit = True                     Else                         Index = Index + 1                     End If                      y = y + 1                 Wend                  sgLeft1 = sgleft2                 x = x + 1             Wend              If Not fExit Then                 Printer.NewPage                 sgTop = Printer.ScaleY(2, vbCentimeters)                 sgLeft1 = Printer.ScaleX(1.5, vbCentimeters)             End If          Wend          Printer.EndDoc         Screen.MousePointer = vbDefault     End If End Sub  Selamat MENCOBA :blush:  ","categories": ["Visual Basic"],
        "tags": ["Cetak barcode","kode barcode","Smart Library School","TBarcode"],
        "url": "http://coding4ever.net/blog/2010/11/13/cara-mudah-mencetak-kode-barcode/",
        "teaser": null
      },{
        "title": "Tutorial Active Report bagian 1",
        "excerpt":"Intro   Active Report adalah salah satu tool yang digunakan untuk pembuatan report di visual basic, mulai dari report yang sederhana sampai yang komplek, berikut contoh beberapa report yang bisa dibuat menggunakan active report.           Selain itu active report juga sudah terintegrasi dengan IDE visual basic sehingga pembuatan report pun menjadi lebih menyenangkan, lalu bagaimana cara meload datanya ? Caranya gampang cukup menggunakan query biasa seperti query-query yang digunakan dalam pembuatan aplikasi.   Untuk contoh pada tutorial pertama ini kita akan menampilkan data siswa dengan struktur tabel seperti berikut :      1. Mendesain report   Mendesain report di Active Report sama mudahnya seperti mendesain tampilan di form, tinggal drag komponennya kemudian ganti nilai properties masing-masing komponennya sesuai kebutuhan.   Oke langsung saja aktifkan project vb Anda kemudian klik kanan di nama project -&gt; Add -&gt; Data Dynamics ActiveReport 2.0      jika berhasil pada panel project explorer akan ketambahan node baru dengan nama Designers      kita akan mengganti nilai dari properties Name dan Caption seseusai setting berikut :   Nama = arLapSiswa Caption = Laporan Data Siswa      untuk properties yang lain bisa Anda ganti nilainya sesuai kebutuhan.   Berikutnya kita akan menambahkan judul report, objek yang akan digunakan adalah objek label      nilai caption dari labelnya kita abaikan saja, karena akan kita ganti pada saat runtime (program dijalankan).   Setelah selesai menambahkan judul reportnya, kita akan menambahkan judul kolom, objek yang digunakan masih sama yaitu label      selanjutnya kita akan menambahkan border untuk judul kolom nya, caranya adalah dengan menyeleksi label “No.” sampai “Tanggal Lahir”, kemudian klik kanan pada salah satu label yang diseleksi pilih Format Border         pilih jenis border pada pilihan Line Styles, kemudian pada bagian Preview border yang diaktifkan hanya bagian “Atas”, “Kiri” dan “Bawah”      selanjutkan kita akan menambahkan border untuk label ayah         Gimana? jadi terlihatkan perbedaannya kenapa dipisah pembuatan border label “Ayah” dengan label lainnya.   Hasil akhir penambahan border judul kolom      Berikutnya kita akan menambahkan objek TextBox yang akan digunakan untuk menampilkan data      Khusus untuk textbox “No.” (tag merah) properties Textnya diset = 0, untuk textBox lainnya diabaikan saja dan kemudian untuk menambahkan border langkah-langkahnya sama seperti sebelumnya, hanya saja border bagian “Atas” tidak aktifkan      kemudian untuk setting border textbox ayah      ada satu komponen lagi yang akan kita tambahkan yaitu komponen ADO Data Control dan saya rasa tidak perlu lagi dijelaskan apa kegunaan komponen ini.      Berikut adalah hasil akhir desain report siswanya.      2. Kode untuk report   Active Report sama seperti form dan komponen lainnya mempunyai event-event yang bisa kita isikan kode program sesuai kebutuhan, biasanya nama event tersebut diawali oleh nama sectionya, contoh :      pada contoh diatas section “Detail” mempunyai beberapa event yaitu AfterPrint, BeforePrint, Format.   Disini saya hanya akan mencontohkan penggunaan event Format dan BeforePrint.   Private Sub Detail_Format()     With adoSiswa.Recordset         If Not .EOF Then             txtNo.Text = Val(txtNo.Text) + 1              txtNIS.Text = .Fields(\"nomorinduk\").Value             txtNama.Text = .Fields(\"nama\").Value             txtTempatLahir.Text = \"\" &amp; .Fields(\"tempat_lahir\").Value ' untuk menghandle nilai null              If IsDate(.Fields(\"tgl_lahir\").Value) Then                 txtTglLahir.Text = Format(.Fields(\"tgl_lahir\").Value, \"dd/MM/yyyy\")             Else                 txtTglLahir.Text = \"\"             End If              txtAyah.Text = \"\" &amp; .Fields(\"ayah\").Value ' untuk menghandle nilai null         End If     End With End Sub  Sampai disini report sudah siap digunakan/dipanggil via aplikasi   3. Memanggil report dari aplikasi   Balik ke form visual basic kemudian buat desain form seperti gambar berikut :      kemudian untuk menampilkan reportnya ketik kode berikut :   Private Sub cmdPreview_Click()     Dim strCon  As String     Dim strSql  As String      strCon = \"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=\" &amp; App.Path &amp; \"\\sampleDb.mdb\"     strSql = \"SELECT * FROM siswa\"      With arLapSiswa         .adoSiswa.ConnectionString = strCon         .adoSiswa.Source = strSql          .lblHeader1.Caption = \"SEKOLAH MENGENGAH ...\"         .lblHeader2.Caption = \"Laporan Data Siswa\"          .Show     End With End Sub  Gimana ? Simple kan :)   jalankan program kemudian klik tombol “Tampilkan Report”, akan ditampilkan hasil preview data siswanya.      waduhh, ternyata setelah pindah ke halaman 2 ada data siswa yang nampil tidak sesuai harapan, lihat gambar berikut :      Setelah diusut ternyata penyebabnya adalah nilai dari tempat lahirnya terlalu panjang sehingga tampilan report jadi berantakan, nah bagaimana cara menyelesaikan masalah ini ? Disinilah peran penting dari event Detail_BeforePrint.   Oke kita kembali lagi ke desain report siswanya kemudian tambahkan kode berikut pada event Detail_BeforePrint :   Private Sub Detail_BeforePrint()     txtNo.Height = Detail.Height     txtNIS.Height = Detail.Height     txtNama.Height = Detail.Height     txtTempatLahir.Height = Detail.Height     txtTglLahir.Height = Detail.Height     txtAyah.Height = Detail.Height End Sub  Klo sudah jalankan lagi programnya dan kita lihat hasil reportnya      Case closed :grin: sampai ketemu lagi di seri tutorial active report berikutnya, insya Allah :blush:   Selamat MENCOBA :blush:  ","categories": ["Active Report","Visual Basic"],
        "tags": ["Active Report","Data Siswa"],
        "url": "http://coding4ever.net/blog/2010/11/16/tutorial-active-report-bagian-1/",
        "teaser": null
      },{
        "title": "Coding4Ever Advanced TextBox",
        "excerpt":"Project baru kebetulan harus saya kerjakan menggunakan Visual Basic .NET dan untuk menghemat kode-kode yang enggak produktif terutama yang berhubungan dengan proses input (khususnya TextBox) seperti proses enter, validasi huruf/angka, pemisah ribuan, dan perubahan warna objek pada saat focus/lost focus akhirnya saya sempatkan waktu untuk membuat komponen ini.   Jadi dengan menggunakan komponen ini menurut perkiraan saya (berarti masih bisa salah :grin:) bisa menghemat kode yang enggak berguna  sampai 10-20 %.   Untuk saat ini fitur tambahannya masih minim sih, tapi…. lumayan lah :grin:      Conversion ada 2 pilihan Normal dan UpperCase, jika dipilih UpperCase otomatis input menggunakan huruf besar.   Numeric Only   Letter Only   Thousand Separator/pemisah ribuan, untuk fitur ini masih ada kekurangan yaitu belum mendukung digit decimal.   Auto Enter, agar fitur ini berfungsi dengan baik maka harus diatur terlebih dulu properties TabIndexnya   EnterFocusColor   LeaveFocusColor   SelectionText     Oke kita lihat dulu demonya         klo udah kita masuk ke bagian dalamnya   Imports System.Drawing Imports System.Windows.Forms  &lt;ToolboxBitmap(GetType(AdvancedTextbox), \"AdvancedTextbox.bmp\")&gt; _ Public Class AdvancedTextbox     Inherits System.Windows.Forms.TextBox  #Region \"&gt;&gt; Enumerators &lt;&lt;\"      &lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt; _     Public Enum EConversion         Normal = 0         UpperCase = 1     End Enum  #End Region  #Region \"&gt;&gt; Declarations &lt;&lt;\"      Private mEnterFocusColor As Color = Color.White     Private mLeaveFocusColor As Color = Color.White      Private mIsSelectionText As Boolean = False     Private mIsThousandSeparator As Boolean = False     Private mIsNumericOnly As Boolean = False     Private mIsLetterOnly As Boolean = False     Private mIsAutoEnter As Boolean = False     Private mIsDecimal As Boolean = False      Private mConversion As EConversion  #End Region  #Region \"&gt;&gt; Properties &lt;&lt;\"      Public Overrides Property MaxLength() As Integer         Get             Return MyBase.MaxLength         End Get          Set(ByVal value As Integer)             If Me.mIsThousandSeparator AndAlso value &gt; 15 Then value = 15             MyBase.MaxLength = Value         End Set     End Property      &lt;System.ComponentModel.Category(\"AdvancedTextbox Properties\")&gt; _     &lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)&gt; _     Public Property EnterFocusColor() As Color         Get             Return mEnterFocusColor         End Get          Set(ByVal value As Color)             mEnterFocusColor = Value         End Set     End Property      &lt;System.ComponentModel.Category(\"AdvancedTextbox Properties\")&gt; _     &lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)&gt; _     Public Property LeaveFocusColor() As Color         Get             Return mLeaveFocusColor         End Get          Set(ByVal value As Color)             mLeaveFocusColor = Value         End Set     End Property      &lt;System.ComponentModel.Category(\"AdvancedTextbox Properties\")&gt; _     &lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)&gt; _     Public Property SelectionText() As Boolean         Get             Return mIsSelectionText         End Get          Set(ByVal value As Boolean)             mIsSelectionText = Value         End Set     End Property      &lt;System.ComponentModel.Category(\"AdvancedTextbox Properties\")&gt; _     &lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)&gt; _     Public Property ThousandSeparator() As Boolean         Get             Return mIsThousandSeparator         End Get          Set(ByVal value As Boolean)             mIsThousandSeparator = Value              If mIsThousandSeparator Then                 mIsNumericOnly = True                 Me.MaxLength = 15                 Me.TextAlign = HorizontalAlignment.Right                 Me.Text = \"0\"             End If         End Set     End Property      &lt;System.ComponentModel.Category(\"AdvancedTextbox Properties\")&gt; _     &lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)&gt; _     Public Property NumericOnly() As Boolean         Get             Return mIsNumericOnly         End Get          Set(ByVal value As Boolean)             mIsNumericOnly = Value         End Set     End Property      &lt;System.ComponentModel.Category(\"AdvancedTextbox Properties\")&gt; _     &lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)&gt; _     Public Property LetterOnly() As Boolean         Get             Return mIsLetterOnly         End Get          Set(ByVal value As Boolean)             mIsLetterOnly = Value         End Set     End Property      &lt;System.ComponentModel.Category(\"AdvancedTextbox Properties\")&gt; _     &lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)&gt; _     Public Property AutoEnter() As Boolean         Get             Return mIsAutoEnter         End Get          Set(ByVal value As Boolean)             mIsAutoEnter = Value         End Set     End Property      &lt;System.ComponentModel.Category(\"AdvancedTextbox Properties\")&gt; _     &lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)&gt; _     Public Property Conversion() As EConversion         Get             Return mConversion         End Get          Set(ByVal value As EConversion)             mConversion = Value         End Set     End Property  #End Region  #Region \"&gt;&gt; Private Function &lt;&lt;\"      Private Function ValidasiAngka(ByVal e As System.Windows.Forms.KeyPressEventArgs) As Boolean         Dim strValid As String = \"0123456789\"          If Not mIsThousandSeparator Then strValid += \".\"          If Strings.InStr(strValid, e.KeyChar) = 0 And Not (e.KeyChar = Strings.Chr(Keys.Back)) Then             Return True ' not valid         Else             Return False ' valid         End If      End Function ' ValidasiAngka      Private Function ValidasiHuruf(ByVal e As System.Windows.Forms.KeyPressEventArgs) As Boolean         Dim strValid As String = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ. \"          If Strings.InStr(strValid, e.KeyChar) = 0 And Not (e.KeyChar = Strings.Chr(Keys.Back)) Then             Return True ' not valid         Else             Return False ' valid         End If      End Function ' ValidasiHuruf      Private Function HurufBesar(ByVal e As System.Windows.Forms.KeyPressEventArgs) As Char         Return CChar(e.KeyChar.ToString().ToUpper())     End Function ' HurufBesar      Private Sub SeleksiText(ByVal sender As System.Windows.Forms.TextBox)         With sender             .SelectionStart = 0             .SelectionLength = .Text.Length         End With     End Sub  #End Region  #Region \"&gt;&gt; Control Events &lt;&lt;\"      Private Sub AdvancedTextbox_Enter(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Enter         If Me.mIsSelectionText Then Call SeleksiText(CType(sender, System.Windows.Forms.TextBox))         Me.BackColor = Me.mEnterFocusColor     End Sub      Private Sub AdvancedTextbox_KeyPress(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles Me.KeyPress         If Me.mIsAutoEnter Then If e.KeyChar = Strings.Chr(Keys.Return) Then SendKeys.Send (\"{Tab}\")          If Me.mIsNumericOnly Then             If mIsDecimal AndAlso e.KeyChar = \".\" Then                 e.Handled = True             Else                 e.Handled = ValidasiAngka(e)             End If          ElseIf Me.mIsLetterOnly Then             If Me.mConversion = EConversion.UpperCase Then e.KeyChar = HurufBesar(e)             e.Handled = ValidasiHuruf(e)          ElseIf Me.mConversion = EConversion.UpperCase Then             e.KeyChar = HurufBesar(e)         End If     End Sub      Private Sub AdvancedTextbox_Leave(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Leave         If Me.mIsNumericOnly Then If Not (Me.Text.Length &gt; 0) Then Me.Text = \"0\"         Me.BackColor = Me.mLeaveFocusColor     End Sub      Private Sub AdvancedTextbox_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.TextChanged          mIsDecimal = False          Dim index As Integer = Me.Text.IndexOf(\".\")         mIsDecimal = Not (index &lt; 0)          If Me.mIsNumericOnly AndAlso Me.mIsThousandSeparator Then             If Me.Text.Length &gt; 0 Then                 If Me.Text.Substring(0, 1) = \".\" Then Me.Text = Me.Text.Replace(\".\", \"\")                  Dim x As Long = CLng(Me.Text.Replace(\",\", \"\"))                 Dim strAfterFormat As String = Strings.FormatNumber(x, 0)                  If Me.Text &lt;&gt; strAfterFormat Then                     Dim pos As Integer = Me.Text.Length - Me.SelectionStart                      Me.Text = strAfterFormat                     If ((Me.Text.Length - pos) &lt; 0) Then                         Me.SelectionStart = 0                     Else                         Me.SelectionStart = Me.Text.Length - pos                     End If                 End If             End If         End If     End Sub  #End Region  End Class  Selamat MENCOBA :blush:   Referensi      Extended TextBox Component Class - VB.Net  ","categories": ["Visual Basic .NET"],
        "tags": ["AdvancedTextBox","Extended TextBox Component Class - VB.Net","membuat komponen"],
        "url": "http://coding4ever.net/blog/2010/12/01/coding4ever-advanced-textbox/",
        "teaser": null
      },{
        "title": "Backup dan Restore Database Firebird",
        "excerpt":"Dalam pembuatan aplikasi biasanya kita (terutama saya :grin:) selalu menyepelekan fitur yang satu ini, biasanya klo ditanya tentang fitur yang satu ini jawaban kita lebih kurang “udah copas aja databasenya trus dicompress, gampangkan” :grin:.   Tapi.. akhirnya saya kena batunya juga :grin:, beberapa waktu lalu saya dapat klien yang ngotot banget untuk dibuatkan fitur ini dan untungnya firebird sudah menyediakan tool untuk menghandle masalah ini yaitu dengan menggunakan tool gbak.   Pada artikel pertama ini kita akan bahas dulu penggunaan tool ini via command prompt, dan pada artikel berikutnya (insya Allah klo saya sempat :grin:) kita akan bahas penggunaannya langsung dari aplikasi.     Oke langsung aja aktifkan command promptnya, kemudian masuk ke folder “C:\\Program Files\\Firebird\\Firebird_2_1\\bin”      Untuk contoh disini kita akan membackup database yang ada di folder d:\\database, adapun nama databasenya misal DBSIS.FDB.   Di Firebird ekstensi hasil backup biasanya menggunakan “FBK” misal DBSIS.FBK   1. Backup Database   Perintah yang digunakan yaitu : gbak.exe -v -user  -password   . Contoh :   gbak -v -user SYSDBA -password masterkey d:\\database\\dbsis.fdb d:\\database\\backup\\dbsis.fbk     jika proses backup berhasil/selesai akan mendapatkan tampilan seperti berikut :      Kalo databasenya ada di komputer lain gimana? Apakah tetap bisa menggunakan tool ini ? Ya jelas bisa kita tinggal tambahkan aja alamat komputernya didepan penulisan nama databasenya. Contoh :   gbak -v -user SYSDBA -password masterkey 192.168.0.1:d:\\database\\dbsis.fdb d:\\database_lokal\\backup\\dbsis.fbk  Dengan asumsi 192.168.0.1 adalah nama komputer target, yang perlu diperhatikan disini adalah penulisan nama folder jika menggunakan spasi harus diapit tanda petik dua (“). Contoh :   gbak -v -user SYSDBA -password masterkey \"d:\\database sekolah\\dbsis.fdb\" d:\\database\\backup\\dbsis.fbk  atau   gbak -v -user SYSDBA -password masterkey 192.168.0.1:\"d:\\database sekolah\\dbsis.fdb\" d:\\database_lokal\\backup\\dbsis.fbk  2. Restore Database   Untuk proses restore perintah yang digunakan yaitu : gbak.exe -v -c -r -rep -user  -password   . Contoh :   gbak.exe -v -c -r -rep -user SYSDBA -password masterkey d:\\database\\backup\\dbsis.fbk d:\\database\\dbsis.fdb  Perintah diatas akan mereplace database lama (untuk contoh disini DBSIS.FDB) dengan syarat tidak ada koneksi aktif ke database tersebut.      Saya kira klo udah nyampe disini sudah selesai ternyata belum, kebetulan klien saya ini maniak MySQL jadi dia pengen hasil backupnya dalam bentuk file *.sql yang biasanya berisi struktur database plus datanya, pokoknya sama persislah seperti hasil backupannya MySQL.   Nah untuk mengekstrak struktur database firebird kita akan menggunakan tool lainnya yaitu isql.   Adapun perintah yang digunakan yaitu :   isql -ex &lt;nama_db_.fdb&gt; -d &lt;nama_db_.fdb&gt; -o &lt;nama_file_backup.sql&gt; -user &lt;nama_user&gt; -pass &lt;pass_user&gt;, contoh :  isql -ex d:\\database\\dbsis.fdb -d d:\\database\\dbsis.fdb -o d:\\database\\backup\\dbsis.sql -user SYSDBA -pass masterkey  jika berhasil kita akan mendapatkan file dbsis.sql di folder d:\\database\\backup, yang bersisi struktur lengkap database dbsis.fdb      Tapi isql masih mempunyai kekurangan yaitu hanya mengekstrak struktur databasenya saja, untuk datanya akan kita ekstrak secara manual dari aplikasi yang insya Allah kita bahas pada artikel berikutnya.   Selamat mencoba :blush:   Referensi :      GBAK   ISQL   ","categories": ["Firebird"],
        "tags": ["backup","firebird","gbak","isql","mysql","restore"],
        "url": "http://coding4ever.net/blog/2010/12/09/backup-dan-restore-database-firebird/",
        "teaser": null
      },{
        "title": "Menambahkan form input pada saat instalasi (inno setup)",
        "excerpt":"Adakalanya kita ingin menyederhanan proses konfigurasi aplikasi, sehingga sebagian konfigurasi kita pindah pada saat instalasi.   Misal kita akan menambahkan input profil klien seperti nama, telepon, alamat dan kota.      Jadi dengan menggunakan Inno Setup kita bisa dengan mudah melakukan hal ini, dan untuk lokasi penyimpanannya sendiri ada 2 pilihan yaitu disimpan dalam format file INI atau langsung ke registry windows.     Kita akan bahas satu-satu kodenya dan pada artikel ini saya tidak membahas skrip lengkap Inno Setupnya karna sudah saya bahas pada artikel yang lainnya, jadi fokus kita kali ini hanya di section [Code].   Berikut kodenya untuk menambahkan form input dan menyimpannya ke file dengan format INI.   [Code] var    INIInputPage: TInputQueryWizardPage;  procedure InitializeWizard(); begin   // Form Input   INIInputPage := CreateInputQueryPage(wpInfoAfter, 'Konfigurasi', 'Konfigurasi Program.',                                        'Isikan konfigurasi program ke dalam form di bawah ini.');    INIInputPage.Add('Nama', False);   INIInputPage.Add('Telepon', False);   INIInputPage.Add('Alamat', False);   INIInputPage.Add('Kota', False);    INIInputPage.Values[0] := GetPreviousData('Nama', '');   INIInputPage.Values[1] := GetPreviousData('Telepon', '');   INIInputPage.Values[2] := GetPreviousData('Alamat', '');   INIInputPage.Values[3] := GetPreviousData('Kota', ''); end;  // prosedur ketika user mengklik tombol kembali, setelah pengisian form procedure RegisterPreviousData(PreviousDataKey: Integer); begin   // tampilkan nilai sebelumnya yang sudah diinputkan user   SetPreviousData(PreviousDataKey, 'Nama', INIInputPage.Values[0]);   SetPreviousData(PreviousDataKey, 'Telepon', INIInputPage.Values[1]);   SetPreviousData(PreviousDataKey, 'Alamat', INIInputPage.Values[2]);   SetPreviousData(PreviousDataKey, 'Kota', INIInputPage.Values[3]); end;  // prosedur ketika user mengklik tombol lanjut, setelah pengisian form function NextButtonClick(CurPageID: Integer): Boolean; begin   Result := True;   if CurPageID = INIInputPage.ID then begin     // validasi input, untuk contoh disini saya validasi semua inputan harus diisi     if (Trim(INIInputPage.Values[0]) = '') or (Trim(INIInputPage.Values[1]) = '') or        (Trim(INIInputPage.Values[2]) = '') or (Trim(INIInputPage.Values[3]) = '') then begin        MsgBox('Anda harus mengisikan data secara lengkap!', mbError, MB_OK);        Result := False;      end else begin       // jika semua input form oke, tulis ke file dengan format INI       // otomatis akan disimpan di folder instalasi dengan nama konfig.ini       SetIniString('Konfigurasi', 'Nama', INIInputPage.Values[0], ExpandConstant('{app}') + '\\konfig.ini');       SetIniString('Konfigurasi', 'Telepon', INIInputPage.Values[1], ExpandConstant('{app}') + '\\konfig.ini');       SetIniString('Konfigurasi', 'Alamat', INIInputPage.Values[2], ExpandConstant('{app}') + '\\konfig.ini');       SetIniString('Konfigurasi', 'kota', INIInputPage.Values[3], ExpandConstant('{app}') + '\\konfig.ini');     end;   end; end;  Berikut contoh file INI yang dihasilkan dari kode diatas      Sedangkan untuk menyimpan langsung ke registry windows menggunakan perintah RegWriteStringValue   // jika semua input form oke, simpan ke registry windows RegWriteStringValue(HKEY_CURRENT_USER, 'Software\\K4m4r82`s Laboratory\\Sistem Informasi Sekolah', 'Nama', INIInputPage.Values[0]); RegWriteStringValue(HKEY_CURRENT_USER, 'Software\\K4m4r82`s Laboratory\\Sistem Informasi Sekolah', 'Telepon', INIInputPage.Values[1]); RegWriteStringValue(HKEY_CURRENT_USER, 'Software\\K4m4r82`s Laboratory\\Sistem Informasi Sekolah', 'Alamat', INIInputPage.Values[2]); RegWriteStringValue(HKEY_CURRENT_USER, 'Software\\K4m4r82`s Laboratory\\Sistem Informasi Sekolah', 'Kota', INIInputPage.Values[3]);  Jika kita lihat di registry windows, hasilnya lebih kurang seperti berikut :      Selamat mencoba :blush:  ","categories": ["Inno Setup","Tools Installer"],
        "tags": ["form input","inno setup","instalasi"],
        "url": "http://coding4ever.net/blog/2010/12/12/menambahkan-form-input-pada-saat-instalasi-inno-setup/",
        "teaser": null
      },{
        "title": "Property Builder",
        "excerpt":"Apapun bahasanya klo lagi ngoding di dot NET, biasanya enggak bakalan jauh-jauh dari aktivitas pembuatan kelas.   Kita ambil contoh pembuatan kelas sederhana yang hanya mempunyai 2 property (id dan keterangan), hasil kodenya (Visual Basic .NET) akan terlihat seperti berikut :   Public Class Pekerjaan      Private mPekerjaanID As Short ' deklarasi instance variable     Public Property PekerjaanID() As Short         Get             Return mPekerjaanID ' mengembalikan id pekerjaan         End Get          Set(ByVal value As Short)             mPekerjaanID = value ' mengeset id pekerjaan         End Set     End Property      Private mKeterangan As String ' deklarasi instace variabel     Public Property Keterangan() As String         Get             Return mKeterangan ' mengembalikan nama pekerjaan         End Get          Set(ByVal value As String)             mKeterangan = value ' mengeset nilai pekerjaan         End Set     End Property  End Class    Jadi untuk membuat sebuah property kita hanya membutuhkan instance variabel dan blok property seperti terlihat pada kode diatas, sederhana bukan ? :).   Tapi membuat property kelas akan sedikit menakutkan :grin: jika yang kita ambil contohnya adalah kelas Mahasiswa, biasanya kelas Mahasiswa mempunyai puluhan property bahkan nyampe ratusan (swear saya pernah melihatnya loh :lol:).   Jadi gimana solusinya ? Klo kita punya waktu luang mungkin bisa coba googling trus mencoba satu per satu plugin property builder yang ada.   Atau solusi yang lain kita buat sendiri, gampang kok :). Untuk desainnya yang sederhana aja seperti gambar berikut :      jangan lupa diatur juga properties Tab Ordernya      kita mulai dulu dengan kode tombol Add   Private Sub btnAdd_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnAdd.Click         Const TEMPLATE_READ_ONLY As String = \"Private m&lt;name&gt; As &lt;type&gt;\" &amp; vbCrLf &amp; _                                              \"Public ReadOnly Property &lt;name&gt;() As &lt;type&gt;\" &amp; vbCrLf &amp; _                                              \"    Get\" &amp; vbCrLf &amp; _                                              \"        Return m&lt;name&gt;\" &amp; vbCrLf &amp; _                                              \"    End Get\" &amp; vbCrLf &amp; _                                              \"End Property\" &amp; vbCrLf          Const TEMPLATE_WRITE_ONLY As String = \"Private m&lt;name&gt; As &lt;type&gt;\" &amp; vbCrLf &amp; _                                               \"Public WriteOnly Property &lt;name&gt;() As &lt;type&gt;\" &amp; vbCrLf &amp; _                                               \"    Set(ByVal value AS &lt;type&gt;)\" &amp; vbCrLf &amp; _                                               \"        m&lt;name&gt; = value\" &amp; vbCrLf &amp; _                                               \"    End Set\" &amp; vbCrLf &amp; _                                               \"End Property\" &amp; vbCrLf          Const TEMPLATE_BOTH As String = \"Private m&lt;name&gt; As &lt;type&gt;\" &amp; vbCrLf &amp; _                                         \"Public Property &lt;name&gt;() As &lt;type&gt;\" &amp; vbCrLf &amp; _                                         \"    Get\" &amp; vbCrLf &amp; _                                         \"        Return m&lt;name&gt;\" &amp; vbCrLf &amp; _                                         \"    End Get\" &amp; vbCrLf &amp; vbCrLf &amp; _                                         \"    Set(ByVal value AS &lt;type&gt;)\" &amp; vbCrLf &amp; _                                         \"        m&lt;name&gt; = value\" &amp; vbCrLf &amp; _                                         \"    End Set\" &amp; vbCrLf &amp; _                                         \"End Property\" &amp; vbCrLf          Dim result As String = String.Empty          If rdoReadOnly.Checked Then             result = TEMPLATE_READ_ONLY          ElseIf rdoWriteOnly.Checked Then             result = TEMPLATE_WRITE_ONLY          Else             result = TEMPLATE_BOTH         End If          result = result.Replace(\"&lt;name&gt;\", txtPropertyName.Text)         result = result.Replace(\"&lt;type&gt;\", Strings.StrConv(txtPropertyType.Text, VbStrConv.ProperCase))          mProperties.Add(result &amp; vbCrLf)         ListBox1.Items.Add(txtPropertyName.Text &amp; \" -&gt; \" &amp; txtPropertyType.Text)          txtPropertyName.Clear()         txtPropertyName.Focus()      End Sub  Pada kode diatas terlihat variabel mProperties yang saya deklarsikan menggunakan perintah berikut :   Private mProperties As New System.Collections.ArrayList  Jadi variabel mProperties bisa digunakan untuk menampung data lebih dari satu (array) dalam hal ini adalah instance variabel + blok property.   Kode berikutnya adalah tombol Copy :   Private Sub btnCopy_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnCopy.Click         Dim result As String = String.Empty          If mProperties.Count = 0 Then             MessageBox.Show(\"Belum ada property yang diinputkan !\", \"Peringatan\", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)             Return         End If          For Each itm As String In mProperties             result += itm         Next          Clipboard.Clear()         Clipboard.SetText(result) ' copy ke memory          mProperties.Clear()         txtPropertyType.Clear()         ListBox1.Items.Clear()          MessageBox.Show(\"Property berhasil di generate, selanjutnya tinggal copas ke editor code Anda\", \"Info\", MessageBoxButtons.OK, MessageBoxIcon.Information)     End Sub  Intinya kode diatas mengcopy data yang ada di variabel mProperties ke Clipboard.   Setelah itu coba jalankan programnya kemudian coba diinputkan nama Property berikut tipe datanya.      Klik tombol Copy selanjutnya copas ke editor code Anda.   Public Class Mahasiswa      Private mNpm As String     Public Property Npm() As String         Get             Return mNpm         End Get          Set(ByVal value As String)             mNpm = value         End Set     End Property      Private mNama As String     Public Property Nama() As String         Get             Return mNama         End Get          Set(ByVal value As String)             mNama = value         End Set     End Property      Private mTempatLahir As String     Public Property TempatLahir() As String         Get             Return mTempatLahir         End Get          Set(ByVal value As String)             mTempatLahir = value         End Set     End Property      Private mTanggalLahir As Date     Public Property TanggalLahir() As Date         Get             Return mTanggalLahir         End Get          Set(ByVal value As Date)             mTanggalLahir = value         End Set     End Property      Private mAlamat As String     Public Property Alamat() As String         Get             Return mAlamat         End Get          Set(ByVal value As String)             mAlamat = value         End Set     End Property  End Class  Dan… postingan kali ini pun selesai.   Selamat MENCOBA :blush:   Referensi :       Generate code for standard property procedures in VB .NET  ","categories": ["Visual Basic .NET"],
        "tags": ["ArrayList","properties","property builder","visual basic .net"],
        "url": "http://coding4ever.net/blog/2010/12/18/property-builder/",
        "teaser": null
      },{
        "title": "ExplorerBar Control for .NET",
        "excerpt":"Ketika memutuskan untuk beralih ke VB .NET salah satu komponen yang saya buru adalah ExplorerBar dan kabar baiknya vbaccelerator juga sudah menyediakan komponen ini, tapi kabar buruknya sample source codenya menggunakan C# .NET :frowning:.   Tapi tenang aja, dulu saya juga pernah iseng2x belajar bahasa ini, jadi proses konversi dari C# .NET ke VB .NET pun berjalan lancar :).   Oke, klo sudah enggak sabaran langsung aja download librarynya disini dan untuk sample aslinya (bahasa C# .NET) bisa didownload disini.   Sama seperti postingan saya sebelumnya, untuk menambahkan Bar Menu (menu induk) dan Item Menu (menu anak) saya pisah menjadi 2 fungsi yaitu :     Private Function SetBarMenu(ByVal explorerBar As vbAccelerator.Components.Controls.acclExplorerBar, _                             ByVal menuName As String, ByVal menuCaption As String, ByVal iconIndex As Integer) As explorerBar      Dim barMenu As explorerBar      barMenu = New explorerBar     With barMenu         .IsSpecial = True         .iconIndex = iconIndex         .Text = menuCaption         .Tag = menuName     End With      Return barMenu  End Function  dan   Private Function SetItemMenu(ByVal explorerBar As vbAccelerator.Components.Controls.acclExplorerBar, _                              ByVal menuName As String, ByVal menuCaption As String, ByVal iconIndex As Integer) As ExplorerBarLinkItem      Dim barItem As ExplorerBarLinkItem      barItem = New ExplorerBarLinkItem     With barItem         .iconIndex = iconIndex         .Text = menuCaption         .Tag = menuName ' ini berguna untuk menghandle menu yang diklik     End With      Return barItem End Function  Selanjutnya kita tinggal gabungkan ke dua fungsi diatas   Private Sub AddMenu()     Dim strSql As String = String.Empty     Dim barMenu As explorerBar      Try         With AcclExplorerBar1             .ImageList = ilsIcons             .TitleImageList = ilsTitleIcons             .DrawingStyle = ExplorerBarDrawingStyle.Custom              .BackColorStart = Color.FromArgb(100, 149, 237)             .BackColorEnd = Color.FromArgb(100, 149, 237)              ' menampilkan menu induk             strSql = \"SELECT id, menu_name, menu_caption \" &amp; _                      \"FROM menu_induk \" &amp; _                      \"ORDER BY id\"             Dim cmdMenuInduk As New OleDb.OleDbCommand(strSql, conn)             Dim dtrMenuInduk As OleDb.OleDbDataReader = cmdMenuInduk.ExecuteReader()             If dtrMenuInduk.HasRows Then                 While dtrMenuInduk.Read()                     barMenu = Me.SetBarMenu(AcclExplorerBar1, dtrMenuInduk.Item(\"menu_name\").ToString(), dtrMenuInduk.Item(\"menu_caption\").ToString(), 0)                     Dim barItems As ExplorerBarItemCollection = barMenu.Items                      ' menampilkan menu anak                     strSql = \"SELECT menu_name, menu_caption \" &amp; _                              \"FROM menu_anak \" &amp; _                              \"WHERE menu_induk_id = \" &amp; dtrMenuInduk.Item(\"id\").ToString() &amp; \" \" &amp; _                              \"ORDER BY id\"                     Dim cmdMenuAnak As New OleDb.OleDbCommand(strSql, conn)                     Dim dtrMenuAnak As OleDb.OleDbDataReader = cmdMenuAnak.ExecuteReader()                     If dtrMenuAnak.HasRows Then                         While dtrMenuAnak.Read()                             Dim barItem As ExplorerBarLinkItem                             barItem = Me.SetItemMenu(AcclExplorerBar1, dtrMenuAnak.Item(\"menu_name\").ToString(), dtrMenuAnak.Item(\"menu_caption\").ToString(), 0)                             barItems.Add (barItem)                         End While                     End If                     dtrMenuAnak.Close()                     cmdMenuAnak.Dispose()                      .Bars.Add (barMenu)                 End While             End If             dtrMenuInduk.Close()             cmdMenuInduk.Dispose()          End With          ' set warna menu bar (master, transaksi, biaya, laporan)         For Each bar As ExplorerBar In AcclExplorerBar1.Bars             bar.TitleForeColor = Color.FromArgb(0, 0, 128)             bar.TitleForeColorHot = Color.FromArgb(0, 0, 128)              bar.TitleBackColorStart = Color.FromArgb(234, 241, 253)             bar.TitleBackColorEnd = Color.FromArgb(100, 149, 237)              bar.BackColor = Color.FromArgb(176, 196, 222)              ' set warna menu item (barang, customer, supplier, dll)             For Each itm As ExplorerBarItem In bar.Items                 Dim textItem As ExplorerBarLinkItem = CType(itm, ExplorerBarLinkItem)                  textItem.ForeColor = Color.FromArgb(0, 0, 128) ' bar.TitleBackColorEnd                 textItem.ForeColorHot = Color.White ' bar.TitleBackColorStart             Next         Next      Catch ex As Exception         Debug.Print (ex.Message)      Finally         conn.Close()     End Try  End Sub  cuplikan source diatas menampilkan menu dari database (Ms Access), selanjutnya tinggal dipanggil di event Form_Load   Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load     Call AddMenu     Me.BackColor = Color.FromArgb(100, 149, 237) End Sub  terakhir untuk menghandle menu yang diklik kita memanfaatkan property Tag ExplorerBar, nilai dari property Tag ini sudah kita set pada saat memanggil fungsi SetItemMenu   Private Sub AcclExplorerBar1_ItemClick(ByVal sender As Object, ByVal args As vbAccelerator.Components.Controls.ExplorerBarItemClickEventArgs) Handles AcclExplorerBar1.ItemClick     Dim itmMenu As ExplorerBarLinkItem = CType(args.Item, ExplorerBarLinkItem)      If itmMenu.Tag IsNot Nothing Then         Select Case itmMenu.Tag.ToString()             Case \"mnuBarang\" ' TODO : tampilkan frmBarang disini             Case \"mnuCustomer\"             Case \"mnuSupplier\"             Case \"mnuPembelian\"             Case \"mnuReturPembelian\"             Case \"mnuPenjualan\"             Case \"mnuBiayaOperasional\"             Case \"mnuGajiKaryawan\"             Case \"mnuLapPembelian\"             Case \"mnuLapJthTempo\"             Case \"mnuLapPenjualan\"         End Select     End If End Sub     Selamat MENCOBA :blush:  ","categories": ["Visual Basic .NET"],
        "tags": ["ExplorerBar NET","VB .NET","vbAccelerator","Visual C#"],
        "url": "http://coding4ever.net/blog/2010/12/24/explorerbar-control-for-net/",
        "teaser": null
      },{
        "title": "Seri Kajian Motivasi (Yogyakarta)",
        "excerpt":"      Perumpamaan orang-orang yang menafkahkan hartanya di jalan Allah adalah serupa dengan sebutir benih yang menumbuhkan 7 bulir, pada tiap-tiap bulir seratus biji.    Allah melipatgandakan bagi siapa yang Dia kehendaki dan Allah Maha Luas lagi Maha Mengetahui.   (Al Baqarah : 261)  ","categories": [],
        "tags": ["kajian motivasi","kajian mpr","kajian perniagaan yang tidak pernah merugi","kajian pogung dalangan"],
        "url": "http://coding4ever.net/blog/2010/12/24/seri-kajian-motivasi-yogyakarta/",
        "teaser": null
      },{
        "title": "Menyembunyikan tulisan MERAH di ActiveReports for .NET 2 SP 2",
        "excerpt":"Active Report adalah salah satu tool keren untuk membuat report dan sebagai pengguna setia Active Report di VB 6, di VB .NET pun saya tetap setia menggunakan tool ini.   Setelah mencoba membuat report sederhana dan menampilkannya ada yang sedikit mengecewakan dari Active Report for .NET ini, mau tau ? lihat gambar berikut :        Jadi sesuai dengan judul diatas, kita akan mencoba menyembunyikan tulisan tersebut dengan cara ngawur tetapi terbukti bekerja :grin:.   Trus tool apa aja nih yang dibutuhkan ? Ngawurrr kita bukan cr4ck3r lagi, jadi enggak perlu tool yang aneh-aneh tapi cukup memanfaatkan komponen TextBox, Shape plus permainan properties, klo enggak percaya silahkan ikuti langkah-langkah berikut :   1. Tambahkan komponen Shape ke section PageFooter      kemudian atur propertiesnya seperti gambar dibawah ini :      2. Berikutnya tambahkan juga komponen TextBox ke section yg sama      atur juga propertiesnya seperti gambar berikut :      3. Terakhir properties yang perlu diatur adalah margin kiri, atas, kanan dan bawah         klo udah coba jalankan lagi aplikasi dan tampilkan reportnya      Case closed.   Selamat MENCOBA :blush:  ","categories": ["Visual Basic .NET"],
        "tags": ["ActiveReports for .NET 2 SP 2","properties","Shape","TextBox","VB .NET"],
        "url": "http://coding4ever.net/blog/2010/12/30/menyembunyikan-tulisan-merah-di-activereports-for-net-2-sp-2/",
        "teaser": null
      },{
        "title": "Menembus pertahanan database Firebird yang diproteksi",
        "excerpt":"   Sebelumnya saya mohon maaf jika ada pihak yang tidak berkenan atau merasa dirugikan dengan postingan kali ini, dan jika memang ada silahkan menghubungi Admin dan postingan ini akan dihapus.    Salah seorang pengunjung bertanya “bagaimana cara mengekspor data-data yang ada di database Zahir Accounting ke Ms Excel”.   Untuk bisa mengekspornya tentu saja kita harus tau dulu isi databasenya seperti apa terutama tabelnya, nah untuk demo Zahir Accounting sendiri bisa di download disini.     Setelah menginstallkan kita bisa langsung mengcopy database sample yang sudah disediakan aplikasi ini, secara default lokasinya ada :   C:\\Program Files\\Zahir Small Business System Ver. 5.1\\Sample Data\\SAMPLE.gdb  Selanjutnya install program IBExpert Personal Edition kemudian daftarkan sample database tersebut menggunakan user SYSDBA dan password masterkey dan untungnya Zahir Accounting tidak mengganti password default firebird pada saat instalasi.   Caranya dengan mengklik menu Database -&gt; Register Database, setelah itu akan tampil dialog registrasi database      Setelah itu klik ganda node DB ZAHIR ACCOUNTING, tapi apa yang terjadi yang muncul malah pesan error      Oke ternyata database ini diproteksi dengan cara membuat role dengan nama yang sama dengan user SYSDBA sehingga proses login pun tertolak.   Solusinya adalah kita membuat user baru misalnya dengan nama k4m4r82 dan password rahasia caranya dengan mengklik menu Tools -&gt; User Manager kemudian masukkan login SYSDBA dan password masterkey.      Kemudian pada dialog User Manager, klik tombol Add setelah itu isikan informasi user yang akan ditambahkan.      Setelah itu kita edit informasi registrasi database sebelumnya khusus dibagian User Name dan Password, caranya dengan mengklik kanan node DB ZAHIR ACCOUNTING kemudian pilih Database Registration Info…         kemudian klik ganda node DB ZAHIR ACCOUNTING dan login pun berhasil :)      Oke apakah sampai disini sudah selesai ? Tentunya belum kita akan lihat dulu isi salah satu tabel misal tabel ABC dengan cara mengklik ganda tabel tersebut kemudian mengklik tab Data dan wowww apa yang terjadi ?         ternyata user yang baru kita tambah tidak mempunyai hak akses untuk melihat data :frowning:, tamat sudah perjalanan kita dan pandangan pun menjadi buram :grin:.   Tapi… ada yang aneh ? Bagaimana aplikasi Zahir Accounting ini bisa login ke database klo login SYSDBAnya terlarang ??? Pasti ada user lain yang mungkin saja mempunyai level seperti SYSDBA yang digunakan untuk login.   Untungnya firebird menyediakan banyak tabel sistem, salah satunya yaitu RDB$USER_PRIVILEGES tabel ini berisi informasi daftar user yang berhak mengakses database, dan mudah-mudahan saja user yang baru kita tambahkan mempunyai hak akses untuk melihat isi table RDB$USER_PRIVILEGES.   Aktifkan SQL Editor dengan mengklik menu Tools -&gt; SQL Editor, kemudian ketik query seperti berikut :   SELECT DISTINCT RDB$USER FROM RDB$USER_PRIVILEGES;  Untuk menjalankan query diatas tekan tombol F9      Eh ternyata ada user dengan nama ZAHIRDBA, jangan-jangan ini nih user yang digunakan untuk login aplikasi.   Oke klo gitu kita coba aja dengan cara membuat user baru dengan nama ZAHIRDBA dan untuk passwordnya rahasia, tapi sebelumnya kita harus menutup terlebih dulu database yang aktif.      Kemudian klik menu Tools -&gt; User Management, login menggunakan SYSDBA dan password masterkey.      kemudian tambahkan user ZAHIRDBA dan password rahasia.      Setelah itu kita edit kembali informasi registrasi database menggunakan user ZAHIRDBA.      kemudian klik ganda node DB ZAHIR ACCOUNTING, yuph login berhasil :).      sekarang kita coba kembali melihat isi data tabel ABC dengan cara mengklik ganda tabel tersebut kemudian klik tab Data      dan hasilnya ….      Selamat mencoba :blush:  ","categories": ["Firebird"],
        "tags": ["firebird","masterkey","SYSDBA","Zahir Accounting"],
        "url": "http://coding4ever.net/blog/2011/01/03/menembus-pertahanan-database-firebird-yang-diproteksi/",
        "teaser": null
      },{
        "title": "Cara mudah memvalidasi input textbox",
        "excerpt":"Beberapa waktu lalu saya sudah pernah memposting beberapa kode untuk validasi input seperti validasi angka dan validasi huruf  dan kali ini kita akan bahas cara mudah untuk memvalidasi isian TextBox yang wajib diisini, tentunya fungsi disini baru terasa manfaatnya klo objek TextBox yang divalidasi lumayan banyak.   Oke kita lihat dulu gambar berikut :      Pada gambar diatas terlihat inputan yang berwarna merah yang akan kita validasi, klo dirinci lagi nama objeknya seperti berikut :      Nomor Mahasiswa (txtNoMhs)   Nama (txtNama)   Alamat (txtAlamat)   Ayah (txtAyah)     Nah untuk bagian kode tinggal kita tambahkan fungsi berikut :   Private Function IsEmptyText(ByVal objText() As System.Windows.Forms.TextBox) As Boolean     Dim i As Integer      For i = 0 To objText.GetUpperBound(0) ' lakukan perulangan sebanyak array objek         If Not (objText(i).Text.Length &gt; 0) Then ' validas inputkan text, klo enggak diisi tampilkan peringatan             MessageBox.Show(\"Maaf isian data belum lengkap !\", \"Peringatan\", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)             objText(i).Focus()              Return True          End If     Next      Return False End Function  Selanjutnya untuk menggunakannya pun lumayan mudah, cukup seperti berikut :   Private Sub btnCheck_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnCheck.Click     ' tinggal daftarkan obj textbox yg perlu divalidasi disini, gampangkan.     If Not IsEmptyText(New System.Windows.Forms.TextBox() {txtNoMhs, txtNama, txtAlamat, txtAyah}) Then         MessageBox.Show(\"Siippp semua data yang dibutuhkan sudah diisi\", \"Informasi\", MessageBoxButtons.OK, MessageBoxIcon.Information)          ' TODO : lanjutkan coding sesuai kebutuhan     End If End Sub  Selamat mencoba :blush:  ","categories": ["Visual Basic .NET"],
        "tags": ["TextBox","validasi input"],
        "url": "http://coding4ever.net/blog/2011/01/18/cara-mudah-memvalidasi-input-textbox/",
        "teaser": null
      },{
        "title": "Memadukan komponen MenuStrip dan ExplorerBar Control for .NET",
        "excerpt":"2 komponen ini merupakan komponen favorit saya untuk kelengkapan setiap aplikasi yang saya buat, dimana komponen MenuStrip digunakan untuk menampilkan menu bergaya klasik.      dan komponen ExplorerBar Control for .NET menampilkan menu dengan ciri khas  menu yg ada di Windows Explorernya XP      jadi dengan asumsi bahwa Anda sudah pernah membuat menu dengan MenuStrip dan ExplorerBar Control for .NET, maka fokus kita kali ini adalah pada poin-poin berikut :     1. Membuat menu  ExplorerBar Control for .NET berdasarkan menu MenuStrip   Tentunya agar poin 1 ini berjalan dengan baik, maka kita harus mempersiapkan terlebih dulu item menu stripnya sekalian menambahkan komponen ExplorerBar Control for .NET ke form.      berhubung persiapan sudah siap, kita masuk kebagian kode   Private Function SetBarMenu(ByVal explorerBar As acclExplorerBar, ByVal menuName As String, ByVal menuCaption As String, ByVal iconIndex As Integer) As explorerBar     Dim barMenu As explorerBar      barMenu = New explorerBar     With barMenu         .IsSpecial = True         .iconIndex = iconIndex         .Text = menuCaption         .Tag = menuName     End With      Return barMenu End Function  Private Function SetItemMenu(ByVal explorerBar As acclExplorerBar, ByVal menuName As String, ByVal menuCaption As String, ByVal iconIndex As Integer) As ExplorerBarLinkItem     Dim barItem As ExplorerBarLinkItem      barItem = New ExplorerBarLinkItem     With barItem         .iconIndex = iconIndex         .Text = menuCaption         .Tag = menuName ' ini berguna untuk menghandle menu yang diklik     End With      Return barItem End Function  Private Sub AddMenu()     Dim barMenu As explorerBar     Dim barItems As ExplorerBarItemCollection     Dim barItem As ExplorerBarLinkItem      Try         With AcclExplorerBar1             .DrawingStyle = ExplorerBarDrawingStyle.Custom              .BackColorStart = Color.FromArgb(100, 149, 237)             .BackColorEnd = Color.FromArgb(100, 149, 237)              ' ulang sebanyak menu induk (Master, Transaksi, Biaya dan Laporan)             For i As Integer = 0 To MenuStrip.Items.Count - 1                 ' menambahkan menu induk ke barItems                 barMenu = Me.SetBarMenu(AcclExplorerBar1, MenuStrip.Items(i).Name, MenuStrip.Items(i).Text, 0)                 barItems = barMenu.Items                  ' menampilkan menu anak berdasarkan menu induk                 For Each itm As Object In CType(MenuStrip.Items(i), ToolStripMenuItem).DropDownItems                     ' perlu divalidasi khusus menu Separator, klo enggak akan menyebabkan error                     ' pada saat konversi dari tipe ToolStripItemCollection ke ToolStripMenuItem                     If Not (Strings.InStr(1, itm.ToString(), \"ToolStripSeparator\") &gt; 0) Then                         Dim itmMenu As ToolStripMenuItem = CType(itm, ToolStripMenuItem)                          ' menambahkan menu anak ke barItems                         barItem = Me.SetItemMenu(AcclExplorerBar1, itmMenu.Name, itmMenu.Text, 0)                         barItems.Add (barItem)                     End If                 Next                  .Bars.Add (barMenu)             Next          End With          ' set warna menu bar (master, transaksi, biaya, laporan)         For Each bar As ExplorerBar In AcclExplorerBar1.Bars             bar.TitleForeColor = Color.FromArgb(0, 0, 128)             bar.TitleForeColorHot = Color.FromArgb(0, 0, 128)              bar.TitleBackColorStart = Color.FromArgb(234, 241, 253)             bar.TitleBackColorEnd = Color.FromArgb(100, 149, 237)              bar.BackColor = Color.FromArgb(176, 196, 222)              ' set warna menu item (barang, customer, supplier, dll)             For Each itm As ExplorerBarItem In bar.Items                 Dim textItem As ExplorerBarLinkItem = CType(itm, ExplorerBarLinkItem)                  textItem.ForeColor = Color.FromArgb(0, 0, 128)                 textItem.ForeColorHot = Color.White             Next         Next      Catch ex As Exception         Debug.Print (ex.Message)     End Try  End Sub  Selanjutnya tinggal panggil method AddMenu diatas di event Form_Load   Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load     Call AddMenu     Me.BackColor = Color.FromArgb(100, 149, 237) End Sub  Ada yg kelupaan :grin:, tambahkan juga Namespace vbAccelerator (ingat posisinya paling atas)   Imports vbAccelerator.Components.Controls  contoh output yg dihasilkan dari kode diatas :      Coba saja Anda tambahkan menu baru di MenuStrip maka otomatis akan nambah juga dimenu ExplorerBar nya, gimana ? Gampangkan :)   2. Membatasi menu yang ditampilkan ExplorerBar Control for .NET   Misalkan ada beberapa menu yang tidak ingin kita tampilkan di menu ExplorerBar Control for .NET, kita ambil contoh menu Barang (mnuBarang), Retur Pembelian (mnuReturPembelian), Retur Penjualan (mnuReturPenjualan) dan Gaji Karyawan (mnuGajiKaryawan).   Maka yg perlu kita lakukan ada melakukan sedikit revisi di method AddMenu   Private Sub AddMenu()     Dim barMenu As explorerBar     Dim barItems As ExplorerBarItemCollection     Dim barItem As ExplorerBarLinkItem      ' daftar menu yg tidak perlu ditampilkan di menu ExplorerBar Control for .NET     Dim abaikanMenuIni As String = \"mnuBarang,mnuReturPembelian,mnuReturPenjualan,mnuGajiKaryawan\"      Try         With AcclExplorerBar1             .DrawingStyle = ExplorerBarDrawingStyle.Custom              .BackColorStart = Color.FromArgb(100, 149, 237)             .BackColorEnd = Color.FromArgb(100, 149, 237)              ' ulang sebanyak menu induk (Master, Transaksi, Biaya dan Laporan)             For i As Integer = 0 To MenuStrip.Items.Count - 1                 ' menambahkan menu induk ke barItems                 barMenu = Me.SetBarMenu(AcclExplorerBar1, MenuStrip.Items(i).Name, MenuStrip.Items(i).Text, 0)                 barItems = barMenu.Items                  ' menampilkan menu anak berdasarkan menu induk                 For Each itm As Object In CType(MenuStrip.Items(i), ToolStripMenuItem).DropDownItems                     ' perlu divalidasi khusus menu Separator, klo enggak akan menyebabkan error                     ' pada saat konversi dari tipe ToolStripItemCollection ke ToolStripMenuItem                     If Not (Strings.InStr(1, itm.ToString(), \"ToolStripSeparator\") &gt; 0) Then                         Dim itmMenu As ToolStripMenuItem = CType(itm, ToolStripMenuItem)                          ' validasi menu yang ditampilkan disini                         If Not (Strings.InStr(1, abaikanMenuIni, itmMenu.Name) &gt; 0) Then                             ' menambahkan menu anak ke barItems                             barItem = Me.SetItemMenu(AcclExplorerBar1, itmMenu.Name, itmMenu.Text, 0)                             barItems.Add (barItem)                         End If                      End If                 Next                  .Bars.Add (barMenu)             Next          End With          ' set warna menu bar (master, transaksi, biaya, laporan)         For Each bar As ExplorerBar In AcclExplorerBar1.Bars             bar.TitleForeColor = Color.FromArgb(0, 0, 128)             bar.TitleForeColorHot = Color.FromArgb(0, 0, 128)              bar.TitleBackColorStart = Color.FromArgb(234, 241, 253)             bar.TitleBackColorEnd = Color.FromArgb(100, 149, 237)              bar.BackColor = Color.FromArgb(176, 196, 222)              ' set warna menu item (barang, customer, supplier, dll)             For Each itm As ExplorerBarItem In bar.Items                 Dim textItem As ExplorerBarLinkItem = CType(itm, ExplorerBarLinkItem)                  textItem.ForeColor = Color.FromArgb(0, 0, 128)                 textItem.ForeColorHot = Color.White             Next         Next      Catch ex As Exception         Debug.Print (ex.Message)     End Try  End Sub  revisinya ada di baris 7, 30-34      tuh kan beberapa menu kanannya udah lenyap.   3. Memanggil event handler MenuStrip dari ExplorerBar Control for .NET   Akhirnya nyampe juga dibagian yg saya tunggu2x, soalnya udah laper banget jadi klo postingan ini selesai bisa langsung sarapan pagi :grin:.   Klik ganda komponen ExplorerBarnya kemudian pindah ke event ItemClick   Private Sub AcclExplorerBar1_ItemClick(ByVal sender As Object, ByVal args As vbAccelerator.Components.Controls.ExplorerBarItemClickEventArgs) Handles AcclExplorerBar1.ItemClick     Dim itmMenu As ExplorerBarLinkItem = CType(args.Item, ExplorerBarLinkItem)      If itmMenu.Tag IsNot Nothing Then         For i As Integer = 0 To MenuStrip.Items.Count - 1             For Each itm As Object In CType(MenuStrip.Items(i), ToolStripMenuItem).DropDownItems                  ' jangan lupa divalidasi menu Separator pada saat pengecekan menu anak                 If Not (Strings.InStr(1, itm.ToString(), \"ToolStripSeparator\") &gt; 0) Then                     If Strings.InStr(1, CType(itm, ToolStripMenuItem).Name, itmMenu.Tag.ToString()) &gt; 0 Then                         CType(MenuStrip.Items(i), ToolStripMenuItem).DropDownItems(itmMenu.Tag.ToString()).PerformClick()                         Return                     End If                 End If             Next         Next     End If End Sub  Selamat MENCOBA :blush:  ","categories": ["Visual Basic .NET"],
        "tags": ["ExplorerBar Control for .NET","MenuStrip"],
        "url": "http://coding4ever.net/blog/2011/01/23/memadukan-komponen-menustrip-dan-explorerbar-control-for-net/",
        "teaser": null
      },{
        "title": "Kajian Penggalangan Dana Merapi \"Menggapai Bahagia dengan Sedekah\"",
        "excerpt":"   Hadirilah Pengajian Umum Penggalangan Dana Rehabilitasi Wilayah Bencana Merapi dengan tema “MENGGAPAI BAHAGIA DENGAN SEDEKAH”   Pemateri:   Ustadz Abu Ahmad Zaenal Abidin, Lc.   Sambutan:   Drs. H. Sri Purnomo, M.Si. (Bupati Sleman Periode 2010-2015)     Insya Allah dilaksanakan pada:   Ahad, 30 Januari 2011 Pukul 08.00 – 13.00 WIB Di Masjid Sunan Kalijaga, UIN Sunan Kalijaga Yogyakarta   Terbuka untuk umum Putra &amp; Putri   Informasi:   0812.274.5704 0818.0279.8127 0274.664.4862   Penyelenggara: Yayasan Pendidikan Islam Al-Atsari   Didukung oleh:           Laboratotium Agama Masjid Sunan Kalijaga            www.muslim.or.id            www.ypia.or.id       Rekening Donasi Merapi:   Bantuan dapat disalurkan ke:   Rekening BNI UGM Yogyakarta Nomor rekening 0125792540 a.n. Devi Novianti   Rekening Bank Syari’ah Mandiri Cabang 094 Kaliurang Yogyakarta Nomor rekening 0947008920 a.n. Ginanjar Indrajati Bintoro   Rekening Bank Mandiri Cabang Yogyakarta Gedung Magister 13705 Nomor rekening 137-00-065.4879-2 a.n. Bintoro   Rekening BCA Nomor rekening 0130537146 a.n. Hanif Nur Fauzi   Bagi anda yang telah berpartisipasi, harap mengkonfirmasikan diri kepada kami melalui sms dengan format sebagai berikut:   Nama/Alamat/TanggalKirim/JumlahUang/RekeningTujuan/Merapi   Ke nomor: 0852.5205.2345 (Wiwit Hardi P.) atau 0856.4305.2159 (Nizamul Adli)   Jazakallahu khairan bagi Anda yang membantu penyebaran publikasi ini.   sumber : infokajian.com  ","categories": [],
        "tags": ["kajian","penggalangan dana merapi","sleman","yogyakarta"],
        "url": "http://coding4ever.net/blog/2011/01/24/kajian-penggalangan-dana-merapi-menggapai-bahagia-dengan-sedekah/",
        "teaser": null
      },{
        "title": "Membaca file Excel dan Menampilkan datanya",
        "excerpt":"Ceritanya kali ini kita akan membuka file excel dan menampilkan datanya, dimana pengembangan artikel ini bisa digunakan untuk membuat program impor atau konversi data sederhana, yang mana hal ini sering kita lakukan pada saat implementasi sistem.   Karena biasanya permintaan dari klien data-data manual mereka yang biasa menggunakan format excel dikonversi ke sistem baru yang kita buat.   Nah untuk memudahkan pembacaan file excel, biasanya formatnya kita buat sesederhana mungkin. Contoh :        Atau klo mau dikasir warna dan border juga boleh :grin:      Nah berhubung postingan kali ini di “TAG” visual basic 6, otomatis sample programnya juga menggunakan bahasa ini.   Pertama kita buat dulu fungsi untuk membuka file ini (excel-red) dan jangan lupa tambahkan referensi Microsoft ActiveX Data Objects 2.xx library   Dim conXls As ADODB.Connection  Private Function openExcelFile(ByVal excelFile As String) As Boolean     On Error GoTo errHandle      Set conXls = New ADODB.Connection     conXls.ConnectionString = \"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=\" &amp; Replace(excelFile, Chr$(0), \"\") &amp; \";Extended Properties=\"\"Excel 8.0;HDR=Yes;IMEX=1\"\"\"     conXls.Open      openExcelFile = True      Exit Function errHandle:     openExcelFile = False End Function  Fungsi diatas adalah fungsi standar yang biasa kita gunakan untuk melakukan koneksi ke database seperti Ms Access, SQL Server, MySQL, Firebird de el el, hanya string koneksinya aja yang berbeda.   Berikut contoh penggunaan fungsi diatas.   Private Sub cmdTest_Click()     Dim rsExcel     As ADODB.Recordset     Dim strSql      As String      List1.Clear      ' misal kita membuka file data_siswa.xls yg ada di drive c     If openExcelFile(\"c:\\data_siswa.xls\") Then          ' selanjutnya data yg diambil ada di sheet1         ' sheet disini sama seperti tabel yang ada di database         strSql = \"SELECT * FROM [Sheet1$]\" ' penting !!!, jangan lupa menambahkan karakter $         Set rsExcel = New ADODB.Recordset         rsExcel.Open strSql, conXls, adOpenForwardOnly, adLockReadOnly         If Not rsExcel.EOF Then             Do While Not rsExcel.EOF                  ' tampilkan data yg ada sheet1 ke ListBox                 List1.AddItem rsExcel(1).Value &amp; \", \" &amp; rsExcel(2).Value                  rsExcel.MoveNext             Loop         End If         rsExcel.Close         Set rsExcel = Nothing     End If End Sub  dan hasilnya      Selamat mencoba :blush:  ","categories": ["Visual Basic"],
        "tags": ["Excel","impor","konversi data","Microsoft ActiveX Data Objects"],
        "url": "http://coding4ever.net/blog/2011/02/13/membaca-file-excel-dan-menampilkan-datanya/",
        "teaser": null
      },{
        "title": "SELECT SCOPE_IDENTITY(), SELECT LAST_INSERT_ID() dan RETURNING PK",
        "excerpt":"Yuph kali ini kita akan membahas fungsi menarik (SELECT SCOPE_IDENTITY(), SELECT LAST_INSERT_ID() dan RETURNING PK) yang dimiliki oleh database2x terkenal seperti SQL Server, MySQL dan Firebird.   Dari nama fungsinya kita bisa menebak kegunaan dari fungsi diatas yaitu untuk mendapatkan nilai ID terakhir (biasanya bertipe angka) yang diinputkan.   Saya dan mungkin Anda biasanya dalam merancang tabel untuk selalu menambahkan field ID dengan attribut IDENTITY/AUTONUMBER dan sekaligus dijadikan sebagai PRIMARY KEY.   Tentunya hal ini kita lakukan untuk mempermudah dalam proses manipulasi data (edit dan delete).   Contoh beberapa tabel yang biasanya menggunakan field ID untuk PRIMARY KEY dan sekaligus diset dengan attribut IDENTITY/AUTONUMBER        Bagi yang males membaca referensi (termasuk sy :grin:) biasa menuliskan kode berikut untuk mengINSERTkan dan mendapatkan nilai ID yang terakhir, kita ambil contoh tabel provinsi.   Private Sub btnInsert_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnInsert.Click     Dim lastID As Long = 0      ' langkah 1 - menambahkan data     strSql = \"INSERT INTO provinsi (keterangan) VALUES (@1)\"     Using cmd As New SqlClient.SqlCommand(strSql, conn)         With cmd             .Parameters.Clear()             .Parameters.AddWithValue(\"@1\", \"Riau\")              .ExecuteNonQuery()         End With     End Using      ' langkah 2 - mengambil id terakhir dg memanfaatkan fungsi MAX     strSql = \"SELECT MAX(id) FROM provinsi\"     Using cmd As New SqlClient.SqlCommand(strSql, conn)         lastID = Convert.ToInt32(cmd.ExecuteScalar())     End Using      ' tampilkan ID terakhir     MessageBox.Show(\"Last ID : \" &amp; lastID.ToString()) End Sub  Sekarang kita lihat bedanya jika memanfaatkan fungsi SELECT SCOPE_IDENTITY().   Private Sub btnInsert_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnInsert.Click     Dim lastID As Long = 0      strSql = \"INSERT INTO provinsi (keterangan) VALUES (@1) SELECT SCOPE_IDENTITY()\" ' ada tambahan SELECT SCOPE_IDENTITY()     Using cmd As New SqlClient.SqlCommand(strSql, conn)         With cmd             .Parameters.Clear()             .Parameters.AddWithValue(\"@1\", \"Riau\")              lastID = Convert.ToInt32(.ExecuteScalar())         End With     End Using      MessageBox.Show (\"Last ID : \" &amp; lastID.ToString()) End Sub  Gimana lebih simple kan ? :)   Oke sekarang kita lihat kode untuk MySQL(SELECT LAST_INSERT_ID) dan Firebird (RETURN KOLOM_PK).   ' MySQL Private Sub btnInsert_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnInsert.Click     Dim lastID As Long = 0      strSql = \"INSERT INTO provinsi (keterangan) VALUES (@1); SELECT LAST_INSERT_ID()\"     Using cmd As New MySqlClient.MySqlCommand(strSql, conn)         With cmd             .Parameters.Clear()             .Parameters.AddWithValue(\"@1\", \"Riau\")              lastID = Convert.ToInt32(.ExecuteScalar())         End With     End Using      MessageBox.Show (\"Last ID : \" &amp; lastID.ToString()) End Sub  ' Firebird Private Sub btnInsert_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnInsert.Click     Dim lastID As Long = 0      strSql = \"INSERT INTO provinsi (keterangan) VALUES (@1) RETURNING ID\" ' ID -&gt; kolom primary key     Using cmd As New FirebirdClient.FbCommand(strSql, conn)         With cmd             .Parameters.Clear()             .Parameters.AddWithValue(\"@1\", \"Riau\")              lastID = Convert.ToInt32(.ExecuteScalar())         End With     End Using      MessageBox.Show (\"Last ID : \" &amp; lastID.ToString()) End Sub  Untuk bisa mengakses database MySQL dan Firebird di Visual Basic .NET kita harus menginstall MySQL Connector/Net dan Firebird ADO.NET Data Provider.   Selamat mencoba :blush:  ","categories": ["Firebird","MySQL","SQL Server 2000","Visual Basic .NET"],
        "tags": ["AUTONUMBER","Firebird ADO.NET Data Provider","IDENTITY","MySQL Connector/Net","RETURNING PK","SELECT LAST_INSERT_ID","SELECT SCOPE_IDENTITY"],
        "url": "http://coding4ever.net/blog/2011/02/27/select-scope_identity-select-last_insert_id-dan-returning-pk/",
        "teaser": null
      },{
        "title": "Menyimpan dan Menampilkan Gambar di MySQL",
        "excerpt":"Ternyata masih ada sebagian om2x :grin: yang masih kesulitan untuk melakukan hal ini, tapi oke lah berhubung udah lama enggax posting kayaxnya enggak salah juga membahas permasalahan yang satu ini.   Dengan asumsi MySQL dan Visual Basic .NET sudah terinstall dengan baik hal selanjutnya yang perlu disiapkan adalah MySQL Connector/Net, disini saya menggunakan versi 6.2.4   Jadi silahkan download kemudian lakukan instalasi.   Selanjutnya kita akan menyiapkan sebuah tabel, misal dengan nama mahasiswa dengan struktur seperti berikut :   CREATE TABLE mahasiswa (     npm VARCHAR(10),     nama VARCHAR(50),     foto MEDIUMBLOB )    Gimana udah selesai ? Klo udah kita lanjutkan dengan membuat project baru kemudian tambahkan referensi MySql.Data (menu Project -&gt; Add Reference…)      Apakah udah cukup ? Belum tambahkan juga namespace (package klo istilah javanya) MySql.Data pada bagian paling atas kode program      Perintah diatas berguna untuk menyingkat penulisan kode program contoh :   Private conn As New MySql.Data.MySqlClient.MySqlConnection  bisa disingkat menjadi   Private conn As New MySqlClient.MySqlConnection  Selanjutnya kita akan desain tampilan program seperti gambar dibawah ini   ]({: .align-center}   komponen yang yang dibutuhkan 1 buah PictureBox dan 2 buah Button.   Melakukan koneksi   Nah cara yang paling gampang kita tempatkan aja kodenya dibagian constructor   Private conn As New MySqlClient.MySqlConnection Private strSql As String = String.Empty  Public Sub New()      ' This call is required by the Windows Form Designer.     InitializeComponent()      ' Add any initialization after the InitializeComponent() call.      ' kode untuk melakukan koneksi mulai dari sini     Dim strConn As String = \"server=127.0.0.1;uid=root;pwd=rahasia;database=test\"     conn.ConnectionString = strConn     conn.Open()  End Sub  Klo kelupaan lokasi constructornya dimana :grin:, caranya lihat gambar :      Meyimpan gambar   Kodenya sederhana banget, kita lihat cuplikannya   Private Sub btnSimpan_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnSimpan.Click     ' untuk contoh disini lokasi gambarnya saya hardcode     ' kita bisa kembangkan dengan memanfaatkan komponen OpenFileDialog     Dim fileName As String = \"E:\\Gambar\\k4m4r82.jpg\"      strSql = \"INSERT INTO mahasiswa (npm, nama, foto) VALUES (@1, @2, @3)\" ' ini perintah insert biasa     Using cmd As New MySqlClient.MySqlCommand(strSql, conn)         With cmd             .Parameters.Clear()             .Parameters.AddWithValue(\"@1\", \"02.02.4114\") ' npm             .Parameters.AddWithValue(\"@2\", \"Kamarudin\") ' nama             .Parameters.AddWithValue(\"@3\", IO.File.ReadAllBytes(fileName)) ' foto              .ExecuteNonQuery()         End With     End Using      MessageBox.Show(\"Data sudah disimpan\", \"Informasi\", MessageBoxButtons.OK, MessageBoxIcon.Information) End Sub  Menampilkan gambar   Private Sub btnTampil_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnTampil.Click     strSql = \"SELECT foto FROM mhs WHERE npm = @1\"      Using cmd As New MySqlClient.MySqlCommand(strSql, conn)         With cmd             .Parameters.Clear()             .Parameters.AddWithValue(\"@1\", \"02.02.4114\") ' npm              Using dtr As MySqlClient.MySqlDataReader = .ExecuteReader()                 If dtr.HasRows Then                     If dtr.Read() Then                         Dim ms As New IO.MemoryStream(CType(dtr.Item(\"foto\"), Byte()))                         PictureBox1.Image = Image.FromStream(ms) ' tampilkan gambarnya                     End If                 End If             End Using         End With     End Using End Sub     Selamat mencoba :blush:  ","categories": ["MySQL","Visual Basic .NET"],
        "tags": ["menampilkan gambar","meyimpan gambar","mysql","MySQL Connector/Net","MySqlConnection"],
        "url": "http://coding4ever.net/blog/2011/03/15/menyimpan-dan-menampilkan-gambar-di-mysql/",
        "teaser": null
      },{
        "title": "Backup dan Restore Database MySQL dari Aplikasi",
        "excerpt":"Artikel kali ini hanya posting ulang dari jawaban saya yang ada di artikel Membuat paket instalasi vb + mysql dengan NSIS, karena masih ada beberapa pengunjung yang bertanya tentang masalah ini.   Untuk proses backup kita cukup menggunakan tool bawaan MySQL yaitu mysqldump dan untuk restorenya menggunakan mysql.   Adapun perintah dasar untuk melakukan backup dan restore adalah sebagai berikut :   ' backup mysqldump -uUSER_NAME -pUSER_PASSWORD --routines NAMA_DATABASE &gt; LOKASI_FILE_BACKUP.SQL  ' restore mysql -uUSER_NAME -pUSER_PASSWORD NAMA_DATABASE &lt; LOKASI_FILE_BACKUP.SQL    parameter –routines ditambahkan jika database mempunyai fungsi/trigger   Sekarang tinggal kita siapkan kode berikut :   Private Declare Function OpenProcess Lib \"kernel32\" (ByVal dwDesiredAccess As Long, ByVal bInheritHandle As Long, ByVal dwProcessId As Long) As Long Private Declare Function WaitForSingleObject Lib \"kernel32\" (ByVal hHandle As Long, ByVal dwMilliseconds As Long) As Long Private Declare Function CloseHandle Lib \"kernel32\" (ByVal hObject As Long) As Long  Private Const SYNCHRONIZE       As Long = &amp;H100000 Private Const INFINITE          As Long = &amp;HFFFF  Private Sub execCommand(ByVal cmd As String)     Dim result  As Long     Dim lPid    As Long     Dim lHnd    As Long     Dim lRet    As Long      cmd = \"cmd /c \" &amp; cmd     result = Shell(cmd, vbHide)      lPid = result     If lPid &lt;&gt; 0 Then         lHnd = OpenProcess(SYNCHRONIZE, 0, lPid)         If lHnd &lt;&gt; 0 Then             lRet = WaitForSingleObject(lHnd, INFINITE)             CloseHandle (lHnd)         End If     End If End Sub  kemudian tinggal panggil di masing-masing proses (backup dan restore)   Dim cmd As String  Private Sub cmdBackup_Click()     Screen.MousePointer = vbHourglass     DoEvents      cmd = Chr(34) &amp; \"C:\\Program Files\\MySQL\\MySQL Server 5.1\\bin\\mysqldump\" &amp; Chr(34) &amp; \" -uroot -prahasia --routines --comments nama_database &gt; c:\\nama_database.sql\"     Call execCommand(cmd)      Screen.MousePointer = vbDefault     MsgBox \"done\" End Sub  Private Sub cmdRestore_Click()     Screen.MousePointer = vbHourglass     DoEvents      cmd = Chr(34) &amp; \"C:\\Program Files\\MySQL\\MySQL Server 5.1\\bin\\mysql\" &amp; Chr(34) &amp; \" -uroot -prahasia --comments nama_database &lt; c:\\nama_database.sql\"     Call execCommand(cmd)      Screen.MousePointer = vbDefault     MsgBox \"done\" End Sub  kode diatas dengan asumsi direktori bin MySQL ada di folder C:\\Program Files\\MySQL\\MySQL Server 5.1\\bin.   Selamat mencoba :blush:  ","categories": ["MySQL","Visual Basic"],
        "tags": ["backup","mysql","mysqldump","restore"],
        "url": "http://coding4ever.net/blog/2011/03/20/backup-dan-restore-database-mysql-dari-aplikasi/",
        "teaser": null
      },{
        "title": "Mengakses database MySQL menggunakan C# bagian 1",
        "excerpt":"Berhubung sudah mulai bosan bermain-main dengan Visual Basic 6 dan Visual Basic .NET kali ini kita akan menggunakan C# untuk mencoba membuat aplikasi sederhana mengakses database.   Database yang akan kita gunakan adalah MySQL versi 5.x dan untuk C# nya saya menggunakan versi .NET 2008.   Untuk menyederhanan postingan kali ini saya cukupkan dulu untuk mengakses 1 tabel yaitu tabel mahasiswa.   Adapun struktur tabelnya seperti berikut :        Untuk akses database kali ini kita akan menggunakan konsep DAO, walaupun enggak 100% :grin:, dimana kita akan memisahkan modul program menjadi beberapa layer/lapisan yaitu :      Presentation   Business Logic   Data Access   Kok mirip 3-Tier Architecture ya? :grin:   Untuk presentation layer berhubungan dengan UI (user interface) dalam artikel ini kita akan menggunakan Windows Form.   Business Logic biasanya berhubungannya dengan entity class dan entity class sendiri merupakan representasi tabel-tabel yang ada di database.   Terakhir Data Access yaitu bagian yang menangani urusan akses database.   1. Memulai project baru   Jalankan Visual Studio .NET kemudian aktifkan menu File -&gt; New -&gt; Project …         2. Membuat Presentation Layer   Presentation layer berhubungan dengan user interface atau tampilan, dan untuk tampilannya kita akan desain seperti berikut :      3. Membuat Business Logic   Business Logic ada hubungannya dengan entity class yang merupakan representasi dari tabel-tabel yang ada didatabase.   Berdasarkan struktur tabel diatas kita akan menambahkan class baru dengan nama Mahasiswa yang memiliki tiga property yaitu NomorMahasiswa, Nama dan Alamat.   Jadi property ini sudah mewakili method mutator dan accessor yang sudah biasa kita kenal penggunakannya di Java.   Sebelum kita menambahkan class Mahasiswa kita tambahkan dulu folder untuk mengelompok ke tiga layer diatas, caranya dengan mengklik kan project -&gt; Add -&gt; New Folder      kita akan menambahkan 3 folder yaitu Dao, Model dan View      jika sudah kita klik kanan folder Model -&gt; Add -&gt; Class …            pada gambar diatas tambahkan access modifier public agar class Mahasiswa bisa digunakan antar namespace (package kalo istilah javanya).   Oke sampai disini kita tinggal melengkapi kode untuk class Mahasiswa diatas, kode lengkapnya sebagai berikut :   namespace DemoDAO.Model {     public class Mahasiswa     {         private string nomorMahasiswa;         public string NomorMahasiswa         {             get { return nomorMahasiswa; }             set { nomorMahasiswa = value; }         }          private string nama;         public string Nama         {             get { return nama; }             set { nama = value; }         }          private string alamat;         public string Alamat         {             get { return alamat; }             set { alamat = value; }         }     } }  4. Membuat Data Access   Lapisan ini biasanya berisi operasi CRUD (Create, Read, Update, Delete), tapi kita akan menggunakan istilah yang sedikit berbeda untuk nama operasinya yaitu :      Save   Update   Delete   GetAll   GetByName   Biasanya untuk penamaan classnya cukup menambahkan Akhiran (Suffixes) Dao untuk setiap class entitynya.   Contoh untuk class entity Mahasiswa, biasanya class Data Accessnya diberi nama MahasiswaDao.   Oke langsung aja kita klik kanan folder Dao -&gt; Add -&gt; Class …            jangan lupa tambahkan juga keyword public pada class MahasiswaDaonya.   jadi hasil akhir sementar project kita seperti berikut :      Untuk mengakses database MySQL kita membutuhkan library MySql Connection yang bisa didownload disini.   Untuk tutorial kali ini saya menggunakan versi MySQL Connector/Net 6.2.4   Silahkan download library tersebut kemudian lakukan instalasi.   Adapun langkah-langkah untuk menambahkan library tersebut kedalam project adalah sebagi berikut :   Klik kanan References -&gt; Add References …         Selanjutnya kita tinggal melengkapi class MahasiswaDaonya.   1. Menambahkan namespace MySql.Data.MySqlClient dan DemoDAO.Model      namespace MySql.Data.MySqlClient dibutuhkan agar bisa menggunakan class-class untuk mengakses database MySQL sedangkan namespace DemoDAO.Model agar bisa mengakses class Mahasiswa dari class MahasiswaDao.   2. Menambah beberapa variabel pendukung seperti conn, strSql dan sebuah constructor   private MySqlConnection conn; private string strSql = string.Empty;  // constructor public MahasiswaDao(MySqlConnection conn) {     this.conn = conn; }  3. Menambahkan method Save, Update dan Delete   public int Save(Mahasiswa mhs) {     strSql = \"INSERT INTO mahasiswa (nomor_mahasiswa, nama, alamat) VALUES (@1, @2, @3)\";      using (MySqlCommand cmd = new MySqlCommand(strSql, conn))     {         cmd.Parameters.AddWithValue(\"@1\", mhs.NomorMahasiswa);         cmd.Parameters.AddWithValue(\"@2\", mhs.Nama);         cmd.Parameters.AddWithValue(\"@3\", mhs.Alamat);          return cmd.ExecuteNonQuery();     } }  public int Update(Mahasiswa mhs) {     strSql = \"UPDATE mahasiswa SET nama = @1, alamat = @2 WHERE nomor_mahasiswa = @3\";      using (MySqlCommand cmd = new MySqlCommand(strSql, conn))     {         cmd.Parameters.AddWithValue(\"@1\", mhs.Nama);         cmd.Parameters.AddWithValue(\"@2\", mhs.Alamat);         cmd.Parameters.AddWithValue(\"@3\", mhs.NomorMahasiswa);          return cmd.ExecuteNonQuery();     } }  public int Delete(string nomorMahasiswa) {     strSql = \"DELETE FROM mahasiswa WHERE nomor_mahasiswa = @1\";      using (MySqlCommand cmd = new MySqlCommand(strSql, conn))     {         cmd.Parameters.AddWithValue(\"@1\", nomorMahasiswa);          return cmd.ExecuteNonQuery();     } }  4. Menambahkan method GetAll dan GetByName   private Mahasiswa MappingRowToObject(MySqlDataReader dtr) {     Mahasiswa mhs = new Mahasiswa();      mhs.NomorMahasiswa = dtr[\"nomor_mahasiswa\"] is DBNull ? string.Empty : dtr[\"nomor_mahasiswa\"].ToString();     mhs.Nama = dtr[\"nama\"] is DBNull ? string.Empty : dtr[\"nama\"].ToString();     mhs.Alamat = dtr[\"alamat\"] is DBNull ? string.Empty : dtr[\"alamat\"].ToString();      return mhs; }  public List&lt;Mahasiswa&gt; GetAll() {     List&lt;Mahasiswa&gt; daftarMhs = new List&lt;Mahasiswa&gt;();      strSql = \"SELECT nomor_mahasiswa, nama, alamat FROM mahasiswa \" +              \"ORDER BY nama\";      using (MySqlCommand cmd = new MySqlCommand(strSql, conn))     {         using (MySqlDataReader dtr = cmd.ExecuteReader())         {             while (dtr.Read())             {                 daftarMhs.Add(MappingRowToObject(dtr));             }         }     }      return daftarMhs; }  public List&lt;Mahasiswa&gt; GetByName(string nama) {     List&lt;Mahasiswa&gt; daftarMhs = new List&lt;Mahasiswa&gt;();      strSql = \"SELECT nomor_mahasiswa, nama, alamat FROM mahasiswa \" +              \"WHERE nama LIKE @1 \" +              \"ORDER BY nama\";      using (MySqlCommand cmd = new MySqlCommand(strSql, conn))     {         cmd.Parameters.AddWithValue(\"@1\", \"%\" + nama + \"%\");          using (MySqlDataReader dtr = cmd.ExecuteReader())         {             while (dtr.Read())             {                 daftarMhs.Add(MappingRowToObject(dtr));             }         }     }      return daftarMhs; }  Selesai sudah pembuatan class MahasiswaDaonya sekarang tinggal bagaimana cara menggunakan class Mahasiswa dan MahasiswaDao pada Presentation layer, tapi … akan saya bahas pada postingan berikutnya :grin: insya Allah.   Selamat MENCOBA :blush:   Referensi :      Geeks Portal .NET Indonesia  ","categories": ["Visual C#","MySql"],
        "tags": ["3-Tier Architecture","Business Logic","c#","CRUD","dao","Data Access","mysql","MySQL Connector/Net 6.2.4","Presentation","Visual Studio .NET"],
        "url": "http://coding4ever.net/blog/2011/06/25/mengakses-database-mysql-menggunakan-c-bagian-1/",
        "teaser": null
      },{
        "title": "Mengakses database MySQL menggunakan C# bagian 2",
        "excerpt":"Seperti yang sudah saya janjikan pada postingan sebelumnya, kali ini kita akan membahas bagaimana cara memanfaatkan class Mahasiswa dan MahasiswaDao pada Presentation layer   Sudah merupakan rahasia umum :grin: untuk melakukan koneksi ke database MySQL kita membutuhkan string koneksi berikut :   SERVER=nama_server;DATABASE=nama_database;UID=user_database;PASSWORD=user_password    Terlihat dengan jelas ada beberapa informasi yang tentunya tidak ingin kita hardcode di program, kita ambil contoh informasi nama_server dan nama_database.   Kalo dulu mungkin kita biasanya meyimpan informasi tersebut di registry windows atau file dengan format INI, tapi kali ini kita akan memanfaatkan file XML yang sudah disediakan .NET   Bagaimana cara menambahkan file XML tersebut ikuti langkah-langkah berikut :            kemudian kita lengkapi kodenya seperti berikut :      gampang bukan ??? :)   Cara mengakses informasi pada file XML tersebut akan kita bahas pada saat pembuat class DBConnection.   Class DBConnection dari namanya kita sudah ngerti kalo class ini tugasnya untuk melakukan koneksi ke database dalam hal ini database MySQL.   Oke langsung saja kita tambahkan class baru.            Namespace (package kalo istilah javanya) MySql.Data.MySqlClient kita butuhkan untuk bisa menggunakan class-class akses database MySQL.   Sedangkan namespace System.Configuration dibutuhkan agar kita bisa menggunakan class ConfigurationSettings untuk mengakses file XML yang sudah kita buat pada langkah-langkah sebelumnya.   Berikut adalah kode lengkap class DBConnectionnya :   using MySql.Data.MySqlClient; using System.Configuration;  namespace DemoDAO {     public class DBConnection     {          private MySqlConnection conn = null;         private static DBConnection dbConn = null;          // constructor         private DBConnection()         {             if (conn == null)             {                 // cara membaca informasi yang ada pada file XML (App.config)                 string server = ConfigurationSettings.AppSettings[\"Server\"];                 string database = ConfigurationSettings.AppSettings[\"Database\"];                  string user = \"root\";                 string password = \"rahasia\";                  string strConn = \"SERVER=\" + server + \";DATABASE=\" + database + \";UID=\" + user + \";PASSWORD=\" + password;                  conn = new MySqlConnection(strConn);                 conn.Open();             }         }          public static DBConnection GetInstance()         {             if (dbConn == null) { dbConn = new DBConnection(); }              return dbConn;         }          public MySqlConnection GetConnection()         {             return this.conn;         }     } }  Sampai disini semua persiapan sudah oke, saatnya kita melengkapi kode program untuk Presentation layer dan untuk merefresh ingatan kita saya tampilkan kembali form mahasiswa yang sudah kita rancang pada postingan sebelumnya.      Aktifkan terlebih dulu FrmMahasiswanya kemudian masuk kebagian editor codenya setelah itu tambahkan kode berikut :      Namespace DemoDAO.Model dan DemoDAO.Dao dibutuhkan agar bisa mengakses class Mahasiswa dan MahasiswaDao.   1. Menyimpan Data   private void btnSimpan_Click(object sender, EventArgs e) {     // buat objek mhs     Mahasiswa mhs = new Mahasiswa();      // isi nilai masing-masing property     mhs.NomorMahasiswa = txtNomorMahasiswa.Text;     mhs.Nama = txtNama.Text;     mhs.Alamat = txtAlamat.Text;      result = mhsDao.Save(mhs); // panggil method Save     if (result &gt; 0)     {         MsgInfo(\"Data sudah disimpan\");         KosongkanInputan();          txtNomorMahasiswa.Focus();     }     else     {         MsgInfo(\"Data gagal disimpan\");     } }  2. Mengupdate Data   private void btnPerbaiki_Click(object sender, EventArgs e) {     // buat objek mhs     Mahasiswa mhs = new Mahasiswa();      // isi nilai masing-masing property     mhs.NomorMahasiswa = txtNomorMahasiswa.Text;     mhs.Nama = txtNama.Text;     mhs.Alamat = txtAlamat.Text;      result = mhsDao.Update(mhs); // panggil method Update     if (result &gt; 0)     {         MsgInfo(\"Data sudah disimpan\");         KosongkanInputan();          txtNomorMahasiswa.Focus();     }     else     {         MsgInfo(\"Data gagal disimpan\");     } }  3. Menghapus Data   private void btnHapus_Click(object sender, EventArgs e) {     result = mhsDao.Delete(txtNomorMahasiswa.Text); // panggil method Delete     if (result &gt; 0)     {         MsgInfo(\"Data sudah dihapus\");         KosongkanInputan();          txtNomorMahasiswa.Focus();     }     else     {         MsgInfo(\"Data gagal dihapus\");     } }  4. Menampilkan data   Untuk menampilkan data kita membutuhkan 2 methode yaitu FillToListView untuk menambahkan objek mahasiswa ke ListView dan LoadDataMahasiswa untuk mengambil data mahasiswa dari database dan menyimpannya ke objek mahasiswa.   Karena data mahasiswa yang ditampilkan bisa lebih dari satu disini kita bisa menggunakan class List untuk menampung objeknya.   private void FillToListView(Mahasiswa mhs) {      int noUrut = lvwMahasiswa.Items.Count + 1;      ListViewItem item = new ListViewItem(noUrut.ToString());      item.SubItems.Add(mhs.NomorMahasiswa);     item.SubItems.Add(mhs.Nama);     item.SubItems.Add(mhs.Alamat);      lvwMahasiswa.Items.Add(item); }  private void LoadDataMahasiswa() {     lvwMahasiswa.Items.Clear();      List&lt;Mahasiswa&gt; daftarMhs = mhsDao.GetAll();     foreach (Mahasiswa mhs in daftarMhs)     {         FillToListView(mhs); // panggil method FillToListView     } }  Setelah itu tinggal panggil method LoadDataMahasiswa di constructor FrmMahasiswa      5. Pencarian Data Berdasarkan Nama   Untuk pencarian data kita tinggal mengoverload method  LoadDataMahasiswa dimana kita menambahkan parameter nama dengan tipe string, selain itu method MahasiswaDao yang kita panggil adalah GetByName   private void LoadDataMahasiswa(string nama) {     lvwMahasiswa.Items.Clear();      List&lt;Mahasiswa&gt; daftarMhs = mhsDao.GetByName(nama);     foreach (Mahasiswa mhs in daftarMhs)     {         FillToListView(mhs);     } }  Selanjutnya tinggal dipanggil di event btnCari_Click   private void btnCari_Click(object sender, EventArgs e) {     LoadDataMahasiswa(txtKeywordPencarian.Text); }  Sebagai bonus :) saya akan tambahkan satu lagi method untuk pencarian data berdasarkan nomor mahasiswa, untuk melakukan ini kita akan menambahkan method GetByNoMahasiswa, adapun kodenya sebgai berikut :   public Mahasiswa GetByNoMahasiswa(string nomorMahasiswa) {     Mahasiswa mhs = null;      strSql = \"SELECT nomor_mahasiswa, nama, alamat FROM mahasiswa \" +              \"WHERE nomor_mahasiswa = @1\";      using (MySqlCommand cmd = new MySqlCommand(strSql, conn))     {         cmd.Parameters.AddWithValue(\"@1\", nomorMahasiswa);          using (MySqlDataReader dtr = cmd.ExecuteReader())         {             if (dtr.Read())             {                 mhs = MappingRowToObject(dtr);             }         }     }      return mhs; }  Method tersebut ditambahkan di class MahasiswaDao, selain itu kita juga menambahkan satu button lagi di FrmMahasiswa untuk memanggil method tersebut.      private void btnCariByNoMhs_Click(object sender, EventArgs e) {     Mahasiswa mhs = mhsDao.GetByNoMahasiswa(txtNomorMahasiswa.Text);     if (mhs != null)     {         txtNomorMahasiswa.Text = mhs.NomorMahasiswa;         txtNama.Text = mhs.Nama;         txtAlamat.Text = mhs.Alamat;          MsgInfo(\"Data mahasiswa ditemukan\");     }     else     {         MsgInfo(\"Nomor mahasiswa tidak ditemukan\");     } }  Akhirnya selesai juga, tapi mungkin saya butuh satu postingan lagi untuk menutup artikel berseri ini, insya Allah :).   Selamat MENCOBA :blush:  ","categories": ["Visual C#","MySql"],
        "tags": ["dao","DELETE","List","mysql","Save","UPDATE"],
        "url": "http://coding4ever.net/blog/2011/06/26/mengakses-database-mysql-menggunakan-c-bagian-2/",
        "teaser": null
      },{
        "title": "Hasil investigasi Google Talk",
        "excerpt":"Tadi malam iseng-iseng browsing salah satu web distributor pulsa elektrik trus ngeliat daftar perintah transaksi yang disediakan kemudian …. tuing-tuing :grin:        Eh ternyata ada perintah untuk mendaftarkan user id goolge talk, yang artinya bisa melakukan transaksi via google talk.   Karena penasaran langsung aja saya install Google Talk trus menjalankan program Spy++, dari hasil investigasi sementara didapat gambar-gambar berikut :      dari gambar diatas kita bisa mendapatkan** User ID Google Talk** dengan mengecek Window aktif yang nama classnya Chat View      kemudian untuk membaca pesan yang masuk urutan class yang harus kita cek adalah :   Chat View -&gt; AtlAxWin71 -&gt; Internet Explorer_Server   klo di win xp mungkin AtlAxWin71 menjadi AtlAxWinXP kali yah …      untuk membalas pesan, urutan class yang harus dilalui adalah :   Chat View -&gt; richEdit20W      Sekarang kita udah punya modal untuk menulis program Mesin Penjawab Otomatis Google Talk :grin:   Ayoooo siapa yang mau coba duluan :blush:  ","categories": ["Uncategorized"],
        "tags": ["AtlAxWin71","Chat View","Google Talk","Internet Explorer_Server","Mesin Penjawab Otomatis Google Talk","richEdit20W","Spy++"],
        "url": "http://coding4ever.net/blog/2011/06/29/hasil-investigasi-google-talk/",
        "teaser": null
      },{
        "title": "Beberapa alternatif mengosongkan TextBox",
        "excerpt":"Pertanyaan 1 :   Berdasarkan contoh form berikut buatkan perintah untuk mengosongkan semua inputan.        Jawab :   private void btnReset_Click(object sender, EventArgs e) {     textBox1.Clear();     textBox2.Clear();     textBox3.Clear();     textBox4.Clear();     textBox5.Clear();     textBox6.Clear();     textBox7.Clear();     textBox8.Clear(); }  Apakah ada cara yang lain ?   Jawab :   Ada, tambahkan method baru misal dengan nama ResetForm   private void ResetForm(Form frm) {     // cek semua objek yg ada di Form     foreach (object ctl in frm.Controls)     {         if (ctl.GetType().Name.Equals(\"TextBox\")) // jika TextBox         {             ((TextBox)ctl).Clear(); // kosongkan         }     } }  Kemudian tinggal panggil di event btnReset_Click   private void btnReset_Click(object sender, EventArgs e) {     ResetForm(this); }  Kodenya kelihatan lebih simple bukan dan jika method ResetFormnya kita jadikan method public yang sifatnya static maka bisa dipake untuk semua form.   Pertanyaan 2 :   Terjadi revisi form sebelumnya seperti berikut :      Apakah method diatas masih berfungsi dengan baik ?   Jawab :   Method diatas hanya berhasil mengosongkan TextBox yang ada di luar container GroupBox, jadi method ResetFormnya harus direvisi lagi :   private void ResetForm(Form frm) {     // cek semua objek yg ada di form     foreach (object ctl in frm.Controls)     {         if (ctl.GetType().Name.Equals(\"TextBox\")) // jika TextBox         {             ((TextBox)ctl).Clear(); // kosongkan         }         // tambahan pengecekan container GroupBox         else if (ctl.GetType().Name.Equals(\"GroupBox\"))         {             // cek semua objek yg ada di dalam GroupBox             foreach (object itm in ((GroupBox)ctl).Controls)             {                 if (itm.GetType().Name.Equals(\"TextBox\")) // jika TextBox                 {                     ((TextBox)itm).Clear(); // kosongkan                 }             }         }     } }  Kasus kedua juga sama jika objek TextBox dimasukkan kedalam container Panel, jadi harus ditambahkan pengecekan objek Panelnya.   Selamat MENCOBA :blush:  ","categories": ["Visual C#"],
        "tags": ["foreach","GroupBox","Reset Form","TextBox"],
        "url": "http://coding4ever.net/blog/2011/06/30/beberapa-alternatif-mengosongkan-textbox/",
        "teaser": null
      },{
        "title": "Tutorial Active Report bagian 2 - Grouping",
        "excerpt":"Setelah cukup lama tertunda akhirnya tutorial kedua dari yang pertama ini rilis juga.   Fokus pada tutorial kali ini adalah pembuatan format laporan yang sering digunakan yaitu grouping.   Contoh laporan yang akan kita buat adalah seperti berikut :        Masih menggunakan database yang sama pada tutorial pertama, kita akan tambahkan 2 buah tabel lagi yaitu kelas dan kelas_siswa            Sebelum membuat laporannya, kita liat dulu query yang digunakan untuk menampilkan data siswa berikutnya kelasnya   SELECT kelas.id AS kelas_id, kelas.keterangan AS kelas, siswa.nomor_induk, siswa.nama FROM siswa INNER JOIN (kelas INNER JOIN kelas_siswa ON kelas.id = kelas_siswa.kelas_id) ON siswa.nomor_induk = kelas_siswa.nomor_induk     Oke sampai disini persiapan sudah cukup, saatnya kita membuka project pada tutorial pertama klik kanan di nama project -&gt; Add -&gt; Data Dynamics ActiveReport 2.0      jika berhasil akan ditambahkan sub node baru dengan nama ActiveReport1      kemudian ganti properties namenya menjadi arLapSiswaPerKelas dan caption menjadi Laporan Data Siswa Per Kelas      Selanjutnya kita akan menambahkan section Group dengan cara mengklik kanan salah satu section (PageHeader atau Detail) -&gt; Insert -&gt; Group Header/Footer      jika berhasil akan ditambahkan 2 section baru yaitu GroupHeader1 dan GroupFooter1      kemudian ganti properties namenya menjadi grpKelasID      field kelas_id mengacu pada query diatas   untuk format laporannya sesuai dengan contoh diatas      bagaimana cara mendesainnya sudah saya bahas tuntas disini.   Setelah desain reportnya jadi, kita akan menambahkan beberapa baris kode di event Detail_Format      kemudian ketik kode berikut :   Private Sub Detail_Format()     With adoSiswaPerKelas.Recordset         If Not .EOF Then             txtNo.Text = Val(txtNo.Text) + 1             txtNoInduk.Text = .Fields(\"nomor_induk\").Value             txtNama.Text = .Fields(\"nama\").Value         End If     End With End Sub  selanjutnya kita akan menambahkan kode di event Detail_BeforePrint      Private Sub Detail_BeforePrint()     txtNo.Height = Detail.Height     txtNoInduk.Height = Detail.Height     txtNama.Height = Detail.Height End Sub  terakhir event grpKelasID_Format   Private Sub grpKelasID_Format()     With adoSiswaPerKelas.Recordset         If Not .EOF Then             txtKelas.Text = .Fields(\"kelas\").Value         End If     End With End Sub  kemudian aktifkan form yang sudah ada setelah itu tambahkan 1 buah tombol untuk menampilkan laporan siswa per kelas      adapun untuk kodenya seperti berikut :   Private Sub cmdPreviewSiswaPerKelas_Click()     Dim strCon  As String     Dim strSql  As String      strCon = \"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=\" &amp; App.Path &amp; \"\\sampleDb.mdb\"     strSql = \"SELECT kelas.id AS kelas_id, kelas.keterangan AS kelas, siswa.nomor_induk, siswa.nama \" &amp; _              \"FROM siswa INNER JOIN (kelas INNER JOIN kelas_siswa ON kelas.id = kelas_siswa.kelas_id) ON siswa.nomor_induk = kelas_siswa.nomor_induk\"      With arLapSiswaPerkelas         .adoSiswaPerKelas.ConnectionString = strCon         .adoSiswaPerKelas.Source = strSql          .lblHeader1.Caption = \"SEKOLAH MENGENGAH ...\"         .lblHeader2.Caption = \"Laporan Data Siswa Per Kelas\"          .Show     End With End Sub  Jalankan program kemudian klik tombol “Tampilkan Report Siswa Per Kelas”      Ada yang aneh pada laporan diatas, nomor urut untuk kelas VII B (UNGGULAN) harusnya dimulai dari 1 bukan 12 (melanjutkan nomor urut kelas sebelumnya).   Untuk menyelesaikan masalah ini kita harus kembali ke desain reportnya kemudian aktifkan event grpKelasID_Format setelah itu tambahkan kode berikut :   txtNo.text = \"0\"  untuk kode lengkapnya seperti berikut :   Private Sub grpKelasID_Format()     With adoSiswaPerKelas.Recordset         If Not .EOF Then             txtNo.Text = \"0\" ' reset nomor urut kelas             txtKelas.Text = .Fields(\"kelas\").Value         End If     End With End Sub  coba dijalankan lagi programnya kemudian klik tombol “Tampilkan Report Siswa Per Kelas”      Yuph nomor urut untuk kelas berikutnya sudah dimulai dari 1 :)   Untuk postingan kali ini rasanya cukup sampai disini, postingan berikutnya insya Allah kita masih akan membahas kasus yang sama (menampilkan daftar siswa per kelas) tetapi dengan memanfaatkan Sub Report.   Selamat MENCOBA :blush:  ","categories": ["Active Report","Visual Basic"],
        "tags": ["Action Report","Data Siswa","Data Siswa Per Kelas","Grouping","Sub Report"],
        "url": "http://coding4ever.net/blog/2011/07/24/tutorial-active-report-bagian-2-grouping/",
        "teaser": null
      },{
        "title": "Mengakses multi database dengan satu Namespace",
        "excerpt":"Bagi Anda yang suka gonta ganti pasangan database mungkin bisa mencoba namespace yang satu ini.   System.Data.Common yuph itulah nama namespacenya, namespace super yang di dalamnya terdapat class-class generic untuk mengakses database.   Dengan memanfaatkan class-class generic tersebut jika terjadi perubahan database kita cukup merubah beberapa baris kode.   Sebelumnya kita lihat dulu bagaimana cara mengakses database tanpa menggunakan namespace ini.     1. Mengakses database Ms Access   using System.Data.OleDb;  namespace MultiDatabase {     public partial class FrmSiswa : Form     {         private OleDbConnection conn = null;          // constructor         public FrmSiswa()         {             InitializeComponent();              string appPath = System.Windows.Forms.Application.StartupPath;             string strConn = \"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=\" + appPath + \"\\\\sampleDb.mdb\";              conn = new OleDbConnection(strConn);             conn.Open();         }          private void btnLoadData_Click(object sender, EventArgs e)         {             string strSql = \"SELECT * FROM siswa\";              OleDbCommand cmd = new OleDbCommand(strSql, conn);             OleDbDataReader dtr = cmd.ExecuteReader();             while (dtr.Read())             {                 listBox1.Items.Add(dtr[\"nama\"]);             }             dtr.Close();             conn.Close();         }      } }  2. Mengakses database Firebird   using FirebirdSql.Data.FirebirdClient;  namespace MultiDatabase {     public partial class FrmSiswa : Form     {         private FbConnection conn = null;          // constructor         public FrmSiswa()         {             InitializeComponent();              string appPath = System.Windows.Forms.Application.StartupPath;              string strConn = \"data source=127.0.0.1;initial catalog=\" + appPath + \"\\\\sampleDb.FDB;user id=SYSDBA;password=masterkey;dialect=3\";              conn = new FbConnection(strConn);             conn.Open();         }          private void btnLoadData_Click(object sender, EventArgs e)         {             string strSql = \"SELECT * FROM siswa\";              FbCommand cmd = new FbCommand(strSql, conn);             FbDataReader dtr = cmd.ExecuteReader();             while (dtr.Read())             {                 listBox1.Items.Add(dtr[\"nama\"]);             }             dtr.Close();             conn.Close();         }      } }  Nah dari dua sample diatas untuk mengakses database Ms Access kita membutuhkan namespace System.Data.OleDb dengan class akses databasenya seperti OleDbConnection, OleDbCommand,  OleDbDataReader sedangkan untuk mengakses database Firebird kita membutuhkan namespace FirebirdSql.Data.FirebirdClient dengan class akses databasenya FbConnection, FbCommand dan FbDataReader.   Tentu ini akan sangat merepotkan jika kita akan melakukan migrasi database dan harus mengganti satu persatu namespace dan classnya secara manual :cry:   Sekarang kita coba jika menggunakan namespace System.Data.Common   using System.Data.Common;  namespace MultiDatabase {     public partial class FrmSiswa : Form     {         private DbConnection conn = null;          // constructor         public FrmSiswa()         {             InitializeComponent();              string appPath = System.Windows.Forms.Application.StartupPath;              string providerName = \"System.Data.OleDb\";             string strConn = \"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=\" + appPath + \"\\\\sampleDb.mdb\";              DbProviderFactory provider = DbProviderFactories.GetFactory(providerName);             conn = provider.CreateConnection();             conn.ConnectionString = strConn;             conn.Open();          }          private void btnLoadData_Click(object sender, EventArgs e)         {             string strSql = \"SELECT * FROM siswa\";              DbCommand cmd = conn.CreateCommand();             cmd.CommandText = strSql;             cmd.CommandType = CommandType.Text;              DbDataReader dtr = cmd.ExecuteReader();             while (dtr.Read())             {                 listBox1.Items.Add(dtr[\"nama\"]);             }             dtr.Close();             conn.Close();         }      } }  Jika terjadi migrasi database dari Ms Access ke Firebird kita cukup mengganti baris 16 dan 17   string providerName = \"FirebirdSql.Data.FirebirdClient\"; string strConn = \"data source=127.0.0.1;initial catalog=\" + appPath + \"\\\\sampleDb.FDB;user id=SYSDBA;password=masterkey;dialect=3\";  Dan tentunya juga perlu melakukan penyesuai query-query spesifik untuk masing-masing database.   Misal di Ms Access untuk membatasi baris yang ditampilkan menggunkan keyword TOP   SELECT TOP 10 * FROM siswa  Sedangkan di Firebird menggunakan keyword ROWS   SELECT * FROM siswa ROWS 10  Selamat MENCOBA :blush:  ","categories": ["Visual C#"],
        "tags": ["FbCommand","FbConnection","FbDataReader","firebird","FirebirdSql.Data.FirebirdClient","ms access","OleDbCommand","OleDbDataReader","System.Data.Common","System.Data.OleDb"],
        "url": "http://coding4ever.net/blog/2011/07/29/mengakses-multi-database-dengan-satu-namespace/",
        "teaser": null
      },{
        "title": "Melewatkan data antar form",
        "excerpt":"Melakukan hal ini mungkin merupakan hal yang sepele bagi programmer Visual Basic 6 seperti saya dan Anda :grin:, kita ambil contoh gambar berikut :        Untuk melakukannya di VB 6 kita cukup mengetikan kode berikut :   Private Sub cmdTampilForm2_Click()     With Form2         .Text1.Text = Text1.Text         .Text2.Text = Text2.Text         .Text3.Text = Text3.Text          .Show vbModal     End With End Sub  Hemmm simple bukan ??? Bagaimana dengan C# tentu tidak segampang kode diatas dan ini mungkin salah satu penyebab banyak programmer VB 6 yang enggan mempelajari bahasa yang satu ini :mad:.   Ada banyak solusi tapi yang kita bahasa disini cukup dengan memanfaatkan constructor.   Constructor adalah method khusus yang akan dipanggil otomatis setiap kita membuat objek dari sebuah class.   Jadi kita akan menambahkan constructor baru di Form 2 istilah kerennya sih overloading maksudnya kita membuat method dengan nama yang sama tetapi dengan signature yang berbeda, signature disini mengacu ke parameter.   Berikut kode Form 2:   namespace MelewatkanDataAntarForm {     public partial class Form2 : Form     {         // constructor default         // otomatis dibuatkan pada saat kita menambah form baru         public Form2()         {             InitializeComponent();         }          // constructor baru yang ditambahkan         // dengan 3 signature(parameter)         public Form2(string t1, string t2, string t3) : this() // panggil constructor default         {             textBox1.Text = t1;             textBox2.Text = t2;             textBox3.Text = t3;         }     } }  Nah bagaimana cara memanggil Form 2 tersebut dari Form 1 berikut kodenya :   private void button1_Click(object sender, EventArgs e) {     Form2 frm = new Form2(textBox1.Text, textBox2.Text, textBox3.Text);     frm.ShowDialog(); }  Dari contoh diatas data yang kita lewatkan cuma 3 yaitu yang diambil dari textBox1, textBox2 dan textBox3.   Bagaimana klo data yang kita lewatkan ada 10 atau 20 ? Tentu akan kurang keren klo kita harus membuat parameter sebanyak jumlah data yang akan dilewatkan.   Jadi kita akan coba solusinya berikut dengan menambahkan 1 constructor lagi dengan 1 parameter.   public Form2(object[] data) : this() // panggil constructor default {     textBox1.Text = data[0].ToString();     textBox2.Text = data[1].ToString();     textBox3.Text = data[2].ToString(); }  Revisi kode pemanggilan Form 2:   private void button1_Click(object sender, EventArgs e) {     object[] data = { textBox1.Text, textBox2.Text, textBox3.Text };      Form2 frm = new Form2(data);     frm.ShowDialog(); }  Sampai disini, kasus pertama sudah selesai sekarang kondisinya kita balik, data yang akan dilewatkan dari Form 2 ke Form 1.   Sebelumnya kita lihat dulu kode program menggunakan VB 6   Private Sub cmdOk_Click()     With Form1         .Text1.Text = Text1.Text         .Text2.Text = Text2.Text         .Text3.Text = Text3.Text     End With End Sub  Seperti biasa memprogram di VB 6 memang membuat hidup lebih mudah :)   Bagaimana dengan C#, tentu kita tidak bisa mengguna solusi sebelumnya karena Form 1 sudah nampil, jadi kita akan menambahkan 1 buah interface dengan 1 method abstractnya misal dengan nama Ok   namespace MelewatkanDataAntarForm {     public interface IListener     {         void Ok(object[] data);     } }  Method Ok akan kita implementasikan di Form 1 sedangkan untuk Form 2 kita akan menambahkan 1 buah properties yang nilainya akan kita isi dari Form 1.   Kode Form 2 :   private IListener listener; public IListener SetListener {     set { listener = value; } }  Setelah itu kita panggil kode berikut untuk melewatkan datanya ke Form 1   private void btnOk_Click(object sender, EventArgs e) {     if (listener != null)     {         object[] data = { textBox1.Text, textBox2.Text, textBox3.Text };         listener.Ok(data);     } }  Untuk Form 1 kita akan mengimplementasikan interface IListener      Adapun kode implementasi dari method Oknya adalah sebagai berikut :   public void Ok(object[] data) {     textBox1.Text = data[0].ToString();     textBox2.Text = data[1].ToString();     textBox3.Text = data[2].ToString(); }  Terakhir kita revisi lagi kode pemanggilan Form 1 nya   private void button1_Click(object sender, EventArgs e) {     object[] data = { textBox1.Text, textBox2.Text, textBox3.Text };      Form2 frm = new Form2(data);     frm.SetListener = this; // set listener form 2 disini     frm.ShowDialog(); }  Selamat MENCOBA :blush:  ","categories": ["Visual C#"],
        "tags": ["c#","constructor","interface","listener","visual basic 6"],
        "url": "http://coding4ever.net/blog/2011/08/09/melewatkan-data-antar-form/",
        "teaser": null
      },{
        "title": "Tutorial Active Report bagian 3 - Sub Report",
        "excerpt":"Walaupun sedikit telat janji akan tetap saya penuhi untuk membahas ulang kasus pada postingan sebelumnya menggunakan sub report.   Untuk refreshing dibawah ini merupakan format laporan yang akan kita buat menggunakan sub report.     24072011-sample.png)   Langsung saja kita aktifkan project postingan sebelumnya      kemudian klik kanan node Designers -&gt; Add -&gt; Data Dynamics ActiveReports 2.0      setelah itu akan bertambah 1 sub node baru dengan nama ActiveReport1 kemudian ganti properties Name dan Captionnya sesuai gambar berikut :      langkah selanjutnya kita akan menambahkan section baru yaitu section Group Header/Footer dengan cara mengklik kanan salah satu section yang sudah ada      jika berhasil akan ditambahkan 2 section baru yaitu section group header dan footer      kemudian ganti properties namenya menjadi grpKelasID      field kelas_id mengacu pada query berikut   SELECT kelas.id AS kelas_id, kelas.keterangan AS kelas FROM kelas INNER JOIN kelas_siswa ON kelas.id = kelas_siswa.kelas_id  kemudian desain laporan sesuai gambar berikut :      bagaimana cara mendesainnya sudah saya bahas tuntas disini.   karena kita disini menggunakan sub report berarti kita harus menambahkan 1 report baru yang akan kita panggil melalui objek sub report.   Tambahkan report baru dengan cara mengklik kanan node Designers -&gt; Add -&gt; Data Dynamics ActiveReports 2.0      kemudian ganti properties Name sesuai gambar berikut :      setelah itu hapus section PageHeader dengan cara mengklik kanan section PageHeader -&gt; Delete Section      kemudian lengkapi desainnya seperti berikut :      sampai disini kita akan mulai menghubungkan report utama dengan sub reportnya dengan cara mengaktifkan report arLapSiswaPerkelas2 kemudian klik ganda section Group Header      kemudian lengkapi kodenya seperti berikut :   Private Sub grpKelasID_Format()     Dim strSql  As String      With adoSiswaPerKelas.Recordset         If Not .EOF Then             txtKelas.Text = .Fields(\"kelas\").Value              strSql = \"SELECT siswa.nomor_induk, siswa.nama \" &amp; _                      \"FROM siswa INNER JOIN kelas_siswa ON siswa.nomor_induk = kelas_siswa.nomor_induk \" &amp; _                      \"WHERE kelas_siswa.kelas_id = \" &amp; grpKelasID.GroupValue &amp; \"\"              ' memanggil sub report             Set SubReport1.object = New arSubReportSiswaPerKelas             With SubReport1.object.adoSiswaPerKelas                 .ConnectionString = \"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=\" &amp; App.Path &amp; \"\\sampleDb.mdb\"                 .Source = strSql             End With          End If     End With End Sub  setelah itu aktifkan juga report arSubReportSiswaPerKelas kemudian tambahkan kode berikut pada event Detail_Format   Private Sub Detail_Format()     With adoSiswaPerKelas.Recordset         If Not .EOF Then             txtNo.Text = Val(txtNo.Text) + 1              txtNoInduk.Text = .Fields(\"nomor_induk\").Value             txtNama.Text = .Fields(\"nama\").Value         End If     End With End Sub  Terakhir kita akan memanggil report utama dari form vb   Private Sub cmdPreviewSiswaPerKelas2_Click()     Dim strSql  As String      strSql = \"SELECT kelas.id AS kelas_id, kelas.keterangan AS kelas \" &amp; _              \"FROM kelas INNER JOIN kelas_siswa ON kelas.id = kelas_siswa.kelas_id\"      With arLapSiswaPerkelas2         .adoSiswaPerKelas.ConnectionString = \"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=\" &amp; App.Path &amp; \"\\sampleDb.mdb\"         .adoSiswaPerKelas.Source = strSql          .lblHeader1.Caption = \"SEKOLAH MENGENGAH ...\"         .lblHeader2.Caption = \"Laporan Data Siswa Per Kelas\"          .Show     End With End Sub        Yuph selesai sudah :)   Sampai disini modal kita sudah cukup untuk membuat report yang lebih kompleks, insya Allah akan kita bahas di seri terakhir dari tutorial Active Report ini.   Selamat MENCOBA :blush:  ","categories": ["Active Report","Visual Basic"],
        "tags": ["Active Report","activereports 2","data dynamics","format laporan","Group Footer","Group Header","header footer","strsql","Sub Report"],
        "url": "http://coding4ever.net/blog/2011/09/05/tutorial-active-report-bagian-3-sub-report/",
        "teaser": null
      },{
        "title": "Implementasi konsep Data Access Object (DAO) di VB 6",
        "excerpt":"Maksud DAO disini bukan komponen Microsoft DAO yang populer di kalangan programmer vb untuk mengakses database tapi DAO disini lebih ke penerapan konsep DAO yang diperkenalkan Java untuk mengakses database.     Dalam konsep DAO kita akan memisahkan module program menjadi beberapa bagian/layer yaitu :      Presentation   Business Logic   Data Access   Untuk presentation layer berhubungan dengan UI (user interface) .   Business Logic biasanya berhubungannya dengan entity class dan entity class sendiri merupakan representasi tabel-tabel yang ada di database biasanya juga disebut dengan istilah class model.   Terakhir Data Access yaitu bagian yang menangani urusan akses database biasanya terdapat operasi CRUD (Create, Read, Update, Delete).   Untuk kasusnya yang gampang aja :), kita akan mencoba mengakses data siswa yang mempunyai empat field yaitu nomor induk, nama, tempat lahir dan tanggal lahir.      Memulai project baru   Jalankan Visual Basih 6 kemudian pada dialog New Project aktifkan tab New kemudian pilih Standar EXE dan akhiri dengan menekan tombol Open.      Membuat Presentation Layer   Pada saat membuat project baru secara default sudah disiapkan 1 buah project  plus formnya      kemudian lakukan perubahan properties seperti gambar berikut :         untuk tampilannya kita akan desain seperti berikut :      Membuat Business Logic   Business Logic ada hubungannya dengan entity class yang merupakan representasi dari tabel-tabel yang ada didatabase.   Berdasarkan struktur tabel siswa diatas kita akan membuat sebuah class dengan nama Siswa yang mempunyai empat buah property yaitu Nomor Induk, Nama, Tempat Lahir dan Tanggal Lahir.   Jadi property ini sudah mewakili method mutator dan accessor yang sudah biasa kita kenal penggunakannya di Java.   Untuk menampung class-class yang berhubungan dengan Business Logic kita akan menambahkan project baru dengan tipe ActiveX DLL, adapun caranya seperti berikut :   Klik menu File -&gt; Add Project setelah itu akan tampil dialog Add Project   kemudian pilih ActiveX DLL dan klik tombol Open      setelah itu akan ditambahkan 1 buah project dan class      kemudian lakukan perubahan properties seperti gambar berikut :         Adapun kode lengkap untuk class Siswanya adalah sebagai berikut :   Private m_nomorInduk    As String Private m_nama          As String Private m_tempatLahir   As String Private m_tanggalLahir  As Date  Public Property Let NomorInduk(ByVal vData As String)     m_nomorInduk = vData End Property Public Property Get NomorInduk() As String     NomorInduk = m_nomorInduk End Property  Public Property Let Nama(ByVal vData As String)     m_nama = vData End Property Public Property Get Nama() As String     Nama = m_nama End Property  Public Property Let TempatLahir(ByVal vData As String)     m_tempatLahir = vData End Property Public Property Get TempatLahir() As String     TempatLahir = m_tempatLahir End Property  Public Property Let TanggalLahir(ByVal vData As Date)     m_tanggalLahir = vData End Property Public Property Get TanggalLahir() As Date     TanggalLahir = m_tanggalLahir End Property  Membuat Data Access   Lapisan ini biasanya berisi operasi CRUD (Create, Read, Update, Delete), tapi kita akan menggunakan istilah yang sedikit berbeda untuk nama operasinya yaitu :      Save   Update   Delete   GetAll   GetByName   GetByNIS   Biasanya untuk penamaan classnya cukup menambahkan akhiran (suffixes) Dao untuk setiap class entitynya. Contoh untuk class entity Siswa, biasanya class Data Accessnya diberi nama SiswaDao.   Oke langsung saja kita tambahkan project baru dengan mengklik menu File -&gt; Add Project setelah itu akan tampil dialog Add Project   kemudian pilih ActiveX DLL dan klik tombol Open      setelah itu akan ditambahkan 1 buah project dan class      kemudian lakukan perubahan properties seperti gambar berikut :         Adapun kode lengkap untuk class SiswaDaonya adalah seperti berikut :   Private cmd     As ADODB.Command Private strSql  As String  Private Function MappingRowToObject(ByVal rs As ADODB.Recordset) As SiswaModel.siswa     Dim siswa As New SiswaModel.siswa      With siswa         .NomorInduk = IIf(IsNull(rs(\"nomor_induk\").Value), \"\", rs(\"nomor_induk\").Value)         .nama = IIf(IsNull(rs(\"nama\").Value), \"\", rs(\"nama\").Value)         .TempatLahir = IIf(IsNull(rs(\"tempat_lahir\").Value), \"\", rs(\"tempat_lahir\").Value)         .TanggalLahir = IIf(IsNull(rs(\"tgl_lahir\").Value), \"1/1/1900\", rs(\"tgl_lahir\").Value)     End With      Set MappingRowToObject = siswa End Function  1. Method Save   Public Function Save(ByVal siswa As SiswaModel.siswa, ByVal conn As ADODB.Connection) As Integer     On Error GoTo errHandle      strSql = \"INSERT INTO siswa (nomor_induk, nama, tempat_lahir, tgl_lahir) VALUES (?, ?, ?, ?)\"      Set cmd = New ADODB.Command     With cmd         .ActiveConnection = conn         .CommandType = adCmdText         .CommandText = strSql          .Parameters(0) = siswa.NomorInduk         .Parameters(1) = siswa.nama         .Parameters(2) = siswa.TempatLahir         .Parameters(3) = siswa.TanggalLahir          .Execute Save     End With     Set cmd = Nothing      Exit Function  errHandle:     Save = 0 End Function  2. Method Update   Public Function Update(ByVal siswa As SiswaModel.siswa, ByVal conn As ADODB.Connection) As Integer     On Error GoTo errHandle      strSql = \"UPDATE siswa SET nama = ?, tempat_lahir = ?, tgl_lahir = ? WHERE nomor_induk = ?\"      Set cmd = New ADODB.Command     With cmd         .ActiveConnection = conn         .CommandType = adCmdText         .CommandText = strSql          .Parameters(0) = siswa.nama         .Parameters(1) = siswa.TempatLahir         .Parameters(2) = siswa.TanggalLahir         .Parameters(3) = siswa.NomorInduk          .Execute Update     End With     Set cmd = Nothing      Exit Function  errHandle:     Update = 0 End Function  3. Method Delete   Public Function Delete(ByVal nis As String, ByVal conn As ADODB.Connection) As Integer     On Error GoTo errHandle      strSql = \"DELETE FROM siswa WHERE nomor_induk = ?\"      Set cmd = New ADODB.Command     With cmd         .ActiveConnection = conn         .CommandType = adCmdText         .CommandText = strSql          .Parameters(0) = nis          .Execute Delete     End With     Set cmd = Nothing      Exit Function  errHandle:     Delete = 0 End Function  4. Method GetAll   Public Function GetAll(ByVal conn As ADODB.Connection) As Scripting.Dictionary     Dim daftarSiswa     As New Scripting.Dictionary     Dim rs              As ADODB.Recordset      Dim key             As Long      On Error GoTo errHandle      strSql = \"SELECT nomor_induk, nama, tempat_lahir, tgl_lahir \" &amp; _              \"FROM siswa \" &amp; _              \"ORDER BY nomor_induk\"      Set rs = OpenRecordset(strSql, conn)     Do While Not rs.EOF          Call daftarSiswa.Add(key, MappingRowToObject(rs))         key = key + 1          rs.MoveNext     Loop     Call CloseRecordset(rs)      Set GetAll = daftarSiswa      Exit Function errHandle:     Set GetAll = Nothing End Function  5. Method GetByName   Public Function GetByName(ByVal nama As String, ByVal conn As ADODB.Connection) As Scripting.Dictionary     Dim daftarSiswa     As New Scripting.Dictionary     Dim rs              As ADODB.Recordset      Dim key             As Long      On Error GoTo errHandle      nama = Replace(nama, \"'\", \"''\")      strSql = \"SELECT nomor_induk, nama, tempat_lahir, tgl_lahir \" &amp; _              \"FROM siswa \" &amp; _              \"WHERE nama LIKE '%\" &amp; nama &amp; \"%' \" &amp; _              \"ORDER BY nomor_induk\"      Set rs = OpenRecordset(strSql, conn)     Do While Not rs.EOF          Call daftarSiswa.Add(key, MappingRowToObject(rs))         key = key + 1          rs.MoveNext     Loop     Call CloseRecordset(rs)      Set GetByName = daftarSiswa      Exit Function errHandle:     Set GetByName = Nothing End Function  6. Method GetByNIS   Public Function GetByNIS(ByVal nis As String, ByVal conn As ADODB.Connection) As SiswaModel.siswa     Dim siswa   As SiswaModel.siswa     Dim rs      As ADODB.Recordset      On Error GoTo errHandle      strSql = \"SELECT nomor_induk, nama, tempat_lahir, tgl_lahir \" &amp; _              \"FROM siswa \" &amp; _              \"WHERE nomor_induk = '\" &amp; nis &amp; \"'\"     Set rs = OpenRecordset(strSql, conn)     If Not rs.EOF Then         Set siswa = MappingRowToObject(rs)     End If     Call CloseRecordset(rs)      Set GetByNIS = siswa      Exit Function  errHandle:     Set GetByNIS = Nothing End Function  Class SiswaDao diatas membutuhkan referensi/library tambahan berikut :      Karena class SiswaModel dan SiswaDao berbeda project sehingga untuk mengakses class Siswa berikut propertiesnya dari SiswaDao perlu ditambahkan referensi SiswaModel.   Referensi Microsoft Scripting Runtime mirip dengan class Collection.   Terakhir kita akan membahas bagaimana mengakses class Siswa dan SiswaDao dari form Siswa tapi sebelumnya kita harus menambahkan referensi SiswaModel, SiswaDataAccess, Microsoft ADO 2x dan Microsoft Scripting Runtime.      1. Menyimpan data   Private Sub cmdSimpan_Click()     Dim siswa As New SiswaModel.siswa      With siswa         .NomorInduk = txtNomorInduk.Text         .nama = txtNama.Text         .TempatLahir = txtTempatLahir.Text         .TanggalLahir = dtpTanggal.Value     End With      result = siswaDao.Save(siswa, conn)     If result &gt; 0 Then         MsgBox \"Data siswa sudah disimpan\"         Call LoadDataSiswa      Else         MsgBox \"Data siswa gagal disimpan\"     End If      Set siswa = Nothing End Sub  2. Mengupdate data   Private Sub cmdPerbaiki_Click()     Dim siswa As New SiswaModel.siswa      With siswa         .NomorInduk = txtNomorInduk.Text         .nama = txtNama.Text         .TempatLahir = txtTempatLahir.Text         .TanggalLahir = dtpTanggal.Value     End With      result = siswaDao.Update(siswa, conn)     If result &gt; 0 Then         MsgBox \"Data siswa sudah disimpan\"         Call LoadDataSiswa      Else         MsgBox \"Data siswa gagal disimpan\"     End If      Set siswa = Nothing End Sub  3. Menghapus data   Private Sub cmdHapus_Click()     Dim nis As String      nis = lsvSiswa.ListItems(lsvSiswa.SelectedItem.Index).SubItems(1)      If MsgBox(\"Apakah proses penghapusan ingin dilanjutkan ?\", vbExclamation + vbYesNo, \"Konfirmasi\") = vbYes Then         result = siswaDao.Delete(nis, conn)         If result &gt; 0 Then             MsgBox \"Data siswa sudah dihapus\"             Call LoadDataSiswa              txtNomorInduk.Text = \"\"             txtNama.Text = \"\"             txtTempatLahir.Text = \"\"              txtNomorInduk.SetFocus          Else             MsgBox \"Data siswa gagal dihapus\"         End If     End If End Sub  4. Menampilkan semua data   Private Sub FillToListView(ByVal siswa As SiswaModel.siswa)     Dim row As Long      With lsvSiswa         row = .ListItems.Count + 1          .ListItems.Add , , row         .ListItems(row).SubItems(1) = siswa.NomorInduk         .ListItems(row).SubItems(2) = siswa.nama         .ListItems(row).SubItems(3) = siswa.TempatLahir          If siswa.TanggalLahir &lt;&gt; \"1/1/1900\" Then             .ListItems(row).SubItems(4) = Format(siswa.TanggalLahir, \"dd/MM/yyyy\")         End If     End With End Sub  Private Sub LoadDataSiswa(Optional ByVal nama As String = \"\")     Dim daftarSiswa As New Scripting.Dictionary     Dim siswa       As SiswaModel.siswa      Dim key         As Variant      If Len(nama) &gt; 0 Then         Set daftarSiswa = siswaDao.GetByName(nama, conn)     Else         Set daftarSiswa = siswaDao.GetAll(conn)     End If      lsvSiswa.ListItems.Clear      For Each key In daftarSiswa         Set siswa = daftarSiswa.Item(key)          Call FillToListView(siswa)     Next      Set siswa = Nothing     Set daftarSiswa = Nothing End Sub  kemudian tinggal panggil di event Form_Load   Private Sub Form_Load()     Call LoadDataSiswa End Sub  5. Menampilkan data berdasarkan nama   Private Sub cmdCariByName_Click()     Call LoadDataSiswa(txtKeywordPencarian.Text) End Sub  6. Menampilkan data berdasarkan nomor induk   Private Sub cmdCariByNIS_Click()     Dim siswa As SiswaModel.siswa      Set siswa = siswaDao.GetByNIS(txtNomorInduk.Text, conn)     If Not siswa Is Nothing Then         With siswa             txtNama.Text = .nama             txtTempatLahir.Text = .TempatLahir              If .TanggalLahir &lt;&gt; \"1/1/1900\" Then                 dtpTanggal.Value = siswa.TanggalLahir             End If         End With      Else         MsgBox \"Data siswa tidak ditemukan\"     End If      Set siswa = Nothing End Sub     Selamat MENCOBA :blush:  ","categories": ["Visual Basic"],
        "tags": ["Business Logic","collection","CRUD","dao","Data Access","Data Access Object","entity class","microsoft dao","model","Presentation"],
        "url": "http://coding4ever.net/blog/2011/09/08/implementasi-konsep-data-access-object-dao-di-vb-6/",
        "teaser": null
      },{
        "title": "Tutorial Active Report bagian 4 – Membuat Report tanpa Database",
        "excerpt":"Karena kesibukan ngajar (terutama nyiapin materi) di semester ini hampir saja membuat mata rantai postingan saya terputus dibulan ini, jadi akhirnya disempat2xin juga nulisnya :grin:.   Dan sekalian permohonan maaf buat om2x yg nanya responnya enggak bisa secepat dulu, maklum alasannya juga sama “sok sibuk” :grin:.   Oke, langsung saja beberapa waktu yang lalu ada yang nanya bagaimana menampilkan data yang ada di ListView ke ActiveReport.     Misal kita mempunyai data mahasiswa seperti berikut :      Sebelumnya kita akan membuat terlebih dulu sebuah class Mahasiswa untuk menampung data diatas kemudian tinggal kita lewatkan melalui variabel public yang kita tambahkan dibagian ActiveReportnya.   Berikut kode lengkap class Mahasiswa   Private m_Npm    As String Private m_nama   As String Private m_kota   As String  Public Property Let Npm(ByVal vData As String)     m_Npm = vData End Property Public Property Get Npm() As String     Npm = m_Npm End Property  Public Property Let Nama(ByVal vData As String)     m_nama = vData End Property Public Property Get Nama() As String     Nama = m_nama End Property  Public Property Let Kota(ByVal vData As String)     m_kota = vData End Property Public Property Get Kota() As String     Kota = m_kota End Property  Untuk ActiveReportnya buat desain seperti biasa      Setelah itu lengkapi juga kodenya   Public daftarMhs    As Dictionary  Private Sub ActiveReport_FetchData(EOF As Boolean)     Static i As Integer      i = i + 1      If i &gt; daftarMhs.Count Then         EOF = True         Exit Sub     Else         EOF = False     End If      Dim mhs As Mahasiswa      Set mhs = daftarMhs.Item(CStr(i))     txtNpm.Text = mhs.Npm     txtNama.Text = mhs.Nama     txtKota.Text = mhs.Kota End Sub  Private Sub Detail_Format()     txtNo.Text = Val(txtNo.Text) + 1 End Sub  Pada kode diatas terlihat variabel daftarMhs bertipe Dictionary dengan access modifier public, jadi nilainya bisa kita set dari form.   Class Dictionary mirip seperti class Collection di C# atau java.   Terakhir kode untuk menampilkan ActiveReport plus mengeset nilai variabel daftarMhs yang diambil dari ListView.   Private Sub cmdPreview_Click()     Dim rpt         As New ActiveReport1     Dim daftarMhs   As New Dictionary     Dim mhs         As Mahasiswa     Dim i           As Integer      For i = 1 To lsvMahasiswa.ListItems.Count         Set mhs = New Mahasiswa         With mhs             .Npm = lsvMahasiswa.ListItems(i).SubItems(1)             .Nama = lsvMahasiswa.ListItems(i).SubItems(2)             .Kota = lsvMahasiswa.ListItems(i).SubItems(3)         End With          daftarMhs.Add CStr(i), mhs     Next i      With rpt         Set .daftarMhs = daftarMhs         .Show     End With End Sub  Selamat MENCOBA :blush:  ","categories": ["Active Report","Visual Basic"],
        "tags": ["ActiveReport","c#","class Mahasiswa","collection","java","ListView"],
        "url": "http://coding4ever.net/blog/2011/10/31/tutorial-active-report-bagian-4-e2-80-93-membuat-report-tanpa-database/",
        "teaser": null
      },{
        "title": "Nulis kode biar enak diliat",
        "excerpt":"Ini hanya sebagai referensi untuk om2x yang nanya sambil posting kode atau yg lagi baik pengen ngasih sumbangan kode, biar kodenya terlihat lebih “keren” :grin:.   Caranya dengan menggunakan tag yang sudah disediakan wordpress, kan sayang udah susah-susah dibuatin tapi enggak dipake :grin:   Untuk contoh dibawah ini khusus untuk skrip VB Classic, VB .NET, C# dan SQL     1. Visual Basic      Hasil :   Private Sub Command1_Click()     Dim i As Integer     For i = 1 To 10         Debug.Print \"Iterasi ke#\" &amp; i     Next i End Sub  2. Visual Basic .NET      Hasil :   Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click     For i As Integer = 1 To 10         Debug.Print (\"Iterasi ke#\" &amp; i.ToString())     Next i End Sub  3. C#      Hasil :   private void button1_Click(object sender, EventArgs e) {     for (int i = 1; i &lt;= 10; i++)     {         System.Diagnostics.Debug.Print (\"Iterasi ke#\" + i.ToString());     } }  4. SQL      Hasil :   SELECT beli.nota, beli.tanggal, barang.nama AS barang, item_beli.jumlah, item_beli.harga_beli, supplier.nama AS supplier FROM beli INNER JOIN item_beli ON beli.nota = item_beli.nota INNER JOIN supplier ON beli.supplier_id = supplier.id INNER JOIN barang ON item_beli.barang_id = barang.id  Referensi : Posting Source Code   Selamat mencoba :blush:  ","categories": ["Uncategorized"],
        "tags": ["wordpress"],
        "url": "http://coding4ever.net/blog/2011/11/15/nulis-kode-biar-enak-diliat/",
        "teaser": null
      },{
        "title": "Membuat Wi-Fi Profiles sendiri",
        "excerpt":"Ada hal rutin yang saya lakukan setiap pagi dan sore, ketika ngantor saya harus mengeset ip statis menyesuaikan ip kantor sedangkan ketika di kos saya harus mengeset ip menjadi dinamis.   Masalah sepele memang tapi lumayan memakan waktu dan membosankan dan saya belum tau (setidaknya untuk saat ini) apakah OS (win 7) yang sy pake menyediakan solusi untuk masalah ini.   Dari teman kantor saya sudah dapat file batch untuk masalah ini, skripnya lebih kurang seperti berikut :     @ECHO OFF Set varan=Wireless Network Connection Set varip=172.xx.xx.xx Set varnm=255.255.0.0 Set vargw=172.xx.xx.xxx Set vardns1=202.xx.x.x Set vardns2=202.xx.x.x  ECHO Auto Setting IP (arif.laksito@gmail.com) ECHO for: \"%varan%\" ECHO ---------------------------------------------  ECHO Setting \"IP Address\", \"Subnet Mask\" and \"Gateway\" netsh interface ipv4 set address name=\"%varan%\" source=static address=%varip% mask=%varnm% gateway=%vargw%  ECHO Setting \"Primary DNS\" netsh interface ipv4 add dnsserver name=\"%varan%\" address=%vardns1% index=1  ECHO Setting \"Secondary DNS\" netsh interface ipv4 add dnsserver name=\"%varan%\" address=%vardns2% index=2  Sedangkan untuk mengeset ke ip dinamis skripnya lebih sederhana lagi   @ECHO OFF Set varan=Wireless Network Connection ECHO Auto Setting IP to DHCP (arif.laksito@gmail.com) ECHO ---------------------------------------------  ECHO Setting \"IP Address\", \"Subnet Mask\" and \"Gateway\" to DHCP netsh interface ipv4 set address name=\"%varan%\" source=dhcp  ECHO Setting \"DNS\" to DHCP Netsh interface ipv4 set dnsserver \"%varan%\" dhcp  Kedua skrip diatas sebenarnya sudah menyelesaikan permasalahan, tapi… ada yang kurang sebagai seorang proGAMMER et… sory maksudnya programmer :grin: tentunya kita akan sedikit penasaran bagaimana mengeksekusi skrip diatas via program.   Untuk VB 6 sudah saya bahas tuntas dibeberapa postingan saya, tapi untuk kali ini kita menggunakan bahasa C#, yuph inilah bahasa yang sedang sy gandrungi saat ini :), semua project sy terutama yang baru, saya paksain menggunakan bahasa ini, karena pelan2x tapi pasti VB 6 akan segera ditingalkan :cry:   Yuph intronya kita cukupkan sampai disini, untuk desain GUI aplikasinya seperti berikut :      Beberapa method penting yang digunakan oleh aplikasi ini sebagai berikut :   1. Mendapatkan daftar Network Connection   Untuk mendapatkan daftar network saya menggunakan perintah   netsh int ip show config  Untuk menjalankan perintah diatas saya menggunakan method ExecuteCommand, kemampuan lain dari method ini adalah menampung output dari perintah yang dijalankan.   Untuk contoh disini outputnya saya tampung ke dalam variabel output.   private void ExecuteCommand(string cmd, string parameter, int timeout, bool redirectStandardOutput) {     Process p = new Process();      p.StartInfo.FileName = cmd;     p.StartInfo.Arguments = parameter;     p.StartInfo.UseShellExecute = false;     p.StartInfo.CreateNoWindow = true;     p.StartInfo.RedirectStandardOutput = redirectStandardOutput;      try     {         p.Start();          if (redirectStandardOutput)         {             p.BeginOutputReadLine();             p.OutputDataReceived += new DataReceivedEventHandler(p_OutputDataReceived);         }          p.WaitForExit(timeout);     }     catch (Exception ex)     {         MessageBox.Show(ex.Message, \"Warning\", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);     }     finally     {         p.Close();     } }  Untuk selanjutnya variabel output saya olah di method GetNetworkConnections   private string[] GetNetworkConnections() {     string[] arrNetwork = null;      if (output.Count &gt; 0)     {         arrNetwork = new string[output.Count];         int index = 0;         foreach (string var in output)         {             string[] networkConnection = var.Split('\\\"');             arrNetwork[index] = networkConnection[1];              index++;         }     }      return arrNetwork; }  2. Akses registry   Untuk meningkatkan kemampuan program ini saya juga menambahkan method untuk menulis dan membaca registry, sehingga perubahan terakhir bisa tersimpan dan diload kembali pada saat program dijalankan.   // method untuk membaca registry private string GetValue(string key, string value) {     return Registry.CurrentUser.OpenSubKey(key).GetValue(value).ToString(); }  // method untuk menulis registry private void WriteValue(string key, string valueName, string value) {     Registry.CurrentUser.CreateSubKey(key).SetValue(valueName, value); }  // method untuk membaca setting program terakhir private void GetSetting() {     output.Clear();     ExecuteCommand(\"netsh\", \"int ip show config\", timeout, true);     cmbNetworkConnection.Items.AddRange(GetNetworkConnections());      string defaultNetwork = string.Empty;      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(key);     if (registryKey != null)     {         defaultNetwork = GetValue(key, \"DefaultNetwork\");         txtIPAddress.Text = GetValue(key, \"IPAddress\");         txtSubnetMask.Text = GetValue(key, \"SubnetMask\");         txtDefaultGateway.Text = GetValue(key, \"DefaultGateway\");         txtDnsServer1.Text = GetValue(key, \"DnsServer1\");         txtDnsServer2.Text = GetValue(key, \"DnsServer2\");          switch (GetValue(key, \"IPAktif\"))         {             case \"1\": // dinamis                 rdoIPDinamis.Checked = true;                 break;              case \"2\": // statis                 rdoIPStatis.Checked = true;                 break;              default:                 rdoIPDinamis.Checked = true;                 break;         }          groupBox1.Enabled = rdoIPStatis.Checked;     }     else     {         // do nothing     }      if (defaultNetwork.Length &gt; 0)     {         if (cmbNetworkConnection.Items.Count &gt; 0) cmbNetworkConnection.Text = defaultNetwork;     }     else     {         if (cmbNetworkConnection.Items.Count &gt; 0) cmbNetworkConnection.SelectedIndex = 0;     } }  Sebagai penutup berikut adalah kode pada saat menekan tombol Ok.   private void btnOk_Click(object sender, EventArgs e) {     string parameter = string.Empty;      if (MessageBox.Show(\"Apakah proses ingin dilanjutkan ?\", \"Konfirmasi\", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)     {         Cursor.Current = Cursors.WaitCursor;         btnOk.Enabled = false;          if (rdoIPDinamis.Checked) // ip dinamis         {             parameter = \"interface ipv4 set address name=\\\"\" + cmbNetworkConnection.Text + \"\\\" source=dhcp\";             ExecuteCommand(\"netsh\", parameter, timeout, false);              parameter = \"interface ipv4 set dnsserver \\\"\" + cmbNetworkConnection.Text + \"\\\" dhcp\";             ExecuteCommand(\"netsh\", parameter, timeout, false);         }         else // ip statis         {             parameter = \"interface ipv4 set address name=\\\"\" + cmbNetworkConnection.Text + \"\\\" source=static address=\" + txtIPAddress.Text + \" mask=\" + txtSubnetMask.Text + \" gateway=\" + txtDefaultGateway.Text;             ExecuteCommand(\"netsh\", parameter, timeout, false);              parameter = \"interface ipv4 add dnsserver name=\\\"\" + cmbNetworkConnection.Text + \"\\\" address=\" + txtDnsServer1.Text + \" index=1\";             ExecuteCommand(\"netsh\", parameter, timeout, false);              parameter = \"interface ipv4 add dnsserver name=\\\"\" + cmbNetworkConnection.Text + \"\\\" address=\" + txtDnsServer2.Text + \" index=2\";             ExecuteCommand(\"netsh\", parameter, timeout, false);              WriteValue(key, \"IPAddress\", txtIPAddress.Text);             WriteValue(key, \"SubnetMask\", txtSubnetMask.Text);             WriteValue(key, \"DefaultGateway\", txtDefaultGateway.Text);             WriteValue(key, \"DnsServer1\", txtDnsServer1.Text);             WriteValue(key, \"DnsServer2\", txtDnsServer2.Text);         }          WriteValue(key, \"DefaultNetwork\", cmbNetworkConnection.Text);         WriteValue(key, \"IPAktif\", rdoIPDinamis.Checked ? \"1\" : \"2\");         btnOk.Enabled = true;          Cursor.Current = Cursors.Default;     } }  Selamat MENCOBA :blush:  ","categories": ["Visual C#"],
        "tags": ["ExecuteCommand","GetNetworkConnections","wi-fi profiles","wifi-profiles"],
        "url": "http://coding4ever.net/blog/2011/11/19/membuat-wi-fi-profiles-sendiri/",
        "teaser": null
      },{
        "title": "Beberapa fungsi sederhana yang sering digunakan",
        "excerpt":"1. ConvertToUpper   Sesuai namanya fungsi ini otomatis melakukan konversi ke huruf besar, fungsinya sangat sederhana sekali   C# :   private char ConvertToUpper(System.Windows.Forms.KeyPressEventArgs e) {     return Convert.ToChar(e.KeyChar.ToString().ToUpper()); }  VB.NET :   Private Function ConvertToUpper(e As System.Windows.Forms.KeyPressEventArgs) As Char     Return Convert.ToChar(e.KeyChar.ToString().ToUpper()) End Function    kemudian fungsi diatas kita panggil di event KeyPress   C# :   private void txtConvertToUpper_KeyPress(object sender, KeyPressEventArgs e) {     e.KeyChar = ConvertToUpper(e); }  VB.NET :   Private Sub txtConvertToUppe_KeyPress(sender As System.Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtConvertToUppe.KeyPress     e.KeyChar = ConvertToUpper(e) End Sub  2. ConvertToLower   Fungsi berikutnya kebalikan dari fungsi ConvertToUpper yaitu mengkonversi ke huruf kecil.   C# :   private char ConvertToLower(System.Windows.Forms.KeyPressEventArgs e) {     return Convert.ToChar(e.KeyChar.ToString().ToLower()); }  VB.NET :   Private Function ConvertToLower(e As System.Windows.Forms.KeyPressEventArgs) As Char     Return Convert.ToChar(e.KeyChar.ToString().ToLower()) End Function  Untuk pemanggilannya juga masih sama di event KeyPress   C# :   private void txtConvertToLower_KeyPress(object sender, KeyPressEventArgs e) {     e.KeyChar = ConvertToLower(e); }  VB.NET :   Private Sub txtConvertToLower_KeyPress(sender As System.Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtConvertToLower.KeyPress     e.KeyChar = ConvertToLower(e) End Sub  3. NumericOnly   Fungsi ini hanya mengizinkan input dalam bentuk angka plus titik (.) untuk desimalnya   C# :   private bool NumericOnly(System.Windows.Forms.KeyPressEventArgs e) {     string strValid = \"0123456789.\";      if (strValid.IndexOf(e.KeyChar) &lt; 0 &amp;&amp; !(e.KeyChar == Convert.ToChar(Keys.Back)))     {         return true; // not valid     }     else     {         return false; // valid     } }  VB.NET :   Private Function NumericOnly(e As System.Windows.Forms.KeyPressEventArgs) As Boolean     Dim strValid As String = \"0123456789.\"      If strValid.IndexOf(e.KeyChar) &lt; 0 AndAlso Not (e.KeyChar = Convert.ToChar(Keys.Back)) Then         ' not valid         Return True     Else         ' valid         Return False     End If End Function  Untuk pemanggilannya juga masih sama di event KeyPress   C# :   private void txtNumericOnly_KeyPress(object sender, KeyPressEventArgs e) {     e.Handled = NumericOnly(e); }  VB.NET   Private Sub txtNumericOnly_KeyPress(sender As System.Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtNumericOnly.KeyPress     e.Handled = NumericOnly(e) End Function  Fungsi NumericOnly diatas udah oke banget, tapi sayangnya kita masih bisa menginputkan nilai seperti 25.33.1 atau 25..3.   Intinya untuk tanda titik (.) masih bisa diinputnya lebih dari satu dan ini tidak benar jadi harus kita tambahkan validasi sedikit lagi.   Pertama kita deklarsikan dulu sebuah variabel untuk menyimpan status tanda titik (.).   C# :   private bool isDecimal = false;  VB.NET :   Private isDecimal As Boolean = False  Kemudian kita tambahkan validasi di event TextChanged untuk mengetahui apakah sudah ada tanda titik yang diinputkan.   C# :   private void txtNumericOnly_TextChanged(object sender, EventArgs e) {     isDecimal = false;      int index = ((TextBox)sender).Text.IndexOf(\".\");     isDecimal = !(index &lt; 0); }  VB.NET :   Private Sub txtNumericOnly_TextChanged(sender As System.Object, e As System.EventArgs) Handles txtNumericOnly.TextChanged     isDecimal = False      Dim index As Integer = DirectCast(sender, TextBox).Text.IndexOf(\".\")     isDecimal = Not (index &lt; 0) End Sub  Terakhir kita revisi event KeyPressnya   C# :   private void txtNumericOnly_KeyPress(object sender, KeyPressEventArgs e) {     // tambah validasi pengecekan desimal disini     if (isDecimal &amp;&amp; (e.KeyChar == Convert.ToChar(\".\")))     {         e.Handled = true;     }     else     {         e.Handled = NumericOnly(e);     } }  VB.NET :   Private Sub txtNumericOnly_KeyPress(sender As System.Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtNumericOnly.KeyPress     ' tambah validasi pengecekan desimal disini     If isDecimal AndAlso (e.KeyChar = Convert.ToChar(\".\")) Then         e.Handled = True     Else         e.Handled = NumericOnly(e)     End If End Sub  Yuph sampe disini fungsinya udah tambah oke :)   4. LetterOnly   Fungsi yang hanya mengizinkan input berupa huruf besar/kecil plus titik dan spasi, fungsinya mirip sekali dengan fungis NumericOnly hanya karakter yang didaftarkan saja yang berbeda.   C# :   private bool LetterOnly(System.Windows.Forms.KeyPressEventArgs e) {     string strValid = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ. \";      if (strValid.IndexOf(e.KeyChar) &lt; 0 &amp;&amp; !(e.KeyChar == Convert.ToChar(Keys.Back)))     {         return true; // not valid     }     else     {         return false; // valid     }  }  VB.NET :   Private Function LetterOnly(e As System.Windows.Forms.KeyPressEventArgs) As Boolean     Dim strValid As String = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ. \"      If strValid.IndexOf(e.KeyChar) &lt; 0 AndAlso Not (e.KeyChar = Convert.ToChar(Keys.Back)) Then         ' not valid         Return True     Else         ' valid         Return False     End If End Function  Cara penggunaanya juga otomatis masih sama   C# :   private void txtLetterOnly_KeyPress(object sender, KeyPressEventArgs e) {     e.Handled = LetterOnly(e); }  VB.NET :   Private Sub txtLetterOnly_KeyPress(sender As System.Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtLetterOnly.KeyPress     e.Handled = LetterOnly(e) End Sub  ** 5. ThousandSeparator**   Fungsi ini otomatis akan menambahkan pemisah ribuan pada inputan berupa angka.   C# :   private void SetThousandSeparator(TextBox txt) {     if (txt.Text.Length &gt; 0)     {         try         {             string s = txt.Text.Replace(\",\", \"\");              int i = int.Parse(s);             txt.Text = string.Format(\"{0:###,###,###}\", i);              txt.SelectionStart = txt.Text.Length;         }         catch         {         }     } }  VB.NET :   Private Sub SetThousandSeparator(txt As TextBox)     If txt.Text.Length &gt; 0 Then         Try             Dim s As String = txt.Text.Replace(\",\", \"\")              Dim i As Integer = Integer.Parse(s)             txt.Text = String.Format(\"{0:###,###,###}\", i)              txt.SelectionStart = txt.Text.Length         Catch         End Try     End If End Sub  Untuk pemanggilannya di event TextChanged   C# :   private void txtThousandSeparator_TextChanged(object sender, EventArgs e) {     SetThousandSeparator((TextBox)sender); }  VB.NET :   Private Sub txtThousandSeparator_TextChanged(sender As System.Object, e As System.EventArgs) Handles txtThousandSeparator.TextChanged     SetThousandSeparator (DirectCast(sender, TextBox)) End Function  Agar fungsi SetThousandSeparator bisa bekerja dengan baik tambahkan juga validasi angkanya   C# :   private void txtThousandSeparator_KeyPress(object sender, KeyPressEventArgs e) {     e.Handled = NumericOnly(e); }  VB.NET :   Private Sub txtThousandSeparator_KeyPress(sender As System.Object, e As System.Windows.Forms.KeyPressEventArgs) Handles txtThousandSeparator.KeyPress     e.Handled = NumericOnly(e) End Function  Kemudian set property TextAlign = Right   FUNGSI PENTING LAINNYA   6. IsEnter   Untuk mendeteksi penekan tombol Enter, sehingga bisa kita manfaatkan untuk perpindahan fokus cursor pada saat input data.   C# :   private bool IsEnter(System.Windows.Forms.KeyPressEventArgs e) {     return (e.KeyChar == (char)Keys.Return); }  VB.NET :   Private Function IsEnter(e As System.Windows.Forms.KeyPressEventArgs) As Boolean     Return (e.KeyChar = ChrW(Keys.Return)) End Function  Penggunaanya masih di event KeyPress   C# :   private void txtConvertToUpper_KeyPress(object sender, KeyPressEventArgs e) {     if (IsEnter(e)) SendKeys.Send(\"{Tab}\"); }  VB.NET :   Private Sub txtConvertToUpper_KeyPress(sender As Object, e As KeyPressEventArgs)     If IsEnter(e) Then         SendKeys.Send (\"{Tab}\")     End If End Sub  7. IsEsc   Untuk mendeteksi penekanan tombol Esc, salah satu implementasinya adalah menutup form aktif dengan menekan tombol Esc.   C# :   private bool IsEsc(System.Windows.Forms.KeyPressEventArgs e) {     return (e.KeyChar == (char)Keys.Escape); }  VB.NET :   Private Function IsEsc(e As System.Windows.Forms.KeyPressEventArgs) As Boolean     Return (e.KeyChar = ChrW(Keys.Escape)) End Function  Nah jika pada fungsi-fungsi sebelumnya semua fungsinya kita panggil di event TextBox, untuk fungsi IsEsc akan kita panggil di event KeyPress milik objek form.   C# :   private void Form1_KeyPress(object sender, KeyPressEventArgs e) {     if (IsEsc(e)) this.Close(); }  VB.NET :   Private Sub Form1_KeyPress(sender As Object, e As KeyPressEventArgs)     If IsEsc(e) Then         Me.Close()     End If End Sub  Dan jangan lupa set property KeyPreview = True   Beberapa fungsi diatas sudah saya bundle menjadi satu komponen yang bisa didownload disini.   Selamat mencoba :blush:  ","categories": ["Visual C#","Visual Basic .NET"],
        "tags": ["ConvertToLower","ConvertToUpper","IsEnter","IsEsc","KeyChar","KeyPressEventArgs","LetterOnly","NumericOnly","ToString"],
        "url": "http://coding4ever.net/blog/2011/11/22/beberapa-fungsi-sederhana-yang-sering-digunakan/",
        "teaser": null
      },{
        "title": "Visual Studio Color Schemes",
        "excerpt":"Enggak sengaja ketemu link ini, berhubung saya juga udah bosan dengan color scheme bawaan visual studio .net akhirnya ikutan coba deh.   Di link tersebut sudah tersedia ratusan color scheme yang siap pake, saya sendiri baru mencoba color scheme dengan rating tertinggi :grin:.        Untuk downloadnya tinggal klik link ini, sudah tersedia untuk VS 2005, 2008 dan 2010.   Setelah download tinggal impor file schemesnya dari menu Tools -&gt; Import and Export Settings …, selanjutnya tinggal ikuti wizard yang ada.               Agar semakin manteb editornya, download juga Consolas Font Pack dari situs resminya om Bill Gates.   Kemudian dilanjutkan dengan merubah jenis font editor menjadi Consolas dan size = 10.   Caranya dengan klik menu Tools -&gt; Options      Entah kenapa font jenis ini terlihat begitu indah di mata para programer he he he :grin:      Selamat mencoba :blush:  ","categories": ["Uncategorized"],
        "tags": ["Consolas Font Pack","Visual Studio Color Schemes"],
        "url": "http://coding4ever.net/blog/2011/12/20/visual-studio-color-schemes/",
        "teaser": null
      },{
        "title": "Tutorial .NET Remoting Part 1 - Intro",
        "excerpt":"Apa itu .NET Remoting ?   .NET Remoting adalah suatu mekanisme komunikasi antar objek yang berbeda proses, baik dikomputer yang sama, beda komputer dalam 1 jaringan atau antar jaringan.   Remoting menyediakan kemampuan untuk menjalankan method pada sisi server, melewatkan parameter dan menerima nilai kembalian.   Remote object berada disisi server, mesin lain jika ingin berinteraksi dengan remote object membutuhkan referensi dari remote object tersebut.   .NET mempunyai dua solusi untuk pengembangan aplikasi klien server yaitu :      .NET Remoting/WCF   ASP .NET WebServices     Teknologi remoting lainnya : DCE/RPC, CORBA, DCOM, MTS/COM+, Java RMI, Java EJB, Web Service/SOAP/XML-RPC   Arsitektur      Proxy adalah objek yang bertugas untuk melakukan komnikasi dengan remote object, semua method yang dipanggil melalui objek proxy akan dijalankan di server.   Formatter adalah objek yang bertugas untuk melakukan proses serialisation dan deserialization ke format data yang sesuai sebelum data dikirimkan melalui objek transport channel.   Ada 2 jenis formatter yaitu :      BinaryFormatter   SoapFormatter (format data berupa XML)   Secara default TCP channel menggunakan binary formatter dan HTTP channel menggunakan SOAP formatter.   Transport Channel merupakan perangkat yang bertugas sebagai alat transportasi yang digunakan dalam proses remoting.   Ada 2 jenis channel yaitu :      Channel objek yang ada di server bertugas untuk menerima request dari klien dan sudah diset untuk port tertentu.   Channel objek yang ada di klien yang bertugas untuk melakukan request ke server dan menerima balasan dari server, untuk port mengikuti port yang sudah diset pada channel objek server.   Objek channel sendiri menggunakan 2 jenis protokol yaitu Protokol TCP (Transmission Control Protocol) dan Protokol HTTP (Hypertext Transfer Protocol).   Terakhir Dispatcher bertugas untuk memanggil method remote object dan mengembalikan hasilnya ke klien dengan melewati semua layer.   Remote Object   Semua objek yang bisa diserialisasi dan dilewatkan melalui domain aplikasi yang berbeda disebut dengan remote object. Setiap objek bisa menjadi remote object dengan cara :           Turunan dari class MarshalByRefObject                   Dengan menambahkan atribut [Serializable]              Marshalling   Proses pengemasan data yang sudah diserialisasi sebelum dikirim ke klien atau sebaliknya. Ada 2 jenis marshaling yaitu :           Marshalling by value       Objek Marshal-by-value (MBV) akan disalin dan diteruskan dari aplikasi server ke aplikasi klien. Ketika klien memanggil metode pada objek MBV, maka objek MBV itu akan di serialisasi dan ditransfer melalui jaringan ke klien. Kemudian method tersebut dapat dipanggil secara langsung pada klien dan objek sudah tidak dianggap lagi sebagai remote object            Marshalling by reference       Objek Marshalled by reference (MBR) diakses disisi klien menggunakan objek proxy. Klien hanya menyimpan referensi ke objek tersebut. Jadi inilah remote object yang sebenarnya       MBR dikelompokkan menjadi 2 group yaitu :      Server-activated objects (SAOs)   Client-activated objects (CAOs)   Server-activated objects (SAOs)   Adalah remote object yang masa berlakunya ditentukan oleh server. Remote object dibuat ketika aplikasi klien memanggil salah satu method remote object melalui objek proxy. SAOs dapat diaktifkan dengan 2 mode :      SingleCall, objek yang dibuat berdasarkan permintaan dari klien dan otomatis masuk ke garbage collection jika sudah digunakan.   Singleton, satu objek melayani semua permintaan klien dan secara default objek yg diaktifkan dg mode ini akan dihapus setelah 5 menit.   Client-activated objects (CAOs)   Berbeda dengan SAOs, Client Activated Objects (CAOs) adalah remote object yang masa berlakunya ditentukan oleh klien. CAO hanya melayani klien yang memintanya, selain itu CAO bisa digunakan secara berulang-ulang.   Pada pembahasan kali ini sy batasi hanya pada Server-activated objects dengan mode SingleCall, karena itu yg disarankan oleh om Ingo Rammer pengarang buku Advanced .NET Remoting (C# Edition).   Terakhir jika ada penjelasan sy diatas yg kurang tepat mohon koreksinya dan Insya Allah akan berlanjut pada kesempatan berikutnya dan tentunya disertai dengan contoh.   Selamat mencoba :blush:   Referensi :      Advanced .NET Remoting (C# Edition)   .NET Remoting Use-Cases and Best Practices   .NET Remoting with an easy example   All you need to know about .NET Remoting   Remoting An Interface Based Approach   Binary Serialization   Serialization vs Marshaling   Marshal-by-ref versus Serializable Objects   .Net Remoting: the Quick and Dirty Guide  ","categories": [".NET Remoting","Visual C#"],
        "tags": [".net remoting","ASP .NET WebServices","BinaryFormatter","caos","Client-activated objects","CORBA","DCE/RPC","DCOM","formatter","Java EJB","Java RMI","klien","klien server","MarshalByRefObject","MTS/COM+","proxy","remote object","sao","Serializable","server","Server-activated objects","SoapFormatter","Transport Channel","wcf","Web Service/SOAP/XML-RPC"],
        "url": "http://coding4ever.net/blog/2011/12/26/tutorial-net-remoting-part-1-intro/",
        "teaser": null
      },{
        "title": "Tutorial .NET Remoting Part 2 - Project CalculatorLib",
        "excerpt":"Setelah bingung dengan teori singkat apa itu .NET Remoting ada baiknya langsung kita coba penerapan fitur .NET Remoting pada pembuatan aplikasi sederhana.   Intinya dalam belajar memprogram itu konsep “Learn by doing : less theory, more results” lumayan bekerja :grin:   Aplikasi yang akan kita buat yaitu Calculator, walaupun sederhana tetapi aplikasi ini membutuhkan 3 project untuk membuatnya.     1. CalculatorLib   CalculatorLib dibuat dengan memanfaatkan project bertipe Class Library yang isinya hanya berupa interface ICalculator dengan 4 buah method abstract yaitu : Penambahan, Pengurangan, Perkalian dan Pembagian.   Project ini nantinya akan dicompile menjadi file dengan ekstensi .dll (CalculatorLib.dll), file CalculatorLib.dll ini akan dishare atau ditambahkan sebagai referensi untuk aplikasi CalculatorServer dan CalculatorKlien.   Teknik ini dikenal dengan istilah “Shared Assembly” tujuannya adalah agar aplikasi server dan klien bisa berkomunikasi dengan cara yang sama.   Cara yang lain adalah dengan menggunakan tools “soapsuds” untuk mengekstract informasi interface yg dimiliki oleh aplikasi server yang mana hasil ekstrak ini berupa file dengan ekstensi .dll yg akan ditambahkan sebagai referensi aplikasi klien.   2. CalculatorServer   CalculatorServer dibuat dengan memanfaatkan project bertipe Console Application, implementasi aslinya biasanya aplikasi server dijadikan sebuah service (Windows Service). Aplikasi ini nantinya akan mengimplementasikan semua method-method abstract dari project CalculatorLib.   3. CalculatorKlien   CalculatorKlien dibuat dengan memanfaatkan project bertipe Windows Application, aplikasi ini hanya memanggil method-method abstract dari project CalculatorLib dengan memanfaatkan objek proxy sehingga method tersebut akan dieksekusi secara remote (dijalankan di sisi server).   Berikut gambaran lengkap project yang akan kita buat      Oke kita awali dulu dengan pembuatan project CalculatorLib, jangan lupa untuk menjalankan terlebih dulu Visual Studio .NET   Membuat Project CalculatorLib           Klik menu File -&gt;New -&gt; Project …                   Pada dialog New Project aktifkan pilihan Visual C# kemudian pada pilihan Templates pilih Class Library              Pada isian Name isikan CalculatorLib, setelah itu klik tombol Ok.       Secara default pada saat pembuatan project sudah otomatis disediakan 1 buah class kosong dengan nama Class1, karena kita akan menambahkan class baru jadi class ini dihapus saja.      Menambahkan Interface ICalculator           Klik kanan project CalculatorLib -&gt; Add -&gt; New Item…                   Pada pilihan template pilih Interface kemudian untuk isian Name diisi ICalculator.              Setelah itu akan tampil editor code interface ICalculator              Jangan lupa untuk menambahkan access modifier public.       Selanjutnya kita tinggal menambahkan 4 method abstractnya yaitu Penambahan, Pengurangan, Perkalian dan Pembagian.   Berikut kode lengkapnya :      Mengcompile project CalculatorLib   Tujuannya adalah agar project CalculatorLib ini bisa digunakan sebagai referensi oleh aplikasi CalculatorServer dan CalculatorKlien           Klik kanan project CalculatorLib -&gt; Build              Setelah itu akan tampil hasil output dari proses Build              Yuph cukup sampai disini, insya Allah akan kita lanjut pada kesempatan berikutnya.   Selamat mencoba :blush:  ","categories": [".NET Remoting","Visual C#"],
        "tags": [".net remoting","CalculatorLib"],
        "url": "http://coding4ever.net/blog/2011/12/31/tutorial-net-remoting-part-2-project-calculator-lib/",
        "teaser": null
      },{
        "title": "Tutorial .NET Remoting Part 3 - Project CalculatorServer",
        "excerpt":"Setelah selesai dengan project CalculatorLib akan kita lanjutkan dengan pembuatan project CalculatorServer.   Sebagai review CalculatorServer adalah project yang akan mengimplementasikan semua method abstract yang ada pada interface ICalculator (project CalculatorLib) selain itu CalculatorServer juga akan menjadi host untuk class remote yaitu classs Calculator.   Aktifkan kembali solution Calculatornya dimana didalamnya sudah ada project CalculatorLib        kita akan menambahkan project CalculatorServer masih di solution yang sama           Klik kanan Solution Calculator -&gt; Add -&gt; New Project                   Pada dialog Add New Project aktifkan pilihan Visual C# kemudian pada pilihan Templates pilih Console Application              Pada isian Name isikan CalculatorServer untuk isian Location dibiarkan saja setelah itu klik Ok       Jika langkah sebelumnya berhasil maka pada solution Calculator akan ketambahan 1 project baru yaitu CalculatorServer      Menambahkan Class Calculator   Class Calculator adalah class yang akan mengimplementasikan semua method abstract dari interface ICalculator yang sudah kita buat pada project sebelumnya (CalculatorLib).   Selain itu class Calculator juga harus merupakan turunan dari class MarshalByRefObject agar semua method class Calculator bisa diakses secara remote.           Klik kanan project CalculatorServer -&gt; Add -&gt; Class…                   Pada isian Name diisi Calculator              Setelah itu akan tampil editor code class Calculator      Jangan lupa untuk menambahkan access modifier public.   Sebelum kita bisa melengkapi kode dari class Calculator terlebih dulu kita harus menambahkan referensi CalculatorLib yang sudah kita buat pada project sebelumnya, tujuannya adalah agar class Calculator bisa mengakses interface ICalculator dan mengimplementasikan semua method abstractnya.           Klik kanan folder References -&gt; Add Reference…                   Aktifkan tab Projects kemudian pilih project CalculatorLib                   Jika langkah sebelumnya berhasil akan ketambahan 1 buah node dengan nama CalculatorLib pada folder References              Selanjutnya kita mulai melengkapi kode dari class Calculator.      Sampai disini kita sudah bisa mencoba untuk menjalankan program dengan menekan tombol F5 (Start Debugging), tapi sebelumnya project CalculatorServer harus diset sebagai StartUp Project      Apa yang terjadi setelah kita menekan tombol F5 (Start Debugging) ??? Masih error bukan ? :grin:   Error ini terjadi karena class Calculator mengimplementasikan interface ICalculator sedangkan method-method abstractnya (Penambahan, Pengurangan, Perkalian dan Pembagian) belum kita definisikan di class Calculator.   Mengimplementasikan Method Abastract Interface ICalculator secara Otomatis   Untuk mengatasi error pada langkah sebelumnya kita tinggal klik kanan pada tulisan interface ICalculator -&gt;Implement Interface -&gt; Implement Interface      Kemudian secara otomatis semua method abstract dari interface ICalculator akan ditambahkan.      Setelah itu kita tinggal melengkapi kode untuk masing-masing method diatas.      Sampai disini class Calculator sudah selesai dan kita sudah bisa mencoba lagi untuk menekan tombol F5 (Start Debugging), jika tidak terjadi error berarti kita sudah siap untuk lanjut ketahap berikutnya.   Menjadikan Project CalculatorServer sebagai Host untuk Menghandle Remote Object   Masih di project CalculatorServer kita akan melengkapi kode untuk method Main yang ada pada class Program      Karena pada class ini akan mengakses class-class yang berhubungan dengan fitur .NET Remoting maka kita harus menambahkan terlebih dulu referensi library .NET Remoting.           Klik kanan folder References -&gt; Add Reference…                   Aktifkan tab .NET kemudian pilih System.Runtime.Remoting                   Jika langkah sebelumnya berhasil akan ketambahan 1 buah node dengan nama System.Runtime.Remoting pada folder References              Berikut kode lengkap class Program      Sampai disini lengkap sudah project CalculatorServer kita dan sudah bisa dicoba dengan menekan tombol F5 (Start Debugging), jika tidak terjadi error berarti kita sudah siap untuk menyelesaikan project terakhir yaitu project CalculatorKlien      Setelah itu akan kita lanjutkan penerapan fitur .NET Remoting pada pembuatan aplikasi database dengan arsitektur 3-tier, insya Allah :)  ","categories": [".NET Remoting","Visual C#"],
        "tags": [".net remoting","CalculatorKlien","CalculatorLib","CalculatorServer"],
        "url": "http://coding4ever.net/blog/2012/01/26/tutorial-net-remoting-part-3-project-calculator-server/",
        "teaser": null
      },{
        "title": "Tutorial .NET Remoting Part 4 – Project CalculatorKlien",
        "excerpt":"Ada informasi yg lupa sy sampaikan pada postingan sebelumnya yaitu diproject calculator ini sy menggunakan protokol TCP, makanya namespace yg sy tambahkan di class Program yang ada diproject CalculatorServer adalah :   using System.Runtime.Remoting.Channels.Tcp;  bukan   using System.Runtime.Remoting.Channels.Http;    Alasannya sederhana karena project ini diuji coba pada jaringan lokal jadi protokol yang disarankan adalah tcp bukan http.   Project terakhir yang akan kita buat adalah CalculatorKlien, project ini sudah berbasis Windows Application jadi biar keliatan lebih interaktif :)   CalculatorKlien sebenarnya “dummy project” untuk melakukan perhitungan sederhana saja tidak bisa sehingga membutuh pertolongan server untuk melakukannya :grin:   Yg berperan disini adalah objek proxy, jadi dengan adanya objek ini “seakan-akan” objek yg ada diserver (remote object) berada dilokalan.   Objek proxy memegang referensi dari remote object, sedikit beda dg “memegang referensi” yg selama ini kita pelajari pada matakuliah struktur data yaitu pointer (penunjuk) kealamat memory tertentu, tetapi referensi yang ditunjuk oleh proxy lebih berupa “server name/IP address plus unix id” dari remote object.   Kata kuncinya adalah semua method yang dipanggil oleh objek proxy akan “dieksekusi” di sisi server.   Kayaxnya cukup untuk intro aplikasi kliennya, langsung saja kita coba pembuatannya tentunya dengan mengaktifkan terlebih dulu solution “Calculator” yg sudah kita buat pada postingan sebelumnya.      Membuat Project CalculatorKlien           Klik kanan Solution Calculator -&gt; Add -&gt; New Project …                   Pada dialog Add New Project aktifkan pilihan Visual C# kemudian pada pilihan Templates pilih Windows Application              Pada isian Name isikan CalculatorKlien untuk isian Location dibiarkan saja setelah itu klik Ok, jika langkah sebelumnya berhasil maka pada solution Calculator akan ketambahan 1 project baru yaitu CalculatorKlien              Desain UI   Untuk desainnya formnya sederhana saja, harap maklum sy enggak biasa mendesain form yg menarik :grin:      Oke saatnya “mengerjai” project CalculatorKlien :grin:   Sama seperti project CalculatorServer, CalculatorKlien juga membutuhkan referensi dari CalculatorLib.dll jadi kita tambahkan dulu library yg satu ini.           Klik kanan folder References -&gt; Add Reference…                   Aktifkan tab Projects kemudian pilih project CalculatorLib                   Jika langkah sebelumnya berhasil akan ketambahan 1 buah node dengan nama CalculatorLib pada folder References              Karena pada class ini juga akan mengakses class-class yang berhubungan dengan fitur .NET Remoting maka kita harus menambahkan terlebih dulu referensi library .NET Remoting.           Klik kanan folder References -&gt; Add Reference…                   Aktifkan tab .NET kemudian pilih System.Runtime.Remoting                   Jika langkah sebelumnya berhasil akan ketambahan 1 buah node dengan nama System.Runtime.Remoting pada folder References              Sampai disini kita sudah bisa mulai melengkapi kode untuk Form Calculatornya      Untuk variabel port dan uri disesuaikan dg settingan di server      untuk sisa kode lainnya seperti berikut :   private void Form1_Load(object sender, EventArgs e) {     cmbOperasi.Items.Add(\"Penambahan\");     cmbOperasi.Items.Add(\"Pengurangan\");     cmbOperasi.Items.Add(\"Perkalian\");     cmbOperasi.Items.Add(\"Pembagian\");      cmbOperasi.DropDownStyle = ComboBoxStyle.DropDownList;     cmbOperasi.SelectedIndex = 0;      txtHasil.Enabled = false; }  private void btnProses_Click(object sender, EventArgs e) {     int result = 0;      // nilai 1 tidak boleh kosong     if (txtNilai1.Text.Length == 0) return;      // nilai 2 tidak boleh kosong     if (txtNilai2.Text.Length == 0) return;      int nilai1 = int.Parse(txtNilai1.Text);     int nilai2 = int.Parse(txtNilai2.Text);      try     {         switch (cmbOperasi.SelectedIndex)         {             case 0: // penambahan                 result = calculator.Penambahan(nilai1, nilai2);                 break;              case 1: // pengurangan                 result = calculator.Pengurangan(nilai1, nilai2);                 break;             case 2: // perkalian                 result = calculator.Perkalian(nilai1, nilai2);                 break;              default: // pembagian                 result = calculator.Pembagian(nilai1, nilai2);                 break;         }     }     catch (Exception ex)     {         MessageBox.Show(ex.Message.ToString(), \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);     }      txtHasil.Text = result.ToString(); }  Sampai disini project CalculatorKlien sebenarnya sudah bisa dijalankan, tapi disini sy ingin sedikit membeberkan “rahasia” bahwa project CalculatorKlien diatas tetap bisa mengakses remote object tanpa harus menambahkan library .NET Remoting, jadi akan kita coba untuk menghapus library .NET Remoting.      dan tentunya juga diikuti dg menonaktifkan namesspace remoting dan kode lainnya yg mengakses class .NET Remoting      Awalnya sy juga bingung kok bisa, karena hampir disemua referensi yg ada untuk aplikasi klien tetap menambahkan library .NET Remoting, usut punya usut akhirnya sy menemukan jawabannya di ebook Distributed .NET Programming in C# karangan om Tom Barnaby, mungkin ada baiknya sy kutip aja pernyataan beliau.      In fact, if you are using one of the built-in .NET channels, HTTP or TCP, you do not have to register the channel object at all. The runtime will simply use the protocol and port information embedded in the URL to create and register the appropriate channel on your behalf.    Nah karna diproject Calculator ini sy menggunakan protokol tcp otomatis secara built-in sudah disupport oleh .NET   Untuk mengetes aplikasi Calculator ini kita harus menjalankan project CalculatorServer dan CalculatorKlien secara bersamaan tentunya dg urutan prioritas server dulu baru klien.   Adapun langkah-langkahnya sebagai berikut :           Klik kanan solution Calculator -&gt; Set StartUp Project…                   Aktifkan pilihan Multiple startup projects kemudian tentukan urutan prioritasnya              Dilanjutkan dengan menekan tombol F5 (Start Debugging)         Terlihat pada demo diatas setiap kali objek calculator memanggil method Penambahan, Pengurangan, Perkalian dan Pembagian semua prosesnya dilakukan diserver, hal ini dibuktikan dengan munculnya tulisan “Method xxx dieksekusi secara remote ….” pada saat mengklik tombol Proses.   Nah akhirnya selesai juga :grin:   Berhubung semua project sudah selesai, kode lengkap bisa didownload disini.   Untuk postingan berikutnya kita akan coba menerapkan .NET Remoting pada pembuatan aplikasi client server dg arsitektur 3-tier, insya Allah.   Selamat mencoba :blush:  ","categories": [".NET Remoting","Visual C#"],
        "tags": [".net remoting","CalculatorKlien"],
        "url": "http://coding4ever.net/blog/2012/01/29/tutorial-net-remoting-part-4-project-calculatorklien/",
        "teaser": null
      },{
        "title": "Pembuatan Aplikasi Client Server dengan Arsitektur 3-tier Part 1",
        "excerpt":"Masih melanjutkan postingan sebelumnya yaitu tentang .NET Remoting, tetapi kali ini kita akan mengimplementasikan .NET Remoting pada pembuatan aplikasi database, tapi sebelumnya kita lihat dulu kenapa kok report2x menggunakan .NET Remoting untuk pembuatan aplikasi database karena katanya “orang yang tidak tau itu cendrung memusuhi” halah :grin:.     Arsitektur Client Server 2-tier   Sadar atau enggak aplikasi yang kita buat selama ini mungkin lebih banyak (semua malahan :grin:) masuk kategori ini. Kok tau ?      Dari gambar diatas terlihat semua aplikasi klien terkoneksi ke server database dan mengeksekusi method CRUD (Create, Read, Update dan Delete), semakin banyak aplikasi kliennya tentu akan berpengaruh pada kinerja database, apalagi klo rule bisnisnya langsung diletakkan di klien jika ada perubahan otomatis harus mengupdate semua klien :frowning:   Arsitektur Client Server 3-tier      Untuk yg 3 tier sebanyak apapun aplikasi kliennya tidak terlalu bermasalah karena yang terkoneksi ke database hanya satu yaitu aplikasi server, paling-paling spek mesin servernya aja yg dinaikin :grin:   Klo pengen lebih ngirit untuk aplikasi server bisa satu mesin dengan database, selain itu rule bisnis biasanya diletakkan disini, sehingga jika terjadi perubahan cukup mengupdate disatu tempat.   Nah berdasarkan 2 pertimbangan diatas, mungkin sudah muncul motivasi untuk mencoba .NET Remoting dalam pengembangan aplikasi database… klo iya silahkan lanjutkan membacanya :)   Untuk kasus project yg akan kita buat sederhana saja yaitu aplikasi SmartLibrary (SI Perpus) tentunya tidak semua :grin: kita ambil contoh pengolahan data buku dan penerbit, selain itu untuk alasan kemudahan databasenya cukup menggunakan Ms Access.   Oke sebelumnya kita lihat dulu project SmartLibrary yang akan kita bangun.   1. SmartLibraryLib   SmartLibraryLib dibuat dengan memanfaatkan project bertipe Class Library yang isinya hanya berupa interface IDao dan class Model.   Project ini nantinya akan dicompile menjadi file dengan ekstensi .dll (SmartLibraryLib.dll), file SmartLibraryLib.dll ini akan dishare atau ditambahkan sebagai referensi untuk aplikasi SmartLibraryServer dan SmartLibraryKlien.   Teknik ini dikenal dengan istilah “Shared Assembly” tujuannya adalah agar aplikasi server dan klien bisa berkomunikasi dengan cara yang sama.   2. SmartLibraryServer   SmartLibraryServer dibuat dengan memanfaatkan project bertipe Console Application, implementasi aslinya biasanya aplikasi server dijadikan sebuah service (Windows Service).   Aplikasi ini nantinya akan mengimplementasikan semua method-method abstract dari project SmartLibraryLib.   3. SmartLibraryKlien   Terakhir SmartLibraryKlien dibuat dengan memanfaatkan project bertipe Windows Application isinya berupa Form dan Report, aplikasi ini hanya memanggil method-method abstract dari project SmartLibraryLib dengan memanfaatkan objek proxy sehingga method tersebut akan dieksekusi secara remote (dijalankan di sisi server).   Berikut gambaran project yang akan kita bangun.      Project diatas sangat mirip dengan project Calculator yang sudah saya bahas pada postingan sebelumnya.   Sesuai urutan kita akan membuat project SmartLibraryLib terlebih dulu dan sebagai gambaran apa saja yang ada didalam project SmartLibraryLib ini bisa kita lihat dari class diagram berikut :      Dari class diagram diatas terlihat bahwa SmartLibraryLib hanya terdiri dari Interface Dao dan Class Model (pada postingan kali ini hanya dibahas pengolahan data buku dan penerbit).   Interface IDao merupakan interface generic yang berisi method-method abstract CRUD yang akan diturunkan oleh interface IBukuDao dan IPenerbitDao.   Untuk class model merupakan representatif dari tabel-tabel yang ada di database dalam ini tabel buku dan penerbit.   Oke kita langsung saja membuat project ini.   Membuat Project SmartLibraryLib           Klik menu File -&gt;New -&gt; Project …                   Pada dialog New Project aktifkan pilihan Visual C# kemudian pada pilihan Templates pilih Class Library              Pada isian Name isikan SmartLibraryLib, setelah itu klik tombol Ok.       Secara default pada saat pembuatan project sudah otomatis disediakan 1 buah class kosong dengan nama Class1, kita akan menambahkan class baru jadi class ini dihapus saja.      Menambahkan Folder IDao dan Model   Tujuannya untuk mengelompokkan interface dao dan class model           Klik kanan project SmartLibraryLib -&gt; Add -&gt; New Folder                     Kemudian untuk nama folder diganti dengan IDao. Ulangi langkah sebelumnya untuk menambahkan folder Model.       Hasil akhir sementara              Menambahkan Class Model   Kita akan menambahkan class model Buku dan Penerbit      Semua class model akan kita tempatkan di dalam folder Model.   1. Klik kanan folder Model -&gt; Add -&gt; Class..      Untuk isian Name diisi Buku.      Setelah itu akan tampil editor code class Buku      Jangan lupa untuk menambahkan access modifier public.   Berikut kode lengkap untuk class Buku.   namespace SmartLibraryLib.Model {     [Serializable]     public class Buku     {         private string _iSBN;         public string ISBN         {             get { return _iSBN; }             set { _iSBN = value; }         }          private string _judul;         public string Judul         {             get { return _judul; }             set { _judul = value; }         }          private string _edisi;         public string Edisi         {             get { return _edisi; }             set { _edisi = value; }         }          private string _bahasa;         public string Bahasa         {             get { return _bahasa; }             set { _bahasa = value; }         }          private Penerbit _penerbit;         public Penerbit Penerbit         {             get { return _penerbit; }             set { _penerbit = value; }         }     } }  Satu hal yang penting disini adalah objek/instance dari class Buku akan diserialisasikan dari server ke klien atau sebaliknya sehingga harus ditambahkan atribut [Serializable].      Ulangi langkah diatas untuk menambahkan class Penerbit. Berikut kode lengkap class Penerbit   namespace SmartLibraryLib.Model {     [Serializable]     public class Penerbit     {         private int _penerbitID;         public int PenerbitID         {             get { return _penerbitID; }             set { _penerbitID = value; }         }          private string _nama;         public string Nama         {             get { return _nama; }             set { _nama = value; }         }     } }  hasil sementara      Menambahkan Interface IDao   Kita akan menambahkan interface IDao, IBukuDao dan IPenerbitDao      Dari diagram diatas terlihat bahwa IDao merupa interface induk dari interface IBukuDao danIPenerbitDao.   IDao sendiri merupakan interface generic yang mempunyai method abstract CRUD secara umum, sehingga interface IBukuDao danIPenerbitDao tinggal menambahkan method-method abstract yang menjadi spesialisasinya masing-masing.   Semua interface IDao akan kita tempatkan di dalam folder IDao.           Klik kanan folder IDao -&gt; Add -&gt; New Item…                   Pada pilihan template pilih Interface kemudian untuk isian Name diisi IDao.              Setelah itu akan tampil editor code interface IDao              Jangan lupa untuk menambahkan access modifier public.       Selanjutnya kita tinggal menambahkan 5 method abstractnya yaitu Save, Update, Delete, GetAll dan GetReportAll sesuai class diagram diatas.   Berikut kode lengkapnya      Ulangi langkah sebelumnya untuk menambahkan interface IBukuDao dan IPenerbitDao.   Berikut kode lengkap interface IBukuDao dan IPenerbitDao         Pada interface IBukuDao dan IPenerbitDao diatas membutuhkan namespace SmartLibraryLib.Model karena sebagian method abstractnya mengakses class model.   Mengcompile project SmartLibraryLib   Tujuannya adalah agar project SmartLibraryLib ini bisa digunakan sebagai referensi oleh project SmartLibraryServer dan SmartLibraryKlien           Klik kanan project SmartLibraryLib -&gt; Build                     Setelah itu akan tampil hasil output dari proses Build       Akhirnya selesai juga dan insya Allah akan berlanjut   Selamat mencoba :blush:  ","categories": [".NET Remoting","Visual C#"],
        "tags": [".net remoting","aplikasi client server","arsitektur 2-tier","arsitektur 3-tier","dao","interface","smartlibrary"],
        "url": "http://coding4ever.net/blog/2012/02/01/pembuatan-aplikasi-client-server-dengan-arsitektur-3-tier-part-1/",
        "teaser": null
      },{
        "title": "Pembuatan Aplikasi Client Server dengan Arsitektur 3-tier Part 2",
        "excerpt":"Setelah selesai dengan project SmartLibraryLib akan kita lanjutkan dengan pembuatan project SmartLibraryServer.   Untuk menyederhanakan pembahasan, project SmartLibraryServer ini dibuat dengan memanfaatkan project bertipe Console Application (implementasi aslinya bisa kita jadikan sebuah service).   Isi dari project ini hanya berupa class DAO (Data Access Object) :        Semua class DAO diatas mengimplementasikan interface IDao yang diambil dari file SmartLibraryLib.dll, selain itu class-class tersebut merupakan turunan dari class MarshalByRefObject. Sebuah class yang merupakan turunan dari class MarshalByRefObject, semua method-methodnya bisa diakses secara remote.   Aktifkan kembali solution SmartLibrarynya dimana didalamnya sudah ada project SmartLibraryLib      kita akan menambahkan project SmartLibraryServer masih di solution yang sama           Klik kanan Solution SmartLibrary -&gt; Add -&gt; New Project                   Pada dialog Add New Project aktifkan pilihan Visual C# kemudian pada pilihan Templates pilih Console Application              Pada isian Name isikan SmartLibraryServer untuk isian Location dibiarkan saja setelah itu klik Ok       Jika langkah sebelumnya berhasil maka pada solution SmartLibrary akan ketambahan 1 project baru yaitu SmartLibraryServer              Menambahkan Folder Dao   Pada folder ini kita akan menyimpan semua class Dao yang mengimplementasikan interface IDao yang kita ambil dari file SmartLibraryLib.dll           Klik kanan project SmartLibraryServer -&gt; Add -&gt; New Folder                     Menambahkan Class BukuDao dan PenerbitDao   Tidak seperti class model yang hanya berisi property-property, pada class Dao hanya berisi method-method yang mendefinisikan semua method-method abstract dari interface yang diimplementasikannya, method-method inilah yg dikenal dengan istilah method-method CRUD.   Sebagai contoh kita akan menambahkan class BukuDao dan PenerbitDao. Kedua class tersebut masing-masing mengimplementasikan interface IBukuDao dan IPenerbitDao.              Klik kanan folder Dao -&gt; Add -&gt; Class..                   Untuk isian Name diisi BukuDao.              Setelah itu akan tampil editor code class BukuDao              Jangan lupa untuk menambahkan access modifier public.       Sebelum kita bisa melengkapi kode dari class BukuDao terlebih dulu kita harus menambahkan referensi SmartLibraryLib.dll yang sudah kita bahas pada postingan sebelumnya, tujuannya adalah agar class BukuDao bisa mengakses class model Buku dan interface IBukuDao untuk kemudian mengimplementasikan semua method abstractnya.           Klik kanan folder References -&gt; Add Reference…                   Aktifkan tab Projects kemudian pilih project SmartLibraryLib                   Jika langkah sebelumnya berhasil akan ketambahan 1 buah node dengan nama SmartLibraryLib pada folder References              Selanjutnya kita mulai melengkapi kode dari class BukuDao.      Sampai disini kita sudah bisa mencoba untuk menjalankan program dengan menekan tombol F5 (Start Debugging).   Apa yang terjadi ??? Masih error bukan ? :stuck_out_tongue:   Error ini terjadi karena class BukuDao mengimplementasikan interface IBukuDao sedangkan method-method abstractnya belum kita definisikan di class BukuDao.   Berikut method-method abstract interface IBukuDao yang harus diimplementasikan oleh class BukuDao.      Mengimplementasikan Method Abastract Interface IBukuDao secara Otomatis.   Untuk mengatasi error pada langkah sebelumnya kita tinggal klik kanan pada tulisan interface IBukuDo -&gt;Implement Interface -&gt; Implement Interface      Kemudian secara otomatis semua method abstract dari interface IBukuDao akan ditambahkan.   public List&lt;Buku&gt; GetByName(string judul) {     throw new Exception(\"The method or operation is not implemented.\"); }  public Buku GetByID(string bukuID) {     throw new Exception(\"The method or operation is not implemented.\"); }  public DataSet GetReportByName(string judul) {     throw new Exception(\"The method or operation is not implemented.\"); }  public int Save(Buku buku) {     throw new Exception(\"The method or operation is not implemented.\"); }  public int Update(Buku buku) {     throw new Exception(\"The method or operation is not implemented.\"); }  public int Delete(Buku buku) {     throw new Exception(\"The method or operation is not implemented.\"); }  public List&lt;Buku&gt; GetAll() {     throw new Exception(\"The method or operation is not implemented.\"); }  public DataSet GetReportAll() {     throw new Exception(\"The method or operation is not implemented.\"); }  Selanjutnya kita tinggal melengkapi masing-masing method diatas.   public List&lt;Buku&gt; GetByName(string judul) {     List&lt;Buku&gt; daftarBuku = new List&lt;Buku&gt;();      strSql = \"SELECT isbn, judul, edisi, bahasa \" +              \"FROM buku \" +              \"WHERE judul LIKE @1 \" +              \"ORDER BY judul\";     using (OleDbCommand cmd = new OleDbCommand(strSql, conn))     {         cmd.Parameters.AddWithValue(\"@1\", \"%\" + judul + \"%\");         using (OleDbDataReader dtr = cmd.ExecuteReader())         {             while (dtr.Read())             {                 Buku Buku = new Buku();                 Buku.ISBN = dtr[0] is DBNull ? string.Empty : dtr.GetString(0);                 Buku.Judul = dtr[1] is DBNull ? string.Empty : dtr.GetString(1);                 Buku.Edisi = dtr[2] is DBNull ? string.Empty : dtr.GetString(2);                 Buku.Bahasa = dtr[3] is DBNull ? string.Empty : dtr.GetString(3);                  daftarBuku.Add(Buku);             }         }     }     return daftarBuku; }  public Buku GetByID(string bukuID) {     Buku buku = null;      strSql = \"SELECT isbn, judul, edisi, bahasa \" +              \"FROM buku \" +              \"WHERE isbn = @1\";     using (OleDbCommand cmd = new OleDbCommand(strSql, conn))     {         cmd.Parameters.AddWithValue(\"@1\", bukuID);         using (OleDbDataReader dtr = cmd.ExecuteReader())         {             if (dtr.Read())             {                 buku = new Buku();                 buku.ISBN = dtr[0] is DBNull ? string.Empty : dtr.GetString(0);                 buku.Judul = dtr[1] is DBNull ? string.Empty : dtr.GetString(1);                 buku.Edisi = dtr[2] is DBNull ? string.Empty : dtr.GetString(2);                 buku.Bahasa = dtr[3] is DBNull ? string.Empty : dtr.GetString(3);             }         }     }     return buku; }  public int Save(Buku buku) {     strSql = \"INSERT INTO buku (isbn, judul, edisi, bahasa, penerbit_id) \" +              \"VALUES (@1, @2, @3, @4, @5)\";     using (OleDbCommand cmd = new OleDbCommand(strSql, conn))     {         cmd.Parameters.AddWithValue(\"@1\", buku.ISBN);         cmd.Parameters.AddWithValue(\"@2\", buku.Judul);         cmd.Parameters.AddWithValue(\"@3\", buku.Edisi);         cmd.Parameters.AddWithValue(\"@4\", buku.Bahasa);         cmd.Parameters.AddWithValue(\"@5\", buku.Penerbit.PenerbitID);          return cmd.ExecuteNonQuery();     } }  public int Update(Buku buku) {     strSql = \"UPDATE buku SET judul = @1, edisi = @2, bahasa = @3, penerbit_id = @4 \" +              \"WHERE isbn = @5\";     using (OleDbCommand cmd = new OleDbCommand(strSql, conn))     {         cmd.Parameters.AddWithValue(\"@1\", buku.Judul);         cmd.Parameters.AddWithValue(\"@2\", buku.Edisi);         cmd.Parameters.AddWithValue(\"@3\", buku.Bahasa);         cmd.Parameters.AddWithValue(\"@4\", buku.Penerbit.PenerbitID);         cmd.Parameters.AddWithValue(\"@5\", buku.ISBN);          return cmd.ExecuteNonQuery();     } }  public int Delete(Buku buku) {     strSql = \"DELETE FROM buku WHERE isbn = @1\";     using (OleDbCommand cmd = new OleDbCommand(strSql, conn))     {         cmd.Parameters.AddWithValue(\"@1\", buku.ISBN);          return cmd.ExecuteNonQuery();     } }  public List&lt;Buku&gt; GetAll() {     List&lt;Buku&gt; daftarBuku = new List&lt;Buku&gt;();      strSql = \"SELECT isbn, judul, edisi, bahasa \" +              \"FROM buku \" +              \"ORDER BY judul\";     using (OleDbCommand cmd = new OleDbCommand(strSql, conn))     {         using (OleDbDataReader dtr = cmd.ExecuteReader())         {             while (dtr.Read())             {                 Buku buku = new Buku();                 buku.ISBN = dtr[0] is DBNull ? string.Empty : dtr.GetString(0);                 buku.Judul = dtr[1] is DBNull ? string.Empty : dtr.GetString(1);                 buku.Edisi = dtr[2] is DBNull ? string.Empty : dtr.GetString(2);                 buku.Bahasa = dtr[3] is DBNull ? string.Empty : dtr.GetString(3);                  daftarBuku.Add(buku);             }         }     }     return daftarBuku; }  public DataSet GetReportAll() {     strSql = \"SELECT isbn, judul, edisi, bahasa \" +              \"FROM buku \" +              \"ORDER BY judul\";     OleDbDataAdapter da = new OleDbDataAdapter();     da.SelectCommand = new OleDbCommand(strSql, conn);      DataSet ds = new DataSet();     da.Fill(ds, \"buku\");      return ds; }  Jika kita perhatikan pada kode diatas, ada beberapa baris kode yang sama tersebar dibeberapa method (GetAll, GetByID, dan GetByName) yaitu kode untuk proses mapping dari hasil SELECT yg tersimpan di dalam object DataReader ke objek buku      Nah dari beberapa referensi yg ada, katanya harus dilakukan proses refactoring, apa itu refactoring ?      Refactoring is the process of improving your code after it has been written by changing the internal structure of the code without changing the external behavior of the code.    Sumber : Refactoring (C#)   Sesuai dg pembahasan kasus kita yang perlu dilakukan cukup refactoring method.   Sebagai contoh kita akan melakukan proses refactoring pada method GetAll, caranya gampang tinggal blok kode yang akan direfactoring kemudian klik kanan -&gt; Refactor -&gt; Extract Method.      kemudian pada isian New method name isikan MappingDtrToObject      jika proses refactoringnya berhasil, satu buah method dengan nama MappingDtrToObject otomatis ditambahkan, selain itu kode yang ada di method GetAll juga otomatis menyesuaikan.      selanjutnya kita tinggal menyesuaikan untuk method-method yang lain (GetByID dan GetByName)      Untuk sementara project SmartLibraryServer ini kita cukupkan dulu sampe disini, masih ada beberapa kode yg belum terselesaikan dan insya Allah akan menjadi PR sy pada postingan berikutnya :grin: dan mudah-mudahan sudah bisa memberikan sedikit gambaran bagaimana project ini bekerja.   Untuk class Penerbit enggak perlu kita bahas karena langkah-langkah pembuatannya sama seperti diatas.   Selamat mencoba :blush:  ","categories": [".NET Remoting","Visual C#"],
        "tags": ["CRUD","dao","SmartLibraryLib","SmartLibraryServer"],
        "url": "http://coding4ever.net/blog/2012/02/05/pembuatan-aplikasi-client-server-dengan-arsitektur-3-tier-part-2/",
        "teaser": null
      },{
        "title": "Aplikasi Antrian",
        "excerpt":"Aplikasi ini merupakan pengembangan dari sample aplikasi yg sudah pernah saya bahas pada postingan sebelumnya, aplikasi ini terdiri dari 2 project yaitu :      Aplikasi server memanfaatkan array winsock karena akan menghandle minimal 1 koneksi   Untuk aplikasi klien cukup menggunakan winsock standar (non array).        Sekarang akan kita bahas cara pembuatannya.   Aplikasi server   Aplikasi server menggunakan winsock yg dijadikan array karena akan menerima lebih dari 1 koneksi, untuk menjadikan sebuah winsock menjadi array cukup dengan mengeset properties index = 0      Selain itu agar sebuah winsock bisa menerima koneksi yg masuk, maka winsocknya harus dalam mode “Listen”, untuk keperluan ini kita akan menyiapkan sebuah fungsi misal dengan nama startListening   Private Function startListening(ByVal localPort As Long) As Boolean     On Error GoTo errHandle      If localPort &gt; 0 Then         'If the socket is already listening, and it's listening on the same port, don't bother restarting it.         If (wckServer(0).State &lt;&gt; sckListening) Or (wckServer(0).localPort &lt;&gt; localPort) Then             With wckServer(0)                 Call .Close                 .localPort = localPort                 Call .Listen             End With         End If          'Return true, since the server is now listening for clients.         startListening = True    End If     Exit Function errHandle:    startListening = False End Function  Selanjutnya tinggal kita panggil pada event Form_Load   Private Sub Form_Load()     '1234 adalah port yg digunakan untuk komunikasi     'antara server dan klien, nilainya bisa disesuaikan     If startListening(1234) Then         MsgBox \"Status Server ON\"     Else         MsgBox \"Status Server OFF\"     End If End Sub  Selain itu ada beberapa kode yang harus kita lengkapi pada event2x yg dimiliki oleh winsock yaitu event Close, ConnectionRequest, DataArrival dan Error   Private Sub wckServer_Close(Index As Integer)     ' Close the socket and raise the event to the parent.     Call wckServer(Index).Close End Sub  Private Sub wckServer_ConnectionRequest(Index As Integer, ByVal requestID As Long)     Dim i          As Long     Dim j          As Long     Dim blnLoaded  As Boolean      On Error GoTo errHandle      ' We shouldn't get ConnectionRequests on any other socket than the listener     ' (index 0), but check anyway. Also check that we're not going to exceed     ' the MaxClients property.     If (Index = 0) Then         ' Check to see if we've got any sockets that are free.         For i = 1 To wckServer.UBound             If (wckServer(i).State = sckClosed) Then                 j = i                 Exit For             End If         Next i          ' If we don't have any free sockets, load another on the array.         If (j = 0) Then             blnLoaded = True             Call Load(wckServer(wckServer.UBound + 1))             j = wckServer.Count - 1         End If          ' With the selected socket, reset it and accept the new connection.         With wckServer(j)             Call .Close             Call .Accept(requestID)         End With      End If      Exit Sub     ' errHandle:     ' Close the Winsock that caused the error.     Call wckServer(0).Close End Sub  Event ConnectionRequest berfungsi untuk memfilter koneksi yg masuk, jika ada koneksi yg masuk akan dilakukan pengecekan terlebih dulu apakah ada winsock yg idle (ngangur) jika ada maka koneksi tersebut akan langsung dihandle oleh winsock yg idle tadi, jika tidak maka akan diload terlebih dulu winsock yg baru kemudian langsung menghandle koneksi yg baru masuk tadi.   Teknik ini merupakah salah satu cara untuk melakukan optimasi program jangan sampai aplikasi server meload secara terus menerus objek winsock yg baru untuk setiap koneksi yg masuk.   Private Sub wckServer_DataArrival(Index As Integer, ByVal bytesTotal As Long)     Dim cmd     As String      On Error GoTo errHandle      ' Grab the data from the specified Winsock object, and pass it to the parent.     Call wckServer(Index).GetData(cmd)      Select Case cmd         Case \"get_no_antrian\"             Call send(Index, CStr(noAntrian))              lblNoAntrian.Caption = noAntrian             noAntrian = noAntrian + 1 ' naikkan counter nomor antrian          Case Else             Call send(Index, \"perintah tidak dikenal\")     End Select      Exit Sub errHandle:    Call wckServer(Index).Close End Sub  Event DataArrival berfungsi untuk memproses data yg masuk, untuk kasus aplikasi antrian ini data yang paling valid hanya berupa string “get_no_antrian”, jika datanya valid akan langsung dikirimkan nomor antrian terakhir ke klien yg mengirimkan string “get_no_antrian” dg memanggil prosedur send.   Private Sub send(ByVal lngIndex As Long, ByVal strData As String)     If (wckServer(lngIndex).State = sckConnected) Then         Call wckServer(lngIndex).SendData(strData): DoEvents     Else         Exit Sub     End If End Sub  Private Sub wckServer_Error(Index As Integer, ByVal Number As Integer, Description As String, ByVal Scode As Long, ByVal Source As String, ByVal HelpFile As String, ByVal HelpContext As Long, CancelDisplay As Boolean)     Call wckServer(Index).Close End Sub  Untuk aplikasi server sy rasa sudah cukup akan kita lanjutkan dg aplikasi klien.   Aplikasi Klien   Untuk aplikasi klien lebih sederhana lagi, yg kita butuhkan cukup sebuah fungsi untuk melakukan koneksi ke server   Private Const conTunggu As Long = 100000  Private Function isConnected(ByVal ipServer As String, ByVal port As Long) As Boolean     Static i As Long      On Error Resume Next      If myClient.State &lt;&gt; sckClosed Then myClient.Close ' close existing connection     myClient.RemoteHost = ipServer     myClient.RemotePort = port     myClient.Connect      With myClient         Do Until .State = sckConnected             DoEvents             i = i + 1             If i &gt;= conTunggu Then                 i = 0                 Exit Function             End If         Loop     End With      isConnected = myClient.State = sckConnected End Function  Contoh pemanggilan fungsi diatas seperti berikut :   Private Sub cmdAmbilNoAntrian_Click()     Dim ipServer    As String     Dim cmd         As String      ipServer = \"127.0.0.1\"     cmd = \"get_no_antrian\"      ' 1234 ada port yg menyesuaikan port yg ada di server     If isConnected(ipServer, 1234) Then         myClient.SendData cmd     End If End Sub  Untuk mengetahui data yang dikirim balik oleh server kita bisa memanfaatkan event DataArrival yg dimiliki oleh objek winsock   Private Sub myClient_DataArrival(ByVal bytesTotal As Long)     Dim noAntrian As String      On Error Resume Next      myClient.GetData noAntrian     lblNoAntrian.Caption = noAntrian End Sub  Selesai :)   Aplikasi diatas belum menggunakan database sama sekali, sehingga jika aplikasi server ditutup maka counter nomor antrian akan dimulai dari 1 lagi, dan sy berharap tidak ada pertanyaan bagaimana menyimpan counter nomor antriannya ke database atw bagaimana cara menampilkan nomor atrian terakhir klo servernya error :grin:.   Selamat MENCOBA :blush:  ","categories": ["Visual Basic","Winsock"],
        "tags": ["aplikasi antrian","array","source code","Winsock"],
        "url": "http://coding4ever.net/blog/2012/02/26/aplikasi-antrian/",
        "teaser": null
      },{
        "title": "Aplikasi Pendukung Smart Library School",
        "excerpt":"Intro   Untuk meningkatkan layanan terhadap pengunjung perpustakaan tidak salahnya jika Anda menginstall aplikasi ini :grin:.   Aplikasi ini berfungsi sebagai aplikasi untuk pencarian data-data buku selain itu juga bisa digunakan untuk mencatat data-data pengunjung, aplikasi ini sudah terintegrasi dengan Smart Library School yg juga disediakan secara gratis di blog ini :).     Awalnya enggak ada niat untuk mengupload juga aplikasi ini tetapi karena akhir2x ini sy sering diuber2x oleh om Bimo jadi dengan berat hati ha ha ha :grin: sy upload juga akhirnya.   Untuk menjalankan aplikasi ini sebaiknya :      Komputer server sudah terinstall aplikasi Smart Library School plus update terakhir.         Shortcut tersembunyi   Ada shortcut2x tersembunyi yang bisa Anda ketahui dengan menekan tombol kombinasi CTRL + F12   Instalasi   Untuk instalasi yang perlu diperhatikan adalah pada saat finishing yaitu pengisian informasi ip server dan lokasi database.      Selamat MENCOBA :blush:  ","categories": ["Freeware"],
        "tags": ["buku tamu","pencarian buku","Smart Library School"],
        "url": "http://coding4ever.net/blog/2012/03/03/aplikasi-pendukung-smart-library-school/",
        "teaser": null
      },{
        "title": "Pembuatan Aplikasi Client Server dengan Arsitektur 3-tier Part 3",
        "excerpt":"Melanjutkan postingan sebelumnya, kita langsung saja menambahkan kode untuk membuat koneksi ke database dalam hal ini sy menggunakan database Ms Access.   Aktifkan class BukuDao setelah itu tambahkan kode berikut dibagian constructor default (constructor tanpa parameter).     // constructor public BukuDao() {     string appDir = System.IO.Directory.GetCurrentDirectory();     string strConn = \"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=\" + appDir + \"\\\\DbPerpus.mdb;User Id=admin;Password=;\";     conn = new OleDbConnection(strConn);     conn.Open(); }  Alasan sy menggunakan constructor default untuk membuat koneksi ke database adalah karena remote object dari class BukuDao akan diaktifkan menggunakan mode SingleCall, dengan kata lain mode SingleCall hanya bisa memanggil constructor default.   Penjelasan tentang mode SingleCall bisa anda cek disini di bagian “Server Side Object Activation. SingleCall”.   Sebelumnya kita akan melakukan testing terlebih untuk memastikan bahwa class BukuDao sudah bekerja dengan baik.   Untuk melakukan testing ada beberapa cara yang bisa kita lakukan, yang pertama dan sangat dianjurkan kita bisa menggunakan tool testing semisal NUnit, atau dengan cara yang lebih simple dengan memanfaatkan program console.   Untuk menyederhanakan pembahasan sy memilih opsi kedua tetapi sebelumnya kita harus mengeset terlebih dulu agar project SmartLibraryServer sebagai StartUp Project.   Caranya dengan mengklik kanan project SmartLibraryServer -&gt; Set as StartUp Project.      Aktifkan class Program, setelah itu kita akan melakukan testing satu persatu semua method yang dimiliki oleh class BukuDao, berikut kode lengkapnya.   using SmartLibraryLib.Model; using SmartLibraryServer.Dao;  Menambahkan data buku   int result = 0;  // buat objek buku Buku buku = new Buku(); buku.ISBN = \"12345\"; buku.Judul = \"Bahasa Indonesia\"; buku.Edisi = \"I\"; buku.Bahasa = \"Indonesia\"; buku.Penerbit.PenerbitID = 1;  BukuDao bukuDao = new BukuDao(); result = bukuDao.Save(buku); if (result &gt; 0) {     Console.WriteLine(\"Data buku berhasil ditambahkan\"); } else {     Console.WriteLine(\"Data buku gagal ditambahkan\"); }  Mengedit data buku   Untuk mengedit data buku sama seperti menambahkan buku baru, hanya saja yang dipanggil adalah method Update   // buat objek buku Buku buku = new Buku(); buku.ISBN = \"12345\"; buku.Judul = \"Bahasa Indonesia\"; buku.Edisi = \"I\"; buku.Bahasa = \"Indonesia\"; buku.Penerbit.PenerbitID = 1;  BukuDao bukuDao = new BukuDao(); result = bukuDao.Update(buku); // bedanya cuma disini if (result &gt; 0) {     Console.WriteLine(\"Data buku berhasil diupdate\"); } else {     Console.WriteLine(\"Data buku gagal diupdate\"); }  Menghapus data buku   // buat objek buku Buku buku = new Buku(); buku.ISBN = \"12345\";  BukuDao bukuDao = new BukuDao(); result = bukuDao.Delete(buku); if (result &gt; 0) {     Console.WriteLine(\"Data buku berhasil dihapus\"); } else {     Console.WriteLine(\"Data buku gagal dihapus\"); }  Menampilkan data buku   Sedikit beda dengan method Save, Update dan Delete untuk menampilkan data buku kita membutuhkan class Collection menampung kumpulan objek buku.   BukuDao bukuDao = new BukuDao(); List&lt;Buku&gt; daftarBuku = bukuDao.GetAll(); foreach (Buku buku in daftarBuku) {     Console.WriteLine(buku.ISBN + \", \" + buku.Judul); }  Semua kode diatas diketik pada method Main dari class Program      Menjadikan project RetailManagerServer sebagai host untuk menghandle remote object   Setelah selesai melakukan testing terhadap class BukuDao saatnya untuk menghostkan remote object dari class ini.   Remote object tidak bisa berdiri sendiri sehingga membutuhkan aplikasi lain yang bertindak sebagai host yang akan mengekspose remote object sehingga bisa diakses secara remote (diluar domainnya).   Ada beberapa cara untuk bisa menghostkan remote object bisa menggunakan aplikasi console, aplikasi windows form, mendaftarakan sebagai windows service atau menggunakan web service IIS.   Pada postingan ini sy menggunakan solusi termudah yaitu menggunakan aplikasi console :grin:.   Tapi sebelumnya karena class Program akan mengakses class-class yang berhubungan dengan fitur .NET Remoting maka kita harus menambahkan terlebih dulu referensi library .NET Remoting.           Klik kanan node References -&gt; Add Reference …                   Aktifkan tab .NET kemudian pilih System.Runtime.Remoting                   Jika langkah sebelumnya berhasil akan ketambahan 1 buah node dengan nama System.Runtime.Remoting pada folder References.              Kembali ke class Program kemudian lengkapi kodenya seperti gambar berikut :      Perhatikan gambar diatas terutama yang diberi penanda merah, kode tersebut akan menjadi alamat dari remote object.   Ketika aplikasi klien ingin mengakses remote object yang ada di server, maka alamat url yang harus diakses menggunakan format berikut :      Dan berdasarkan kasus yang kita bahas maka nilai-nilai diatas disesuaikan seperti berikut :      Channel/protocol = tcp   Machine Name = localhost   Port = 1234   Object URI = SmartLibraryServer.BukuDao atau SmartLibraryServer.PenerbitDao   Sampai disini selesai sudah pembahasan tentang project SmartLibraryServer, kita bisa mencoba project ini dengan menekan tombol F5      Project terakhir yaitu SmartLibraryClient akan kita bahas pada kesempatan berikutnya insyaAllah :)   Selamat MENCOBA :blush:  ","categories": [".NET Remoting","Visual C#"],
        "tags": ["CRUD","dao","object uri","SmartLibraryLib","SmartLibraryServer"],
        "url": "http://coding4ever.net/blog/2012/03/23/pembuatan-aplikasi-client-server-dengan-arsitektur-3-tier-part-3/",
        "teaser": null
      },{
        "title": "Pembuatan Aplikasi Client Server dengan Arsitektur 3-tier Part 4",
        "excerpt":"Melanjutkan postingan sebelumnya, tetapi kita akan review sedikit beberapa project yang sudah kita buat :      SmartLibraryLib   SmartLibraryLib dibuat dengan memanfaatkan project bertipe Class Library yang isinya hanya berupa interface IDao dan class Model.     Hasil compile project ini akan menjadi file dengan ekstensi .dll (SmartLibraryLib.dll), file SmartLibraryLib.dll ini akan dishare atau ditambahkan sebagai referensi untuk aplikasi SmartLibraryServer dan SmartLibraryKlien.   Teknik ini dikenal dengan istilah “Shared Assembly” tujuannya adalah agar aplikasi server dan klien bisa berkomunikasi dengan cara yang sama.      SmartLibraryServer   SmartLibraryServer dibuat dengan memanfaatkan project bertipe Console Application, implementasi aslinya biasanya aplikasi server bisa dijadikan sebuah service (Windows Service) atau di hostnya menggunakan web service IIS.   Aplikasi inilah yang akan mengimplementasikan semua method-method abstract dari project SmartLibraryLib.   Adapun project penutup kita adalah SmartLibraryKlien, project ini dibuat  dengan memanfaatkan  project  bertipe  Windows Application  yang  isinya  hanya  berupa  Form  berikut  komponen-komponen pendukungnya (Label, TextBox, Button, ListView dll) :      Project  SmartLibraryKlien  tidak  langsung  mengakses  database  untuk  proses CRUDnya  melainnya  hanya  mengakses  objek-objek  dari project SmartLibraryServer secara remote, jadi  project  SmartLibraryServer  inilah  yang  sudah  menghandle  semua  proses CRUDnya.   Oke kita langsung saja mengaktifkan kembali solution SmartLibrarynya dimana didalamnya sudah terdapat project SmartLibraryLib dan SmartLibraryServer.              Klik kanan Solution SmartLibrary -&gt; Add -&gt; New Project                   Pada dialog Add New Project aktifkan pilihan Visual C# kemudian pada pilihan Templates pilih Windows Application              Pada isian Name isikan SmartLibraryKlien untuk isian Location dibiarkan saja setelah itu klik Ok.       Jika langkah sebelumnya berhasil maka pada solution SmartLibrary akan ketambahan satu project baru yaitu SmartLibraryKlien.      Secara default pada saat pembuatan project dengan tipe Windows Application sudah otomatis disediakan 1 buah form kosong dengan nama Form1, kita akan menambahkan form baru jadi form ini dihapus saja.      Menambahkan folder View   Folder disini digunakan untuk mengelompokkan class sesuai dengan fungsinya, contoh kita akan menambahkan folder View yang di dalamnya terdapat class FrmBuku dan FrmAddEditBuku.           Klik kanan project SmartLibraryKlien -&gt; Add -&gt; New Folder                     Menambahkan FrmBuku dan FrmAddEditBuku           Klik kanan folder View -&gt; Add -&gt; Windows Form …                   Pada dialog Add New Item – SmartLibraryKlien, isikan FrmBuku pada isian Name                   Jika sudah berhasil menambahkan FrmBuku, ulangi langkah sebelumnya untuk menambahkan FrmAddEditBuku              Berikut hasil akhir sementara dari langkah-langkah sebelumnya      Setelah itu kita desain tampilkan FrmBuku dan FrmAddEditBuku seperti berikut :         Menambahkan Library SmartLibraryLib   Sama seperti aplikasi server (SmartLibraryServer) yang membutuhkan library SmartLibraryLib, aplikasi klien (SmartLibraryKlien) juga membutuhkan library ini, tujuannya adalah agar aplikasi server dan klien bisa berkomunikasi dengan cara yang sama.   Oke berikut langkah-langkahnya :           Klik kanan folder References -&gt; Add Reference…                   Aktifkan tab Projects kemudian pilih SmartLibraryLib                   Jika langkah sebelumnya berhasil akan ketambahan 1 buah node dengan nama SmartLibraryLib pada folder References              Sampai disini kita tinggal melengkapi kode FrmBuku dan FrmAddEditBuku.   Berikut ringkasan kodenya.   // namespace utk mengakses interface dao dan class model using SmartLibraryLib.IDao; using SmartLibraryLib.Model;  Kode diatas perlu ditambahkan agar FrmBuku bisa mengakses semua interface dan class model yang ada di dalam library SmartLibraryLib.   private IBukuDao bukuDao = null;  Objek bukuDao merupakan objek dari interface IBukuDao yang berfungsi sebagai proxy dari remote object class BukuDao.   Sebuah method jika dipanggil melalui objek proxy maka akan dieksekusi secara remote.   // constructor public FrmBuku() {     InitializeComponent();      string server = \"localhost\";     string port = \"1234\";     string uri = \"SmartLibraryServer.BukuDao\";      string url = \"tcp://\" + server + \":\" + port + \"/\" + uri;      // mendapatkan proxy untuk remote object dari class BukuDao     bukuDao = (IBukuDao)Activator.GetObject(typeof(IBukuDao), url);      // tampilkan semua data buku     LoadDataBuku();  }  Kode diatas adalah sebuah constructor dan seharusnya kita sudah tidak asing lagi dengan yang satu ini.   Constructor adalah method khusus yang akan dipanggil pada saat menciptakan objek dari sebuah class.   Penjelasan dari mana datangnya nilai locahost, 1234 dan SmartLibraryServer.BukuDao pada kode di atas bisa Anda lihat disini.   Menampilkan Data   // method untuk menampilkan data buku ke listview private void FillToListView(bool addData, Buku buku) {     if (addData)     {         int noUrut = lvwBuku.Items.Count + 1;          ListViewItem item = new ListViewItem(noUrut.ToString());         item.SubItems.Add(buku.ISBN);         item.SubItems.Add(buku.Judul);         item.SubItems.Add(buku.Bahasa);         item.SubItems.Add(buku.Edisi);         item.SubItems.Add(buku.Penerbit.Nama);          lvwBuku.Items.Add(item);     }     else     {         int row = lvwBuku.SelectedIndices[0];          ListViewItem itemRow = lvwBuku.Items[row];         itemRow.SubItems[2].Text = buku.Judul;         itemRow.SubItems[3].Text = buku.Bahasa;         itemRow.SubItems[4].Text = buku.Edisi;         itemRow.SubItems[5].Text = buku.Penerbit.Nama;     } }  // method untuk menampilkan semua data buku private void LoadDataBuku() {     lvwBuku.Items.Clear();      List&lt;Buku&gt; daftarBuku = bukuDao.GetAll();     foreach (Buku buku in daftarBuku)     {         FillToListView(true, buku);     } }  // method untuk menampilkan semua data buku berdasarkan judul private void LoadDataBuku(string judul) {     lvwBuku.Items.Clear();      List&lt;Buku&gt; daftarBuku = bukuDao.GetByName(judul);     foreach (Buku buku in daftarBuku)     {         FillToListView(true, buku);     } }  Menyimpan dan Mengupdate Data   private void btnSimpan_Click(object sender, EventArgs e) {     int result = 0;      Buku buku = new Buku();     buku.ISBN = txtISBN.Text;     buku.Judul = txtJudul.Text;     buku.Bahasa = txtBahasa.Text;     buku.Edisi = txtEdisi.Text;     buku.Penerbit.PenerbitID = penerbitID[cmbPenerbit.SelectedIndex];      if (this.addData) // data baru     {         result = bukuDao.Save(buku);         if (result &gt; 0)         {             ResetInput();             txtISBN.Focus();         }         else         {             MessageBox.Show(\"Data buku gagal disimpan\", \"Peringatan\", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);         }     }     else     {         result = bukuDao.Update(buku);         if (result &gt; 0)         {             this.Close();         }         else         {             MessageBox.Show(\"Data buku gagal disimpan\", \"Peringatan\", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);         }     } }  Menghapus Data   private void btnHapus_Click(object sender, EventArgs e) {     if (lvwBuku.SelectedItems.Count &gt; 0)     {         int row = lvwBuku.SelectedIndices[0];          ListViewItem itemRow = lvwBuku.Items[row];          Buku buku = new Buku();         buku.ISBN = itemRow.SubItems[1].Text;         buku.Judul = itemRow.SubItems[2].Text;          string msg = \"Apakah data buku '\" + buku.Judul + \"' ingin dihapus ?\";         if (MessageBox.Show(msg, \"Konfirmasi\", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)         {             int result = bukuDao.Delete(buku);             if (result &gt; 0) // data barang berhasil dihapus             {                 MessageBox.Show(\"Data buku berhasil dihapus\", \"Informasi\", MessageBoxButtons.OK, MessageBoxIcon.Information);                 LoadDataBuku();             }             else             {                 MessageBox.Show(\"Data buku gagal dihapus\", \"Warning\", MessageBoxButtons.OK, MessageBoxIcon.Warning);             }         }      }     else // data belum dipilih     {         MessageBox.Show(\"Data belum dipilih\");     } }  Menjalankan dua project secara bersamaan   Secara defaut pada saat kita menjalankan program (F5) hanya satu project yang akan dijalankan dalam satu waktu, sedangkan untuk mencoba aplikasi ini kita harus menjalankan project SmartLibraryServer dan SmartLibraryKlin secara bersamaan.   Untuk merubah setting ini berikut langkah-langkahnya :           Klik kanan solution -&gt; Set Startup Projects                   Pada dialog Solution aktifkan pilihan Multiple startup projects kemudian atur urutan eksekusinya (server dulu kemudian klien)              Setelah itu kita bisa langsung menekan tombol F5      Pada gambar diatas terlihat setiap kali aplikasi klien mengakses method CRUD, prosesnya akan dijalankan di sisi server, ini dibuktikan dengan muncul pesan “Method  dieksekusi di sisi server\".   Selamat MENCOBA :blush:  ","categories": [".NET Remoting","Visual C#"],
        "tags": ["proxy","SmartLibraryKlien","SmartLibraryLib","SmartLibraryServer"],
        "url": "http://coding4ever.net/blog/2012/04/28/pembuatan-aplikasi-client-server-dengan-arsitektur-3-tier-part-4/",
        "teaser": null
      },{
        "title": "Disable/Enable Task Manager Windows 7 C# Edition",
        "excerpt":"Beberapa waktu yang lalu saya pernah membahas bagaimana menonaktifkan tombol CTRL+ALT+DEL di Windows XP dengan beberapa variasi kode.   Salah satu yang memuaskan hasilnya adalah dengan menggunakan library WinLockDll.dll yang dibuat oleh om Antonio Feijao.   Pada postingan kali ini saya juga akan menggunakan library yang sama, hanya saja fungsi2x dari library WinLockDll.dll akan kita panggil dari C#.     Kita tidak perlu menambahkan library WinLockDll.dll pada bagian references karena library ini masuk dalam kategori unmanaged dll jadi cukup dengan mengcopykan file WinLockDll.dll ke folder bin\\Debug atau bin\\Release.   Setelah itu kita akan memanfaatkan atribut DllImport yang ada di dalam namespace System.Runtime.InteropServices untuk memanggil fungsi2x API dari library tersebut.   Mari kita lihat cuplikan kodenya :      Nah sederhana bukan.   Pada gambar diatas terlihat fungsi yang kita butuhkan untuk menonaktifkan Windows Task Manager yaitu TaskManager_Enable_Disable.   Sekarang kita lihat cara penggunaannya   private void btnDisableTaskManager_Click(object sender, EventArgs e) {     TaskManager_Enable_Disable(false); }  private void btnEnableTaskManager_Click(object sender, EventArgs e) {     TaskManager_Enable_Disable(true); }        Selamat MENCOBA :blush:   Referensi :      Lock Windows Desktop   Dealing with DllImport   Winlock in VB.NET  ","categories": ["Visual C#"],
        "tags": ["CTRL+ALT+DEL","Disable","Enable","Windows Task Manager","WinlockDLL"],
        "url": "http://coding4ever.net/blog/2012/05/03/disableenable-windows-task-manager-c-edition/",
        "teaser": null
      },{
        "title": "Input data via grid",
        "excerpt":"Sudah lama enggak posting tentang Visual Basic 6 jadi kangen juga :grin:.   Kali ini kita akan membahas bagaimana mudahnya melakukan input data langsung di grid menggunakan komponen VSFlexGrid.   VSFlexGrid sudah menyediakan beberapa method dan event yang mempermudah kita untuk melakukan hal ini, kita lihat screenshotnya.     ![](http://coding4ever.files.wordpress.com/2012/05/13052012.png{: .align-center}   Berikut beberapa fitur yang akan kita bahas :   1. Validasi   Pada sample program di atas kita akan menambahkan beberapa validasi input seperti konversi ke huruf besar untuk kolom NAMA BARANG dan validasi input angka untuk kolom STOK dan HARGA JUAL. Kedua fitur ini membutuhkan fungsi berikut :   Private Function convertToUpper(ByVal keyAscii As Integer) As Integer     convertToUpper = Asc(UCase$(Chr$(keyAscii))) End Function  Private Function numericOnly(ByVal keyAscii As Integer) As Integer     Dim strValid As String      On Error GoTo errHandle      strValid = \"0123456789.\"     If InStr(strValid, Chr(keyAscii)) = 0 And Not (keyAscii = vbKeyBack) Then         numericOnly = 0     Else         numericOnly = keyAscii     End If      Exit Function errHandle:     numericOnly = 0 End Function  Selanjutnya fungsi diatas tinggal dipanggil di event KeyPressEdit dari komponen VSFlexGrid.   Private Sub Grid1_KeyPressEdit(ByVal Row As Long, ByVal Col As Long, keyAscii As Integer)     If keyAscii = vbKeyReturn Then         Call nextFocus     End If      Select Case Col         Case 0 ' kode barang         Case 1 ' nama barang             keyAscii = convertToUpper(keyAscii)         Case 2, 3 ' stok dan harga             keyAscii = numericOnly(keyAscii)     End Select End Sub  2. Focus dan Lostfocus backcolor   Sesuai nama fiturnya cell grid akan berubah warna ketika cursor mouse aktif pada cell.   Private Sub Grid1_StartEdit(ByVal Row As Long, ByVal Col As Long, Cancel As Boolean)     If Col = 3 Then ' harga jual         Grid1.TextMatrix(Row, Col) = Replace(Grid1.TextMatrix(Row, Col), \",\", \"\")     End If      Grid1.CellBackColor = &amp;HC0FFFF ' warna kuning End Sub  Private Sub Grid1_AfterEdit(ByVal Row As Long, ByVal Col As Long)     If Col = 3 Then ' harga jual         If IsNumeric(Grid1.TextMatrix(Row, Col)) Then             Grid1.TextMatrix(Row, Col) = FormatNumber(Grid1.TextMatrix(Row, Col), 0)         End If     End If     Grid1.CellBackColor = vbDefault End Sub  Terakhir agar mode edit cellnya aktif pada saat cursor mouse aktif tinggal panggil method EditCell di event Click dan EnterCell   Private Sub Grid1_Click()     Grid1.EditCell End Sub  Private Sub Grid1_EnterCell()     Grid1.EditCell End Sub  Selamat MENCOBA :blush:  ","categories": ["Visual Basic"],
        "tags": ["AfterEdit","EnterCell","input via grid","KeyPressEdit","StartEdit","VSFlexGrid"],
        "url": "http://coding4ever.net/blog/2012/05/12/input-data-via-grid/",
        "teaser": null
      },{
        "title": "Berlindung di belakang SYSDBA :grin:",
        "excerpt":"Beberapa waktu yang lalu sy pernah menulis bagaimana cara Menembus pertahanan database Firebird yang diproteksi menggunakan SYSDBA sebagai tamengnya :grin:, nah biar imbang sekarang kita akan bahas bagaimana langkah-langkah pembuatannya.   Tool yang digunakan juga masih sama yaitu IBExpert personal edition (free), oke langsung saja kita mulai :).     1. Persiapkan database yang akan diproteksi   Untuk contoh disini sy menggunakan database dg nama db_sample.fdb yang di tempatkan di drive C:\\   Berikut langkah-langkah untuk mendaftarkan database firebird ke IBExpert.   a. Klik menu Database -&gt; Register Database         Kemudian login menggunakan user default Firebird yaitu SYSDBA dengan password** masterkey**.   Untuk versi server tinggal disesuaikan dengan versi Firebird yang terinstall.   b. Aktifkan database sample dengan cara klik ganda node DB SAMPLE      2. Buat user baru yang akan kita jadikan sebagai pengganti SYSDBA, misal K4M4R82.   User baru ini akan kita berikan hak akses untuk menghakses semua tabel dan obej-objek lain yang diperlukan.   Berikut langkah-langkahnya :   a. Klik menu Tools -&gt; User Management, kemudian login menggunakan user SYSDBA dan password masterkey.      b. Tambahkan user baru dengan mengklik tombol Add      Kita akan menambahkan user baru dengan nama K4M4R82 dan password rahasia.   Jika berhasil akan terlihat seperti berikut :      3. Mengatur hak akses user   IBExpert mempunyai fitur untuk mengatur hak akses user, sayangnya fitur ini tidak aktif untuk versi personal edition (free), jadi kita akan mencoba solusi lain yaitu dengan membuat stored procedure dengan nama GRANT_USER.   Berikut scriptnya :   SET TERM ^ ;  CREATE OR ALTER PROCEDURE GRANT_USER (     user_name varchar(10)) as declare variable table_name varchar(50); BEGIN   -- reset hak akses   DELETE FROM rdb$user_privileges   WHERE rdb$user = :user_name AND rdb$privilege IN ('I', 'U', 'D', 'S') AND rdb$user_type = 8 AND rdb$object_type = 0;    FOR -- ambil informasi nama-nama tabel         SELECT RDB$RELATION_NAME         FROM RDB$RELATIONS         WHERE RDB$SYSTEM_FLAG=0 INTO :table_name     DO     BEGIN          -- INSERT         INSERT INTO rdb$user_privileges (rdb$user, rdb$grantor, rdb$privilege, rdb$grant_option, rdb$relation_name, rdb$user_type, rdb$object_type)         VALUES (:user_name, 'SYSDBA', 'I', 1, :table_name, 8, 0);          -- UPDATE         INSERT INTO rdb$user_privileges (rdb$user, rdb$grantor, rdb$privilege, rdb$grant_option, rdb$relation_name, rdb$user_type, rdb$object_type)         VALUES (:user_name, 'SYSDBA', 'U', 1, :table_name, 8, 0);          -- DELETE         INSERT INTO rdb$user_privileges (rdb$user, rdb$grantor, rdb$privilege, rdb$grant_option, rdb$relation_name, rdb$user_type, rdb$object_type)         VALUES (:user_name, 'SYSDBA', 'D', 1, :table_name, 8, 0);          -- SELECT         INSERT INTO rdb$user_privileges (rdb$user, rdb$grantor, rdb$privilege, rdb$grant_option, rdb$relation_name, rdb$user_type, rdb$object_type)         VALUES (:user_name, 'SYSDBA', 'S', 1, :table_name, 8, 0);     END      INSERT INTO rdb$user_privileges (rdb$user, rdb$grantor, rdb$privilege, rdb$grant_option, rdb$relation_name, rdb$user_type, rdb$object_type)     VALUES (:user_name, 'SYSDBA', 'S', 1, 'RDB$RELATIONS', 8, 0); END ^  SET TERM ; ^  Untuk menjalankan script diatas kita akan menggunakan editor Script Executive (CTRL+F12)      4. Eksekusi stored procedure grant_user   Setelah langkah sebelumnya selesai kita tinggal panggil stored procedure grant_user seperti berikut :   EXECUTE PROCEDURE grant_user('K4M4R82')  5. Menambahkan role ‘SYSDBA’   Informasi role tersimpan di dalam tabel sistem yang bernama rdb$roles, sehingga untuk menambahkannya kita bisa menggunakan perintah INSERT yang sudah biasa kita gunakan.   INSERT INTO rdb$roles (rdb$role_name, rdb$owner_name, rdb$system_flag) VALUES ('SYSDBA', 'K4M4R82', 0)  6. Disconnect dari database sample      7. Aktifkan kembali database sample dengan cara klik ganda node DB SAMPLE      Jika muncul peringatan berikut      berarti database kita sudah terlindungi oleh SYSDBA :)   8. Terakhir kita coba login ulang dengan menggunakan user K4M4R82         Selamat mencoba :blush:  ","categories": ["Firebird"],
        "tags": ["ibexpert","memproteksi database firebird","proteksi SYSDBA"],
        "url": "http://coding4ever.net/blog/2012/05/19/berlindung-di-belakang-sysdba/",
        "teaser": null
      },{
        "title": "Pembuatan Aplikasi Client Server dengan Arsitektur 3-tier Part 5",
        "excerpt":"Sebagai penutup postingan berseri ini kita akan bahas bagaimana membuat report menggunakan data-push reporting model (halah opo meneh iki :grin:) dengan model ini report yang dibuat tidak langsung mengakses database tetapi cukup dengan memanfaatkan objek DataSet.   Penggunaan model ini sangat pas dan nyambung dengan postingan berseri ini, dimana aplikasi klien akan memanggil sebuah method secara remote menggunakan objek proxy, method ini akan mengambalikan nilai dalam bentuk objek DataSet, dan untungnya DataSet merupakan turunan dari class MarshalByValueComponent sehingga bisa langsung diserialisasikan dari domain aplikasi yang berbeda dalam hal ini dari aplikasi server ke klien.     Untuk contoh report disini sy menggunakan Active Report .NET dan untuk postingan kali ini sy tidak akan membahas secara rinci bagaimana membuat report menggunakan Active Report .NET.   Oke langsung saja kita aktifkan kembali solution SmartLibrary yang di dalamnya sudah ada tiga proyek yaitu SmartLibraryKlien, SmartLibraryServer dan SmartLibraryLib.   Untuk Active Report .NETnya akan kita tambahkan pada proyek SmartLibraryKlien, tapi sebelumnya akan kita tambahkan terlebih dulu sebuah folder dengan nama Report dan sebuah form dengan nama FrmPreview.      Pada FrmPreview ini akan kita tambahkan komponen Active Report .NET Viewer yang berfungsi sebagai container untuk menampung objek dari report Active Report .NET         Kemudian masuk ke editor code FrmPreview dan tambahkan kode berikut      Nah sampai disini kita sudah bisa menambahkan report untuk SmartLibraryKlien, adapun langkah-langkahnya seperti berikut :           Aktifkan folder Report, kemudian klik kanan pilih menu Add -&gt; New Item                   Pilih item ActiveReport 3.0 File dan untuk isian Name diisi dengan ArLapBuku              Nah untuk desain reportnya cukup seperti berikut :      Setelah itu lengkapi kode untuk reportnya seperti berikut :      Yaph sampai disini untuk persiapan reportnya sudah selesai, report ini akan kita panggil dari FrmBuku jadi kita aktifkan terlebih dulu FrmBuku kemudian kita tambahkan satu buah tombol dengan nama btnPreview (Preview).      Adapun untuk kodenya seperti berikut :      pada gambar diatas terlihat objek bukuDao yang merupakan objek proxy memanggil method GetReportAll, ketika sebuah method dipanggil melalui objek proxy maka method tersebut akan dieksekusi di sisi server (SmartLibraryServer), mari kita intip kode methodnya :grin:.      Halah enggak ada kode yg aneh ternyata :grin:   Method GetReportAll di atas mengembalikan nilai berupa objek DataSet, objek DataSet sendiri merupakan turunan dari objek MarshalByValueComponent sehingga bisa langsung diserialisasi dari satu domain ke domain lain.   Oke sy cukupkan sampai disini, sekarang mari kita lihat demonya :)         Selamat MENCOBA :blush:  ","categories": [".NET Remoting","Visual C#"],
        "tags": ["data-push reporting model","domain","MarshalByValueComponent","smartlibrary"],
        "url": "http://coding4ever.net/blog/2012/05/30/pembuatan-aplikasi-client-server-dengan-arsitektur-3-tier-part-5/",
        "teaser": null
      },{
        "title": "Menggunakan library .NET di VB 6",
        "excerpt":"Ini postingan lama sebenarnya, jawaban sy untuk salah satu pertanyaan member di forum i-bego.   Sy posting kembali disini untuk tujuan dokumentasi saja, mana tau suatu saat sy butuhkan.   Untuk contoh kasusnya adalah kita akan mengambil salah satu project open source yg bernama QRCode Library dibuat menggunakan C#, dan dengan sedikit modifikasi library .NET ini akan bisa kita gunakan untuk VB 6.     Tapi sebelumnya kita lihat dulu apa itu QR Code ???      QR Code (abbreviated from Quick Response Code) is the trademark for a type of matrix barcode (or two-dimensional code) first designed for the automotive industry. More recently, the system has become popular outside the industry due to its fast readability and large storage capacity compared to standard UPC barcodes. The code consists of black modules (square dots) arranged in a square pattern on a white background. The information encoded can be made up of four standardized kinds (“modes”) of data (numeric, alphanumeric, byte/binary, Kanji), or through supported extensions, virtually any kind of data.    Sumber : http://en.wikipedia.org/wiki/QR_code   Contoh QR Code      Oke langsung saja download QRCode Library, untuk contoh disini sy menggunakan C# 2005   1. Aktifkan terlebih dulu project QRCode Library      2. klik kanan Project (QRCodeLib) -&gt; Properties, aktifkan tab Application kemudian klik tombol Assembly Information … kemudian aktifkan pilihan Make assembly COM-Visible         3. Aktifkan tab Build kemudian aktifkan pilihan Register for COM interop      4. Mendaftarkan file ThoughtWorks.QRCode.dll dan ThoughtWorks.QRCode.tlb menggunakan tool RegAsm.exe yg ada di folder NET Framework   C:\\Windows\\Microsoft.NET\\Framework\\v2.0.50727  Contoh saya menggunakan dot NET Framework 2, adapun perintahnya seperti berikut :   regasm ThoughtWorks.QRCode.dll /tlb: ThoughtWorks.QRCode.tlb /codebase  Sampai disini QRCode Library sudah bisa diakses dari VB 6      Sekarang kita lihat sample asli dari QRCode Library      Dari sample tersebut kode (C#) untuk melakukan encode sebuah data bertipe string menjadi gambar dengan format QR Code adalah seperti berikut :   private void btnEncode_Click_1(object sender, EventArgs e) {     if (txtEncodeData.Text.Trim() == String.Empty)     {         MessageBox.Show(\"Data must not be empty.\");         return;     }      QRCodeEncoder qrCodeEncoder = new QRCodeEncoder();     String encoding = cboEncoding.Text ;     if (encoding == \"Byte\") {         qrCodeEncoder.QRCodeEncodeMode = QRCodeEncoder.ENCODE_MODE.BYTE;     } else if (encoding == \"AlphaNumeric\") {         qrCodeEncoder.QRCodeEncodeMode = QRCodeEncoder.ENCODE_MODE.ALPHA_NUMERIC;     } else if (encoding == \"Numeric\") {         qrCodeEncoder.QRCodeEncodeMode = QRCodeEncoder.ENCODE_MODE.NUMERIC;     }     try {         int scale = Convert.ToInt16(txtSize.Text);         qrCodeEncoder.QRCodeScale = scale;     } catch (Exception ex) {         MessageBox.Show(\"Invalid size!\");         return;     }     try {         int version = Convert.ToInt16(cboVersion.Text) ;         qrCodeEncoder.QRCodeVersion = version;     } catch (Exception ex) {         MessageBox.Show(\"Invalid version !\");     }      string errorCorrect = cboCorrectionLevel.Text;     if (errorCorrect == \"L\")         qrCodeEncoder.QRCodeErrorCorrect = QRCodeEncoder.ERROR_CORRECTION.L;     else if (errorCorrect == \"M\")         qrCodeEncoder.QRCodeErrorCorrect = QRCodeEncoder.ERROR_CORRECTION.M;     else if (errorCorrect == \"Q\")         qrCodeEncoder.QRCodeErrorCorrect = QRCodeEncoder.ERROR_CORRECTION.Q;     else if (errorCorrect == \"H\")         qrCodeEncoder.QRCodeErrorCorrect = QRCodeEncoder.ERROR_CORRECTION.H;      Image image;     String data = txtEncodeData.Text;     image = qrCodeEncoder.Encode(data);     picEncode.Image = image; }  Sedangkan untuk versi VB 6nya sy buat sesimple mungkin   Private Sub cmdEncode_Click()     Dim qrEncoder As New QRCodeEncoder      qrEncoder.QRCodeEncodeMode = ENCODE_MODE.ENCODE_MODE_BYTE     qrEncoder.QRCodeScale = 4     qrEncoder.QRCodeVersion = 7     qrEncoder.QRCodeErrorCorrect = ERROR_CORRECTION.ERROR_CORRECTION_M      picEncode.Picture = qrEncoder.Encode(txtEncodeData.Text) ' error : Invalid procedure call or argument End Sub  tapi hasilnya malah error ‘Invalid procedure call or argument’ :frowning:, dan berdasarkan hasil pengamatan sementara, menurut sy penyebab errornya adalah karena method Encode adalah method yg dioverload sedangkan method overload belum disupport oleh VB 6.   public virtual Bitmap Encode(String content) public virtual Bitmap Encode(String content, Encoding encoding)  Jadi sy putuskan untuk menambahkan method baru dengan nama EncodeVB6, kemudian mengganti perintah   picEncode.Picture = qrEncoder.Encode(txtEncodeData.Text)  menjadi   picEncode.Picture = qrEncoder.EncodeVB6(txtEncodeData.Text)  Kode lengkap method EncodeVB6   public virtual Bitmap EncodeVB6(String content) {     if (QRCodeUtility.IsUniCode(content))     {         return Encode(content, Encoding.Unicode);     }     Else     {         return Encode(content, Encoding.ASCII);     } }  Horeeeeee gubrakk, ternyata…. masih error :frowning: ‘Type mismatch’   picEncode.Picture = qrEncoder.EncodeVB6(txtEncodeData.Text) ' error : Type mismatch  dari pesan errornya sudah jelas karena properties Picture bertipe StdPicture sedangkan method EncodeVB6 bertipe Bitmap dan di VB 6 enggak ada tipe Bitmap :frowning:, tapi untungnya :blush: ada method ImageToIPicture yg diambil dari class Support (namespace Microsoft.VisualBasic.Compatibility.VB6) sehingga method EncodeVB6nya kita revisi menjadi :   public virtual object EncodeVB6(String content) {     if (QRCodeUtility.IsUniCode(content))     {         return Microsoft.VisualBasic.Compatibility.VB6.Support.ImageToIPicture(Encode(content, Encoding.Unicode));     }     Else     {         return Microsoft.VisualBasic.Compatibility.VB6.Support.ImageToIPicture(Encode(content, Encoding.ASCII));     } }  Sampai disi permasalah method EncodeVB6 sudah selesai :blush:   Terakhir kita akan melakukan proses decode      dan kita lihat dulu kode aslinya (c#)   private void btnDecode_Click(object sender, EventArgs e) {     try     {         QRCodeDecoder decoder = new QRCodeDecoder();         String decodedString = decoder.decode(new QRCodeBitmapImage(new Bitmap(picDecode.Image)));          txtDecodedData.Text = decodedString;     }     catch (Exception ex)     {         MessageBox.Show(ex.Message);     } }  Dari kode diatas jelas tidak bisa langsung dikonversi ke VB 6 karena VB 6 tidak mendukung pemanggilan constructor class yg mempunyai parameter.   Tapi ada baiknya kita lihat dulu constructor class QRCodeBitmapImage yg ternyata membutuhkan objek Bitmap pada saat dipanggil.   /// &lt;summary&gt; /// Constructor /// &lt;/summary&gt; ///Bitmap image/param&gt; public QRCodeBitmapImage(Bitmap image) {     this.image = image; }  Solusinya kita akan menambahkan costructor default (constructor tanpa parameter)   // default constructor Public QRCodeBitmapImage() { }  trus untuk melewatkan objek Bitmap ke class QRCodeBitmapImage kita akan menambahkan property baru misal dengan nama SetBitmap, adapun kodenya seperti berikut :   public virtual Bitmap SetBitmap {     set { image = value; } }  Properties SetBitmap diatas bertipe Bitmap, tapi sayang di VB 6 belum ada padanan tipe datanya jadi kita akan menggunakan tipe Object, kemudian untuk mengkonversi ke tipe Bitmap kita menggunakan method IPictureToImage yg diambil dari class Support (namespace Microsoft.VisualBasic.Compatibility.VB6)   public virtual object SetBitmap {     set { image = (System.Drawing.Bitmap)Microsoft.VisualBasic.Compatibility.VB6.Support.IPictureToImage(value); } }  Setelah itu baru kita bisa melakukan konversi dengan aman di VB 6   Private Sub cmdDecode_Click()     Dim decoder As New QRCodeDecoder      Dim decodedString As String      Dim qrCodeImage As New QRCodeBitmapImage     qrCodeImage.SetBitmap = picEncode.Picture      decodedString = decoder.decodeVB6(qrCodeImage)      MsgBox \"Hasil decode : \" &amp; vbCrLf &amp; decodedString, vbInformation, \"Informasi\" End Sub     Yuph akhirnya selesai juga :blush:   Selamat MENCOBA :blush:  ","categories": ["Visual Basic","Visual C#"],
        "tags": ["com-visible","qr code","qrcode library"],
        "url": "http://coding4ever.net/blog/2012/06/01/menggunakan-library-net-di-vb-6/",
        "teaser": null
      },{
        "title": "The Power of Firebird Events",
        "excerpt":"Intro   Judul postingan kali ini saya ambil dari dokumentasi resmi website Firebird dengan sub dokumen White Papers &amp; Presentations.   Sudah lama saya mengetahui adanya fitur keren ini, hanya saja karna waktu itu masih aktif ngoding menggunakan VB Classic jadi saya kurang tertarik untuk mencobanya (habis mau gimana lagi VB Classic memang belum mendukung fitur ini kok :grin:) CMIIW.     Ketika kita diminta untuk membuat aplikasi real time yang akan selalu merefresh data yang ditampilkan, pilihan kita biasanya selalu menggunakan objek timer, thread atau yang sejenisnya untuk selalu mengecek apa ada data baru yang ditambahkan/diperbaiki/dihapus.   Penggunaan objek-objek ini sedikit banyaknya akan memakan resource yang lumayan apalagi untuk aplikasi yang masa aktifnya lama seperti aplikasi sms gateway.   Contoh lain misalnya kita ingin membuat aplikasi sms yang otomatis mengirimkan sms notifikasi ke nomor-nomor tertentu setiap ada data pembelian yang diinputkan.   Jadi dengan memanfaatkan fitur ini kita tidak perlu lagi atau minimal mengurangi ketergantungan terhadap objek-objek timer dan sejenisnya.   Dan sesuai dengan nama fitur ini yaitu “Events”, mungkin sudah terlintas dipikiran kita bahwa fitur ini sangat cocok jika digabungkan dengan fitur Firebird lainnya yaitu Trigger.   Membuat Event   Untuk demo membuat event ini saya menggunakan tool IBExpert dan sudah pernah saya bahas bagaimana cara penggunaan tool ini disini.   Untuk contoh kasus kali ini kita akan menambahkan dua event, masing-masing pada tabel CUSTOMER dan SUPPLIER, adapun struktur tabelnya seperti berikut :   CREATE TABLE SUPPLIER (     ID      INTEGER NOT NULL,     NAMA    VARCHAR(30),     ALAMAT  VARCHAR(30) );  CREATE TABLE CUSTOMER (     ID      INTEGER NOT NULL,     NAMA    VARCHAR(30),     ALAMAT  VARCHAR(30) );  Event kita tambahkan pada saat pembuatan trigger, berikut langkah-langkahnya :           Aktifkan salah satu tabel misal Customer, kemudian pilih tab trigger                   Klik kanan pada item After Insert                   Kemudian lengkapi kode triggernya seperti gambar berikut :              Pada contoh di atas kita menambahkan sebuah event dengan nama NEW_CUSTOMER yang otomatis akan dieksekusi pada saat terjadi proses INSERT pada tabel Customer.   Untuk selanjutnya kita ulangi lagi langkah-langkah diatas untuk menambahkan event dengan nama NEW_SUPPLIER pada tabel Supplier.   Menangkap Event dari Aplikasi   Untuk mendemokan bagaimana menangkap event firebird dari aplikasi, saya menggunakan C# dengan tipe project Windows Application.   C# sendiri tidak otomatis bisa mengakses database firebird tetapi harus menambahkan library FirebirdClient - ADO.NET Data Provider yang bisa didownload disini.   Berikut langkah-langkah untuk menambahkan library FirebirdClient - ADO.NET Data Provider           Klik kanan node References -&gt; Add Reference..                   Pilih library FirebirdClient - ADO.NET Data Provider yang sudah didownload kemudian klik Ok              Adapun kode lengkapnya seperti berikut :   using FirebirdSql.Data.FirebirdClient;  private FbConnection conn = null;  public Form1() {     InitializeComponent();      string dbPath = System.IO.Directory.GetCurrentDirectory() + \"\\\\FBEVENT.FDB\";     string server = \"127.0.0.1\";      string strCon = \"User ID=SYSDBA;Password=masterkey;Database=\" + server + \":\" + dbPath;     conn = new FbConnection(strCon);     conn.Open();      // mendaftarkan event yang akan ditangkap     string[] daftarEvent = { \"NEW_CUSTOMER\", \"NEW_SUPPLIER\" };     FbRemoteEvent remoteEvent = new FbRemoteEvent(conn, daftarEvent);      // proses delegate, untuk mendaftarkan method RemoteEventCounts pada event FbRemoteEventEventHandler     remoteEvent.RemoteEventCounts += new FbRemoteEventEventHandler(RemoteEventCounts);      remoteEvent.QueueEvents(); }  private void RemoteEventCounts(object sender, FbRemoteEventEventArgs args) {     if (args.Counts == 1)     {         switch (args.Name)         {             case \"NEW_CUSTOMER\":                 LoadData(\"customer\", lstCustomer);                 break;              case \"NEW_SUPPLIER\":                 LoadData(\"supplier\", lstSupplier);                 break;         }     } }  Yang perlu diperhatikan pada method RemoteEventCounts diatas adalah setiap ada event yang masuk otomatis akan memanggil method LoadData   private void LoadData(string tableName, ListBox lst) {     string strSql = \"SELECT nama, alamat FROM \" + tableName;      lst.Items.Clear();     using (FbCommand cmd = new FbCommand(strSql, conn))     {         using (FbDataReader dtr = cmd.ExecuteReader())         {             while (dtr.Read())             {                 lst.Items.Add(dtr.GetString(0) + \", \" + dtr.GetString(1));             }         }     } }  Yuph sampe disini sudah selesai, saatnya kita uji coba aplikasi ini.   Demo Menangkap Event   Untuk membuktikan bahwa fitur event ini berfungsi dengan baik, saya akan menambahkan data secara langsung menggunakan tool IBExpert.   Perhatikan gambar awal sebelum perintah INSERT dijalankan.      Setelah saya menjalankan printah INSERT diatas, aplikasi yang saya buat menggunakan C# secara otomatis menampilkan data yang saya inputkan melalui tool IBExpert.      Selamat MENCOBA :blush:  ","categories": ["Firebird","Visual C#"],
        "tags": ["event","FirebirdClient – ADO.NET Data Provider","The Power of Firebird Events","trigger"],
        "url": "http://coding4ever.net/blog/2012/07/23/the-power-of-firebird-events/",
        "teaser": null
      },{
        "title": "Update Smart Library School 07-08-2012",
        "excerpt":"Pada update kali ini tidak ada penambahan fitur baru, hanya perbaikan bug pada saat mengimpor data siswa.   Terima kasih kepada om dany dan seto yang sudah melaporkan bug ini.   Download  ","categories": ["Freeware"],
        "tags": ["bug","Smart Library School","UPDATE"],
        "url": "http://coding4ever.net/blog/2012/08/07/update-smart-library-school-07-08-2012/",
        "teaser": null
      },{
        "title": "Database Firebird versi Embedded",
        "excerpt":"Horeee akhirnya bisa nulis lagi dan ini postingan pertama saya di awal tahun 2013 :blush:   Beberapa waktu yang lalu saya sering menggunakan database Ms Access untuk pembuatan aplikasi standalone tetapi mengingat beberapa kekurangan yang dimiliki oleh database Ms Access seperti pembengkakan ukuran database yang sangat “mengerikan” :grin: dan terkadang terjadi kerusakan database sehingga memaksa saya untuk mencari alternatif lain yang bisa menggantikan database Ms Access.     Usut punya usut ternyata database favorit saya (Firebird) juga menyediakan library yang memungkinan database Firebrid bisa diperlakukan seperti layaknya database Ms Access (tanpa membutuhkan konfigurasi server sama sekali).   Pada postingan saya kali ini kita akan membahas apa saja yang diperlukan untuk memanfaatkan database Firebird versi Embedded setelah itu akan kita coba mengaksesnya dari bahasa pemrograman C#.   1. Download terlebih dulu library database Firebird versi Embedded      Ekstrak file Firebird-2.5.2.26539-0_Win32_embed.zip kemudian dari file-file yang ada, yang kita butuhkan hanya file fbembed.dll, icudt30.dll, icuin30.dll dan icuuc30.dll.      Semua file diatas harus dicopykan ke folder aplikasi (bin\\debug atau bin\\release).   2. Download Firebird ADO.NET Data Provider      Pada gambar di atas saya mendownload file NETProvider-3.0.2.0-NET35.7z karena saya menggunakan C# 2008 yang membutuhkan .NET Framework 3.5 kemudian ekstrak file tersebut.      Yang kita butuhkan cukup file FirebirdSql.Data.FirebirdClient.dll   3. String koneksi yang digunakan   String koneksi yang digunakan untuk mengakses database Firebird versi non Embedded adalah seperti berikut :   var strConn = @\"User ID=SYSDBA;Password=masterkey;Database=localhost:c:\\database\\test.fdb\";  Sedangkan untuk versi Embeddednya seperti berikut :   var strConn = @\"ServerType=1;User=SYSDBA;Password=masterkey;Dialect=3;Database=c:\\database\\test\";  Setelah semua persiapan lengkap saatnya kita menuliskan kode untuk mengakses database Firebird versi Embedded           Buat project baru, untuk contoh disini saya menggunakan project dengan tipe Console Application                   Menambahkan referensi Firebird ADO.NET Data Provider       Untuk mengakses database Firebird kita membutuhkan libaray Firebird ADO.NET Data Provider.       Untuk menambahkan library tersebut kedalam project, caranya cukup mudah hanya dengan mengklik kanan Project -&gt; Add Reference…              Kemudian tentukan lokasi file FirebirdSql.Data.FirebirdClient.dll              Kemudian dilanjutkan dengan melakukan proses Build              Proses ini dibutuhkan untuk menghasilkan folder bin\\Debug atau bin\\Release            Mengcopykan file fbembed.dll, icudt30.dll, icuin30.dll dan icuuc30.dll ke folder bin\\Debug atau bin\\Release              Setelah itu kita akan coba kode untuk melakukan koneksi ke database dan menampilkan datanya.   namespace AksesFirebirdEmbedded {     class Program     {         static void Main(string[] args)         {             var appPath = System.IO.Directory.GetCurrentDirectory();             var strConn = \"ServerType=1;User=SYSDBA;Password=masterkey;Dialect=3;Database=\" + appPath + \"\\\\TEST.FDB\";              using (var conn = new FbConnection(strConn))             {                 conn.Open();                  var strSql = \"SELECT idagama, deskripsi FROM agama\";                 using (var cmd = new FbCommand(strSql, conn))                 {                     using (var dtr = cmd.ExecuteReader())                     {                         while (dtr.Read())                         {                             Console.WriteLine(dtr.GetString(0) + \", \" + dtr.GetString(1));                         }                     }                 }             }              Console.ReadKey();         }     } }     Selamat MENCOBA :blush:  ","categories": ["Firebird","Visual C#"],
        "tags": ["Database","Embedded","fbembed.dll","firebird","FirebirdSql.Data.FirebirdClient.dll","icudt30.dll","icuin30.dll dan icuuc30.dll"],
        "url": "http://coding4ever.net/blog/2013/01/09/database-firebird-versi-embedded/",
        "teaser": null
      },{
        "title": "ToDo List",
        "excerpt":"ToDo List merupakan salah satu tool gratis yang digunakan untuk mempermudah kita memanage tugas-tugas harian, terlebih lagi kita sebagai seorang developer yang mana dalam satu waktu kadang-kadang harus menghandle beberapa project sekaligus :grin:.   Selama ini untuk pencatatan tugas harian saya biasanya menggunakan Sticky Notes atau Ms Excel.     Tetapi karena keterbatasan kedua tool tersebutnya memaksa saya untuk mencari alternatif tool lainnya dan akhirnya menemukan tool yang keren ini :).   Nah ini dia tampilan ToDo List, saat tulisan ini diposting versi terakhirnya adalah 6.5.10      Daftar fitur :      Priority of tasks High, Medium, Low.   Grid view to list the tasks, which can be shuffled when ultrabook is shaked. To do this i’m using the ultrabook in build events. The list is sorted in this order due date, priority for each shake of ultrabook.   Swipe the list item to right side, then it will be set as completed task.   Swipe the list item to left side, then it will be deleted.   Swipe the list from top down or bottom up to select the tasks in the list, then swipe the selected tasks to right side for complete, and left side for deleting.   If you tap a task then it will allow you to edit the task name.   If you tap a task with two fingers then can edit all the details of tasks.   Also we can have location field to note the location where the task gonna happen.   Dan masih banyak fitur-fitur lainnya.   Jika Anda ingin mendapatkan tampilan ToDo List seperti di atas harus melakukan konfigurasi secara manual dan bagi Anda yang lagi males :stuck_out_tongue: melakukan konfigurasi sendiri bisa langsung download hasil konfigurasi saya disini.   Selamat mencoba :blush:  ","categories": ["Aplikasi"],
        "tags": ["ToDo List"],
        "url": "http://coding4ever.net/blog/2013/01/10/todo-list/",
        "teaser": null
      },{
        "title": "Dapper .NET Micro-ORM Part 1",
        "excerpt":"Sudah lama saya ingin mengembangkan aplikasi menggunakan tool-tool ORM seperti ADO.NET Entity Framework, MyBatis, LINQ to SQL, NHibernate dan tool ORM lainnya.   Sempat sedikit serius untuk mempelajari NHibernate tapi… dengan alasan sok sibuk :grin: akhirnya stop ditengah jalan :frowning:.   Masih belum menyerah saya pun mencoba mencari alternatif lain penggunaan tool ORM dengan melakukan pencarian  menggunakan keyword “micro orm for .net” dari sekian banyak pilihan micro ORM yang ada pilihan saya jatuh ke Dapper .NET dengan pertimbangan micro ORM ini sudah digunakan oleh website besar seperti Stack Overflow, xpfest.com, helpdesk, worldcitycard, roadmap.     Dapper .NET sendiri dibuat oleh om Sam Saffron salah seorang developer berbakat yang ada di belakang Stack Overflow.   Sebelum menggunakan Dapper .NET kita lihat dulu bagaimana mengakses database menggunakan library ADO .NET secara langsung.   Contoh kasusnya sederhana kita akan menampilkan data Siswa dengan menggunakan bahasa pemrograman C# dan VB.NET sedangkan untuk databasenya menggunakan Ms Access.      using System.Data.OleDb;  namespace SiswaDapperNET1 {     class Program     {         static void Main(string[] args)         {             using (var conn = GetOpenConnection())             {                 var strSql = \"SELECT nis, nama FROM siswa\";                 using (var cmd = new OleDbCommand(strSql, conn))                 {                     using (var dtr = cmd.ExecuteReader())                     {                         Console.WriteLine(\"NIS\\tNAMA\");                         Console.WriteLine(\"===================================\");                         while (dtr.Read())                         {                             Console.WriteLine(dtr[\"nis\"] + \"\\t\" + dtr[\"nama\"].ToString().ToUpper());                         }                     }                 }             }              Console.ReadKey();         }     } }  atau jika Anda menggunakan VB.NET kodenya akan terlihat seperti berikut :   Sub Main()      Using conn As OleDbConnection = GetOpenConnection()          Dim strSql = \"SELECT nis, nama FROM siswa\"         Using cmd = New OleDbCommand(strSql, conn)             Using dtr As OleDbDataReader = cmd.ExecuteReader()                  Console.WriteLine (\"NIS\" &amp; vbTab &amp; \"NAMA\")                 Console.WriteLine (\"===================================\")                 While dtr.Read()                     Console.WriteLine (dtr(\"nis\") &amp; vbTab &amp; dtr(\"nama\"))                 End While              End Using         End Using     End Using  End Sub  Method Main di atas membutuhkan method GetOpenConnection yang digunakan untuk membuat koneksi ke database Ms Access.   private static OleDbConnection GetOpenConnection() {     OleDbConnection conn = null;      try     {          var appDir = System.IO.Directory.GetCurrentDirectory();         var strConn = \"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=\" + appDir + \"\\\\SISWA.MDB;User Id=admin;Password=;\";          conn = new OleDbConnection(strConn);         conn.Open();     }     catch (Exception)     {     }      return conn; }  dan untuk programmer VB.NET   Private Function GetOpenConnection() As OleDbConnection     Dim conn As OleDbConnection = Nothing      Dim appDir As String = System.IO.Directory.GetCurrentDirectory()     Dim strConn As String = \"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=\" + appDir + \"\\SISWA.MDB;User Id=admin;Password=;\"      Try          conn = New OleDbConnection(strConn)         conn.Open()      Catch ex As Exception      End Try      Return conn End Function  Selanjutnya kita akan memberikan sedikit sentuhan OOP terhadap kode di atas dengan melakukan mapping/pemetaan baris/row dari tabel menjadi objek.   Perhatikan ilustrasi berikut :      Mapping bisa dilakukan secara manual atau menggunakan tool ORM (Object Relational Mapping).   Untuk contoh di bawah ini kita melakukan mapping secara manual, tetapi sebelumnya kita harus membuat sebuah class terlebih dulu yang disebut dengan class entity/model.   Class ini merupakan representasi dari tabel-tabel yang ada di dalam sebuah database.   Berdasarkan tabel Siswa di atas, kita akan membuat sebuah class dengan nama Siswa, field/property dari class ini sama persis dengan field-field yang ada di tabel Siswa.   Untuk kode lengkapnya seperti berikut :   public class Siswa {     public string Nis { get; set; }     public string Nama { get; set; } }  Jika menggunakan VB.NET kodenya terlihat lebih banyak :grin:   Public Class Siswa      Private _nis As String     Public Property Nis() As String         Get             Return _nis         End Get         Set(ByVal value As String)             _nis = value         End Set     End Property      Private _nama As String     Public Property Nama() As String         Get             Return _nama         End Get         Set(ByVal value As String)             _nama = value         End Set     End Property  End Class  Kemudian kita juga akan menambahkan sebuah method baru dengan nama GetDataSiswa, method ini akan mengembalikan kumpulan (collection) dari data siswa.   private static List&lt;Siswa&gt; GetDataSiswa() {     var daftarSiswa = new List&lt;Siswa&gt;();      using (var conn = GetOpenConnection())     {         var strSql = \"SELECT nis, nama FROM siswa\";         using (var cmd = new OleDbCommand(strSql, conn))         {             using (var dtr = cmd.ExecuteReader())             {                 while (dtr.Read())                 {                     // proses mapping dari row ke object                     var siswa = new Siswa();                     siswa.Nis = dtr[\"nis\"] == null ? string.Empty : dtr.GetString(0);                     siswa.Nama = dtr[\"nama\"] == null ? string.Empty : dtr.GetString(1).ToUpper();                      daftarSiswa.Add(siswa);                 }             }         }     }      return daftarSiswa; }  sementara di VB.NET akan terlihat seperti berikut :   Private Function GetDataSiswa() As List(Of Siswa)      Dim daftarSiswa As New List(Of Siswa)      Using conn As OleDbConnection = GetOpenConnection()          Dim strSql = \"SELECT nis, nama FROM siswa\"         Using cmd = New OleDbCommand(strSql, conn)             Using dtr As OleDbDataReader = cmd.ExecuteReader()                  While dtr.Read()                     Dim siswa As New Siswa()                     With siswa                         .Nis = IIf(IsDBNull(dtr(\"nis\")), String.Empty, dtr(\"nis\").ToString())                         .Nama = IIf(IsDBNull(dtr(\"nama\")), String.Empty, dtr(\"nama\").ToString())                     End With                      daftarSiswa.Add (siswa)                 End While              End Using         End Using     End Using      Return daftarSiswa  End Function  Terakhir kita akan melakukan revisi terhadap method Main diatas.   static void Main(string[] args) {     /*     using (var conn = GetOpenConnection())     {         var strSql = \"SELECT nis, nama FROM siswa\";         using (var cmd = new OleDbCommand(strSql, conn))         {             using (var dtr = cmd.ExecuteReader())             {                 Console.WriteLine(\"NIS\\tNAMA\");                 Console.WriteLine(\"===================================\");                 while (dtr.Read())                 {                     Console.WriteLine(dtr[\"nis\"] + \"\\t\" + dtr[\"nama\"].ToString().ToUpper());                 }             }         }     }     */      Console.WriteLine(\"NIS\\tNAMA\");     Console.WriteLine(\"===================================\");      var daftarSiswa = GetDataSiswa();     foreach (var siswa in daftarSiswa)     {         Console.WriteLine(siswa.Nis + \"\\t\" + siswa.Nama);     }      Console.ReadKey(); }  sekali lagi di VB.NET :   Sub Main()      'Using conn As OleDbConnection = GetOpenConnection()      '    Dim strSql = \"SELECT nis, nama FROM siswa\"     '    Using cmd = New OleDbCommand(strSql, conn)     '        Using dtr As OleDbDataReader = cmd.ExecuteReader()      '            Console.WriteLine(\"NIS\" &amp; vbTab &amp; \"NAMA\")     '            Console.WriteLine(\"===================================\")     '            While dtr.Read()     '                Console.WriteLine(dtr(\"nis\") &amp; vbTab &amp; dtr(\"nama\"))     '            End While      '        End Using     '    End Using     'End Using      Console.WriteLine (\"NIS\" &amp; vbTab &amp; \"NAMA\")     Console.WriteLine (\"===================================\")      Dim daftarSiswa = GetDataSiswa()      For Each siswa In daftarSiswa         Console.WriteLine (siswa.Nis &amp; vbTab &amp; siswa.Nama)     Next      Console.ReadKey()  End Sub  Jika program di atas dijalankan akan menghasilkan output seperti berikut :      Untuk penggunaan micro ORM Dapper .NET, insyaAllah akan kita mulai pembahasannya pada postingan berikutnya :grin:.   Selamat MENCOBA :blush:  ","categories": ["Dapper .NET","ORM","Visual Basic .NET","Visual C#"],
        "tags": ["c#","Database","micro orm","ms access"],
        "url": "http://coding4ever.net/blog/2013/02/07/dapper-net-micro-orm-part-1/",
        "teaser": null
      },{
        "title": "Dapper .NET Micro-ORM Part 2",
        "excerpt":"Melanjutkan pembahasan Dapper .NET, kali ini saya akan mendemokan bagaimana mudahnya melakukan proses mapping record ke object dengan memanfaatkan library Dapper .NET.   Masih menggunakan kasus yang sama dengan postingan sebelumnya, kita sudah mempunyai tabel siswa berikut class entitynya, biar lebih mudah saya copas aja ke sini.        public class Siswa {     public string Nis { get; set; }     public string Nama { get; set; } }  dan untuk VB.NET coder kodenya terlihat lebih banyak :grin:   Public Class Siswa      Private _nis As String     Public Property Nis() As String         Get             Return _nis         End Get         Set(ByVal value As String)             _nis = value         End Set     End Property      Private _nama As String     Public Property Nama() As String         Get             Return _nama         End Get         Set(ByVal value As String)             _nama = value         End Set     End Property  End Class  Sebelum kita beraksi jangan lupa untuk mendownload terlebih dulu library Dapper .NET disini (dotNetFx35) dan disini (dotNetFx40). Jadi silahkan download sesuai dengan versi dot NET Framework Anda.   Langkah berikutnya adalah mengaktifkan kembali project yang sudah kita bahas pada postingan sebelumnya.      Kemudian tambahkan referensi library Dapper .NET, dengan cara :           Klik kanan node References                   Kemudian tentukan lokasi library Dapper .NET yang sudah Anda download              Jika berhasil akan ketambahan sub node baru (Dapper) di bawah node References              Cara kerja Dapper .NET adalah dengan mengextend interface IDbConnection yang digunakan oleh class-class connection seperti SqlConnection dan OleDbConnection.   Klo masih bingung perhatikan gambar berikut :      sekarang coba tambahkan namespace Dapper;   using Dapper;  di VB.NET kita menggunakan keyword Imports   Imports Dapper  maka secara otomatis objek conn akan mempunyai tambahan beberapa method baru seperti Execute, Query dan QueryMultiple.      Nah method-method itulah yang kita gunakan untuk menjalankan perintah-perintah SQL seperti INSERT, UPDATE, DELETE dan SELECT. Klo istilah krennya sih operasi CRUD.   Oke untuk contoh postingan kali ini kita akan mencoba menjalankan perintah SELECT dengan memanggil method Query di atas.      berikut kode VB.NET yg melakukan hal yang sama      pada kode di atas kita bisa melihat tanpa melakukan proses mapping sedikit pun, objek daftarSiswa akan terisi dengan kumpulan (collection) dari objek siswa, hanya dengan perintah sederhana berikut:   daftarSiswa = conn.Query(strSql, null).ToList();  kode yang sama untuk VB.NET   daftarSiswa = conn.Query(Of Siswa)(strSql, Nothing).ToList()  Tapi ada syaratnya yaitu nama-nama field yang ada di dalam tabel harus sama dengan nama-nama property yang ada di dalam class entity.      Trus bagaimana klo nama field dan propertynya berbeda ? Solusinya ya dengan menggunakan ALIAS pada saat melakukan proses query.   Lihat contoh berikut :         atau jika Anda menggunakan VB.NET kodenya akan terlihat seperti berikut :      Setelah itu tinggal ditampilkan hasilnya :   foreach (var siswa in daftarSiswa) {     Console.WriteLine(siswa.Nis + \"\\t\" + siswa.Nama); }  sekali lagi di VB.NET   For Each siswa In daftarSiswa     Console.WriteLine (siswa.Nis &amp; vbTab &amp; siswa.Nama) Next     Yuph saya rasa cukup untuk postingan kali ini, dan pada postingan berikutnya insyaAllah kita akan membahas bagaimana menjalankan perintah-perintah SQL lainnya seperti INSERT, UPDATE dan DELETE menggunakan library Dapper .NET.   Selamat MENCOBA :blush:  ","categories": ["Dapper .NET","ORM","Visual Basic .NET","Visual C#"],
        "tags": [],
        "url": "http://coding4ever.net/blog/2013/02/22/dapper-net-micro-orm-part-2/",
        "teaser": null
      },{
        "title": "Dapper .NET Micro-ORM Part 3",
        "excerpt":"Pada postingan sebelumnya, kita sudah mencoba mengimplementasikan salah satu perintah SQL yaitu SELECT dengan menggunakan library Dapper .NET.   Dan pada postingan kali ini kita akan mencoba mengimplementasikan perintah-perintah SQL lainnya seperti INSERT, UPDATE dan DELETE.   Langsung saja aktifkan kembali project postingan sebelumnya.        1. INSERT   Untuk menambahkan data terlebih dulu kita membuat sebuah objek, misal objek siswa.   // membuat object siswa var siswa = new Siswa(); siswa.Nis = \"9991\"; siswa.Nama = \"Bagus\";  Sejak .NET Framework 3.x ditambahkan fitur baru yg disebut dengan object initializer yang memungkinkan pengesetan nilai property pada saat pembuatan objek.   var siswa = new Siswa {     Nis = \"9991\", Nama = \"Bagus\" };  Gimana jadi lebih simple bukan ? :)   Setelah objek siswa dibuat, kita langsung memanggil method Execute dari object conn untuk melakukan penyimpanan.   Berikut kode lengkapnya :   var siswa = new Siswa {     Nis = \"9991\", Nama = \"Bagus\" };  using (var conn = GetOpenConnection()) {     strSql = \"INSERT INTO siswa (nis, nama) VALUES (@Nis, @Nama)\";     result = conn.Execute(strSql, siswa); }  Parameter @Nis dan @Nama harus sama dengan property class, jika tidak sama kita bisa menggunakan cara yang kedua. Misal untuk nama parameternya kita set @NomorInduk dan @NamaSiswa.   var siswa = new Siswa {     Nis = \"9991\", Nama = \"Bagus\" };  using (var conn = GetOpenConnection()) {     strSql = \"INSERT INTO siswa (nis, nama) VALUES (@NomorInduk, @NamaSiswa)\";     result = conn.Execute(strSql, new { NomorInduk = siswa.Nis, NamaSiswa = siswa.Nama }); }  2. UPDATE   var siswa = new Siswa {     Nis = \"9991\",     Nama = \"Bagus Wicaksono\" };  using (var conn = GetOpenConnection()) {     strSql = \"UPDATE siswa SET nama = @Nama WHERE nis = @Nis\";     result = conn.Execute(strSql, siswa); }  dan terakhir …   3. DELETE   var siswa = new Siswa {     Nis = \"9991\" };  using (var conn = GetOpenConnection()) {     strSql = \"DELETE FROM siswa WHERE nis = @Nis\";     result = conn.Execute(strSql, siswa); }  Selamat MENCOBA :blush:  ","categories": ["Dapper .NET","ORM","Visual C#"],
        "tags": [],
        "url": "http://coding4ever.net/blog/2013/03/29/dapper-net-micro-orm-part-3/",
        "teaser": null
      },{
        "title": "Menembus pertahanan database Firebird yang diproteksi bagian 2",
        "excerpt":"Postingan saya kali ini merupakan jawaban untuk om guys yang sudah berhasil Menembus pertahanan database Firebird yang diproteksi tetapi masih ada sedikit masalah yang perlu diselesaikan.   Biar lebih lengkap saya tulis ulang saja pertanyaannya.      thx beart om admin buat tutor singkatnya, sangat bermanfaat. ada sedikit masalah, setelah kita “bongkar” db zahir-nya ternyata ga bisa di pake lagi di aplikasi Zahirnya ya. Harus kita balikin lagi setting FB-nya ke default/original (khususnya user ZAHIRDBA). ada work-around-nya untuk masalah ini om admin?      Jadi langkah-langkah berikut ini akan menghapus role “SYSDBA” sehingga kita bisa login lagi menggunakan user default Firebird yaitu SYSDBA.   Berikut langkah-langkahnya :   1. Sudah berhasil menembus pertahanan database Firebird yang diproteksi 2. Login menggunakan user ZAHIRDBA      3. Hapus role SYSDBA menggunakan perintah   DELETE FROM rdb$roles WHERE rdb$role_name = 'SYSDBA' AND rdb$owner_name = 'ZAHIRDBA'     sampai tahap ini kita sudah bisa menggunakan user sysdba lagi   4. Login ulang menggunakan user SYSDBA      5. Hapus user ZAHIRDBA dari menu Tools -&gt; User Manager      6. Selesai :)      Selamat mencoba :blush:  ","categories": ["Firebird"],
        "tags": ["firebird","SYSDBA","zahir","zahirdba"],
        "url": "http://coding4ever.net/blog/2013/06/25/menembus-pertahanan-database-firebird-yang-diproteksi-bagian-2/",
        "teaser": null
      },{
        "title": "Q & A",
        "excerpt":"Alhamdulillah …   Engga terasa komen di blog ini sudah lebih dari 7000 :blush:   Jadi saya mohon maaf jika ada pertanyaan yang terlewatkan baik karena memang lagi males ngecek komentar :grin: atau karena terbatasnya ilmu.     ","categories": ["Uncategorized"],
        "tags": [],
        "url": "http://coding4ever.net/blog/2014/03/10/q-a/",
        "teaser": null
      },{
        "title": "Repository Coding4ever",
        "excerpt":"Untuk mempermudah mengakses source code coding4ever, beberapa source code terbaru sudah saya push ke repository GitHub, dan sisanya menyusul :grin:      Link repository : https://github.com/k4m4r82  ","categories": ["Uncategorized"],
        "tags": ["Repository","Github"],
        "url": "http://coding4ever.net/blog/2014/03/10/repository-coding4ever/",
        "teaser": null
      },{
        "title": "NuGet",
        "excerpt":"NuGet adalah …   NuGet is the package manager for the Microsoft development platform including .NET. The NuGet client tools provide the ability to produce and consume packages. The NuGet Gallery is the central package repository used by all package authors and consumers.   Jadi dengan memanfaatkan NuGet package manager, kita bisa dengan mudah menginstall library-library tambahan dari pihak ketiga (3rd party libraries), seperti Dapper .NET, Entity Framework, Json .NET, Firebird ADO.NET Data provider dan lainnya.     Sayangnya NuGet hanya support untuk Visual Studio 2010, 2012 dan tentunya Visual Studio dengan versi terbaru.   Cara Instalasi   Ada beberapa cara untuk menginstall NuGet, salah satunya adalah dengan menggunakan Visual Studio Extension Manager.   Berikut langkah-langkahnya :      Aktifkan Visual Studio .NET, untuk contoh disini saya menggunakan Visual Studio 2010        Klik menu Tools -&gt; Extension Manager. Aktifkan pilihan Online Gallery, cari NuGet Package Manager kemudian klik tombol Download.              Tunggu sampai proses download selesai.                   Kemudian akan nampil dialog Installer, klik tombol Install                   Setelah proses instalasi selesai restart Visual Studio Anda.              Dan NuGet package manager siap digunakan :)       Cara Penggunaan   Cara penggunaan NuGet package manager sangat mudah, sebagai contoh kita akan menambahkan library Dapper .NET.           Buat project baru, misal dengan tipe Console Application                   Klik kanan References -&gt; Manage NuGet Packages                   Pada kota pencarian ketik Dapper, kemudian klik tombol Install              kemudian tunggu sampai proses instalasi selesai.              Tutup dialog NuGet package        Kemudian cek node references, seharusnya library Dapper .NET sudah terinstall.              Selamat mencoba :blush:  ","categories": ["NuGet"],
        "tags": [],
        "url": "http://coding4ever.net/blog/2014/03/11/nuget/",
        "teaser": null
      },{
        "title": "Menginstall Server NuGet Lokal",
        "excerpt":"Pada postingan sebelumnya kita sudah membahas apa itu NuGet, cara instalasi berikut contoh penggunaannya.   Sesuai judul postingan kali ini, kita akan menginstall sendiri server NuGet untuk keperluan internal.   Ada beberapa alasan kenapa harus menginstall server NuGet sendiri :     1. Untuk menghemat bandwidth internet   Contoh beberapa library yang sering saya gunakan untuk pembuatan aplikasi (sesuai kebutuhan) :      ClosedXML, ClosedXML makes it easier for developers to create Excel 2007/2010 files. It provides a nice object oriented way to manipulate the files (similar to VBA) without dealing with the hassles of XML Docume   Dapper, A high performance Micro-ORM   DockPanelSuite, The docking library for .Net Windows Forms development which mimics Visual Studio .Net.   EntityFramework, Entity Framework is Microsoft’s recommended data access technology for new applications.   FirebirdSql.Data.FirebirdClient   FirebirdSql.Data.FirebirdClient-EF6   GSMComm, SMS libraries for GSM phones   Json .NET, Json.NET is a popular high-performance JSON framework for .NET   RestSharp, Simple REST and HTTP API Client   Lumayan banyak bukan ? Jika setiap ingin menambahkan library di atas kita harus mendownload dari NuGet Gallery tentu sedikit banyaknya akan menghabiskan bandwith internet, belum lagi kalo koneksi internetnya mati.   2. Sebagai media sharing library   Misal kita ingin membuat library yang akan digunakan oleh beberapa programmer, kemudian seiring dengan waktu tentunya library ini akan ada perbaikan atau penambahan fitur-fitur terbaru.   Jika setiap ada perubahan tentunya kurang efektif jika library tersebut dicopy via flash disk, share folder atau media lainnya, belum lagi harus menghapus library versi yang lama, mendaftarkan library yang terbaru, tentunya ini pekerjaan yang membosankan, sehingga server NuGet lokal bisa menjadi salah satu alternatif terbaik untuk mempermudah sharing library.   Dengan dua alasan di atas saya rasa sudah cukup untuk memotivasi kita untuk membuat server NuGet sendiri.   Oke langsung saja, sudah cukup untuk intronya, untuk langkah-langkah berikut, saya menggunakan Windows 7.   1. Menginstall IIS (Internet Information Services)   Langkah-langkahnya bisa dicek disini.   2. Membuat Project ASP .NET   Berikut langkah-langkahnya :      Aktifkan Visual Studio .NET, untuk contoh di sini saya menggunakan Visual Studio 2010        Buat project baru dengan tipe ASP.NET Empty Web Application              Tambahkan paket NuGet.Server dengan cara klik kanan References -&gt; Manage NuGet Packages      ketik Nuget.server, kemudian klik tombol Install      tunggu sampai proses download selesai         Pilih I Accept, kemudian tunggu sampai proses instalasi selesai         Setelah berhasil menambahkan paket NuGet.Server, langkah berikutnya adalah menentukan lokasi paket NuGet, dengan cara mengedit file Web.Config      kemudian edit nilai dari packagesPath, misal : D:\\ServerNuGetLocal\\Packages         Setelah menentukan lokasi paket NuGet, langkah berikutnya adalah mempublish (deploy) project ASP.NET yang baru kita buat, dengan cara klik kanan project -&gt; Publish…            3. Mendaftarkan Project ASP .NET ke IIS   Project ASP.NET yang sudah kita buat sebelumnya membutuhkan web server IIS untuk bisa dijalankan, sehingga langkah berikutnya adalah mendaftarkannya ke IIS.   Adapun langkah-langkahnya seperti berikut :      Aktifkan IIS (Internet Information Services)        Klik kanan node Default Web Site -&gt; Add Application              Tentukan nilai Alias, Application pool dan Physical path, khusus untuk nilai physical path mengacu pada langkah-langkah sebelumnya.                          Setelah berhasil menambahkan node NuGet ke IIS, coba ketik url : http://localhost/NuGet/ di browser Anda              Jika tampil seperti gambar di atas, berarti proses registrasi server NuGet lokal berhasil, dan jika ingin melihat paket apa saja yang sudah tersedia klik link here.                     Terlihat pada gambar di atas paket di server NuGet lokal kita masih kosong.       4. Mendownload paket yang sering digunakan   Untuk mendownload paket NuGet yang sudah tersedia di NuGet Gallery, gunakan url dengan format : https://www.nuget.org/api/v2/package/{packageID}/{packageVersion}, contoh :      https://www.nuget.org/api/v2/package/ClosedXML/0.69.2   https://www.nuget.org/api/v2/package/Dapper/1.13.0   https://www.nuget.org/api/v2/package/DockPanelSuite/2.9.0   https://www.nuget.org/api/v2/package/EntityFramework/6.0.2   https://www.nuget.org/api/v2/package/FirebirdSql.Data.FirebirdClient/4.0.0 https://www.nuget.org/api/v2/package/FirebirdSql.Data.FirebirdClient-EF6/4.0.0 (support Entity Framework)   https://www.nuget.org/api/v2/package/GSMComm/1.21.0   https://www.nuget.org/api/v2/package/Newtonsoft.Json/5.0.8   https://www.nuget.org/api/v2/package/RestSharp/104.4.0   Jangan lupa hasil downloadnya disimpan di folder package.      Setelah itu kita cek lagi paket di server NuGet lokal.      Sippp, paket di server NuGet lokal kita sudah tersedia :)   5. Menambahkan url server NuGet lokal ke package sources   Saatnya mendaftarkan server NuGet kita ke Visual Studio, langkah-langkahnya seperti berikut :      Jalankan Visual Studio .NET (saya menggunakan versi 2010)   Klik menu Tools -&gt; NuGet Package Manager -&gt; Package Manager Settings        Aktifkan node Package Source, klik tombol Add/Tambah              Isikan Name dan Source, klik Update akhiri dengan Ok.      Terakhir coba aktifkan dialog NuGet Package Manager, kemudian cek pilihan “Server Nuget Local”.      Selamat mencoba :blush:  ","categories": ["NuGet"],
        "tags": ["IIS","NuGet","Visual Studio .NET"],
        "url": "http://coding4ever.net/blog/2014/03/12/menginstall-server-nuget-lokal/",
        "teaser": null
      },{
        "title": "Membuat Paket NuGet",
        "excerpt":"Sedikit lagi tentang NuGet, pada postingan sebelumnya kita sudah berhasil menginstall server NuGet lokal baik untuk keperluan pribadi atau internal kantor.   Ada beberapa alasan kenapa kita sebaiknya mempunyai server NuGet sendiri, dua diantaranya :      Untuk menghemat bandwidth internet   Sebagai media sharing library     Nah pada postingan kali saya akan memberikan contoh untuk alasan nomor 2.   Misalkan kita bekerja di dalam sebuah tim, kemudian kita ditugaskan untuk membuat sebuah library dengan nama CalculatorLib, yang mana library ini akan digunakan oleh beberapa orang programmer.   Untuk versi awal (1.0.0) hanya mempunyai dua buah method yaitu :      Penjumlahan   Pengurangan      Setelah selesai kita pun segera merilisnya agar bisa digunakan.      Ada beberapa media yang bisa kita gunakan untuk mendistribusikannya :      Flash disk   Share folder   Server NuGet Lokal   Media lainnya   Terserah Anda mau menggunakan cara yang mana, kalo saya untuk saat ini jelas memilih media yang nomor 3.   Membuat paket NuGet   Agar library yang baru kita buat (CalculatorLib.dll), bisa dibaca oleh server NuGet, tentunya tidak bisa langsung dicopy ke folder package NuGet Server tetapi ada tahapan yang harus kita kerjakan.      Download NuGet.exe   Membuat skrip XML kemudian simpan dengan ekstensi .nuspec, jangan lupa untuk menyimpannya di folder yang sama dengan file NuGet.exe   Meng-compile skrip .nuspec untuk menghasilkan file .nupkg, nah file .nupkg ini lah yang akan kita copykan ke folder package NuGet Server   Contoh isi file .nuspec      Untuk informasi lebih lengkap tentang file nuspec bisa langsung meluncur kesini.   Untuk meng-compile skrip .nuspec gunakan perintah berikut :   NuGet pack \"nama_file_nuspec.nuspec\" -o \"folder_output\"  Contoh :   NuGet pack \"CalculatorLib.nuspec\" -o \"D:\\ServerNuGetLocal\\Packages\"  Jika berhasil akan dibuatkan file baru dengan nama CalculatorLib.1.0.0.nupkg.      Sampai tahap ini kita sudah berhasil membuat file paket NuGet.   Jika kita mempunyai banyak file .nuspec, dan untuk mempermudah meng-compile skrip .nuspec, kita bisa memanfaatkan registry windows untuk menambahkan context menu “Build NuGet Package” setiap mengklik kanan file dengan ekstensi .nuspec.   Windows Registry Editor Version 5.00  [HKEY_CLASSES_ROOT\\.nuspec]  [HKEY_CLASSES_ROOT\\.nuspec\\Shell]  [HKEY_CLASSES_ROOT\\.nuspec\\Shell\\BuildNuGet] @=\"Build NuGet Package\"  [HKEY_CLASSES_ROOT\\.nuspec\\Shell\\BuildNuGet\\Command] @=\"E:\\\\Master\\\\Developer Tools\\\\nuget package\\\\build\\\\NuGet.exe pack \\\"%1\\\" -o \\\"E:\\\\Master\\\\Developer Tools\\\\nuget package\\\\build\\\\package\\\"\"  Pada skrip di atas tinggal sesuaikan lokasi file NuGet.exe dan folder target.      Mengakses paket CalculatorLib dari NuGet Package Manager   Untuk mendemokan ini, saya akan membuat project baru dengan nama CalculatorApp, kemudian menambahkan library CalculatorLib via NuGet Package Manager.      pada dialog NuGet Package Manager pilih paket CalculatorLib kemudian Install.      jika berhasil pada node References sudah ditambahkan library CalculatorLib.      Sekarang kita coba untuk membuat objek dari class Calculator.      Sipp method yang nampil sesuai dengan yang sudah kita definisikan di dalam library CalculatorLib versi awal (1.0.0)   CalculatorLib Versi 1.1.0   Library CalculatorLib yang sudah kita buat (versi 1.0.0), baru mempunyai dua method yaitu : Penjumlahan dan Pengurangan.   Kita akan menambahkan dua method lagi yaitu Perkalian dan Pembagian.      Sebelum merilis ulang (build) library ini, naikkan dulu nilai versinya menjadi 1.1.0      kemudian edit juga file nuspecnya, dengan mengganti nilai versionnya menjadi 1.1.0      Compile ulang skrip .nuspec gunakan perintah berikut :   NuGet pack \"CalculatorLib.nuspec\" -o \"D:\\ServerNuGetLocal\\Packages\"  jika berhasil kita akan mempunyai file paket CalculatorLib terbaru dengan versi 1.1.0      Sekarang kita aktifkan lagi project CalculatorAppnya, kemudian cek NuGet Package Manager, apakah sudah ada updatean untuk paket CalculatorLibnya.      Yuph ternyata sudah ada, langsung saja di update kemudian kita cek lagi source code CalculatorApp, apa sudah ada tambahan dua method lagi ?      Selamat mencoba :blush:  ","categories": ["NuGet"],
        "tags": ["context menu","nuget.exe","nupkg","nuspec","windows registry"],
        "url": "http://coding4ever.net/blog/2014/03/13/membuat-paket-nuget/",
        "teaser": null
      },{
        "title": "Entity Framework Part 1",
        "excerpt":"Intro ORM   Sebelum kita membahas apa itu Entity Framework, kita akan singgung sedikit mengenai ORM (Object Relational Mapping).   ORM  adalah  framework  yang  memetakan  tabel  pada  database  relasional ke objek  dengan menggunakan  informasi  pada metadata.  Metadata  dapat  berupa  file  XML  atau custom atribute pada  entity class.   Saat ini sudah banyak pilihan ORM yang dapat meningkatkan  produktivitas kita sebagai seorang developer. Ketika kita membangun sebuah aplikasi database  dengan menggunakan OOP,  maka harus  dibuatkan  sebuah  persisten  objek  yang memodelkan objek dari database seperti tabel,  view , relationship dan objek database lainnya.     Persisten  objek (Object Persistence)   Hampir semua aplikasi membutuhkan persistensi data.  Jika tidak, ketika aliran listrik dimatikan maka data tersebut akan hilang.   Ketika akan menyimpan data secara permanen, database relasional adalah pilihan terbaik, sedangkan ketika harus bekerja dengan data yang ada di memori, objek adalah cara yang terbaik.   Fitur seperti pewarisan, enkapsulasi dan fitur OOP lainnya memungkinkan penulisan kode yang lebih baik dan menyederhankan pengembangan aplikasi.   Ketika  memodelkan  persisten  objek,  makin besar aplikasi yang  kita buat, maka makin rumit pemodelan yang dilakukan. Pemodelan dengan “tangan  kosong”  bukanlah  ide  yang  baik. Selain  banyak  waktu  yang  terbuang  karena  banyak perkerjaan yang di lakukan berulang-ulang, bisa jadi banyak kesalahan yang tidak bisa dihindari.   Salah satu solusi yang digunakan untuk mengatasi pemodelan dengan “tangan  kosong”  ini adalah dengan menggunakan ORM.   ORM mempunyai kemampuan untuk mengenerate secara otomatis persisten  objek berdasarkan schema dari database, konfigurasi file  XML  atau  custom atribute pada  entity class.   Pendekatan ORM  bisa jadi lebih efektif dan produktif, tetapi tetap saja ada kekurangannya yaitu eksekusi  program  cenderung lebih  lambat  daripada  tanpa  menggunakan  ORM. Hal ini disebabkan adanya  proses  mapping  terlebih dahulu  terhadap  tabel di  database. Proses  ini mengubah  ”record/tupel” menjadi  objek  atau  objek  collection. Namun  dengan perkembangan kecepatan processor dan kapasitas memory saat ini kekurangan ini dapat diatasi.   Berikut beberapa alasan mengapa menggunakan ORM :      Productivity : Mempermudah penulisan kode pengaksesan data (DAO/Access Object)   Maintainability  :  Kode  lebih  mudah  di  maintenance,  karena  tidak  perlu  lagi  menulis perintah SQL bersama-sama dengan kode utama, bahkan tidak perlu menuliskan SQL sekali.   Performance : Kode lebih efesien sehingga bisa dioptimasi lebih lanjut   Vendor Independence  :  Tidak tergantung penyedia DBMS. Jika terjadi perubahan data cukup diubah konfigurasi koneksi saja   Mengatasi  Paradigm  “impedance mismatch”  :  Penyimpanan  data  dalam  RDBMS  dan  objek  sama  sekali berbeda. ORM menjadi layer perantara RDBMS dengan pemrograman berbasis objek.   Entity Framework   Entity Framework adalah salah satu ORM yang dibuat dan direkomendasikan Microsoft dalam pengembangan aplikasi.   Kita akan membahas lebih lanjut tentang Entity Framework pada postingan berikutnya, insyaAlloh :blush:   Dan sebagai penutup postingan kali ini, saya akan menampilkan cuplikan source code untuk mengakses database baik menggunakan library ADO.NET secara langsung dan menggunakan ORM Entity Framework.   Untuk database saya menggunakan SQL Server Express 2008 R2.      1. Menggunakan library ADO.NET secara langsung   var strConn = @\"Data Source=.\\sqlexpress2008;Initial Catalog=Retail;Integrated Security=True\";  using (var conn = new SqlConnection(strConn)) {     conn.Open();      var sql = @\"SELECT NamaSupplier, Jalan                 FROM Supplier\";      using (var cmd = new SqlCommand(sql, conn))     {         using (var dtr = cmd.ExecuteReader())         {             var noUrut = 1;              while (dtr.Read())             {                 Console.WriteLine(\"{0}. {1}, {2}\", noUrut, dtr[\"NamaSupplier\"], dtr.GetString(1));                  noUrut++;             }         }     } }  Penulisan kode seperti di atas, dengan menggunakan objek DataReader untuk menampung hasil SELECT, mirip dengan programmer VB classic yang menggunakan objek Recordset untuk menampung data, di mana kita masih berhubungan dengan baris dan kolom.   Makanya ketika kita ingin menampilkan nama supplier kita harus menyebutkan fieldnya yaitu “NamaSupplier” atau dengan menyebutkan indexnya.   Penulisan nama field “NamaSupplier”, masih berbasis teks sehingga IDE Visual Studio yang canggih pun tidak bisa berbuat banyak untuk membantu kita mengingat nama field apa saja yang tersedia untuk tabel Supplier berikut tipe datanya.   2. Menggunakan ORM Entity Framework   using (var db = new RetailContext()) {     var noUrut = 1;      var daftarSupplier = db.Suppliers.ToList();     foreach (var supplier in daftarSupplier)     {         Console.WriteLine(\"{0}. {1}, {2}\", noUrut, supplier.NamaSupplier, supplier.Jalan);          noUrut++;     } }  Pendekatan yang kedua ini kita sudah tidak lagi berhubungan dengan baris dan kolom tetapi langsung berhubungan dengan objek dari masing-masing class entity/model. Sehingga ketika kita menuliskan objek supplier kemudian diikuti dengan karakter titik (.), IDE Visual Studio bisa membantu kita dengan fasilitas IntelliSensenya untuk menampilkan daftar property apa saja yang tersedia.      Sehingga aktivitas mengingat nama field berikut tipe datanya sudah tidak ada lagi disini :grin: , bahkan kita tidak perlu menuliskan secara manual perintah SQL yang digunakan untuk menampilkan data Supplier, semuanya semua pekerjaan ini sudah diambil alih oleh Entity Framework.   Dari sisi kecepatan, jelas menggunakan library ADO.NET secara langsung adalah pemenangnya, tetapi dari sisi kemudahan penulisan kode dan pengembangan aplikasi, Anda dan Saya pasti sepakat bahwa menggunakan ORM adalah pemenangnya :blush:   Selamat MENCOBA :blush:   Referensi :      Programming Entity Framework, 2nd Edition   Programming Entity Framework: Code First   Programming Entity Framework: DbContext   Entity Framework 4 in Action   NET Enterprise Application Programming  ","categories": ["Entity Framework","ORM","Visual C#"],
        "tags": ["Entity Framework","ORM","sql server"],
        "url": "http://coding4ever.net/blog/2014/03/18/entity-framework-part-1/",
        "teaser": null
      },{
        "title": "Entity Framework Part 2",
        "excerpt":"Melanjutkan postingan sebelumnya, saya sudah mendemokan begitu mudahnya mengakses data di dalam sebuah database menggunakan Entity Framework.   Entity Framework bertugas mengambil alih semua pekerjaan yang biasa kita lakukan dalam pembuatan aplikasi database, seperti mengambil data (SELECT), menambah data (INSERT), mengupdate data (UPDATE) dan menghapus data (DELETE).   Sehingga dengan menggunakan Entity Framework kita sudah tidak lagi berhubungan secara langsung dengan perintah SQL, dan sebagai gantinya kita menggunakan LINQ.     Ketika bekerja dengan Entity Framework ada beberapa pendekatan yang bisa kita lakukan sesuai dengan kebiasaan kita dalam mengembangkan aplikasi.      Karena saya lebih senang membuat database terlebih dulu, baru dilanjutkan dengan menulis kode, makanya pendekatan yang saya pilih adalah “Code first (existing database)” yaitu membuat class-class entity (model) berdasarkan database yang sudah ada.   Untuk informasi lebih lengkap tentang pendekatan yang bisa kita lakukan ketika bekerja dengan Entity Framework bisa langsung dicek di sini :grin:   Fokus pada postingan kali ini adalah melakukan mapping (pemetaan) antara tabel yang ada di database dengan class entity. Class entity adalah class yang merupakan representatif dari tabel-tabel yang ada di dalam database. Jadi kalo kita mempunyai tabel Supplier, berarti kita juga harus membuat class dengan nama yang sama dengan nama tabelnya.      Struktur Tabel Supplier      Class Entity Supplier   Mapping (pemetaan) merupakan inti dari ORM seperti Entity Framework. Mapping bisa dilakukan secara manual seperti yang akan kita bahas pada postingan kali ini, maupun secara otomatis menggunakan tools pembantu seperti ADO.NET Entity Data Model Designer dan Entity Framework Power Tools.   Sebagai contoh kita melakukan mapping antara tabel supplier dan class entity supplier seperti gambar di atas. Adapun langkah-langkah seperti berikut :   1. Buat project baru dengan tipe Console Application 2. Tambahkan class baru dengan nama Supplier      kemudian lengkapi kodenya seperti berikut :   public class Supplier {     public int SupplierID { get; set; }     public string NamaSupplier { get; set; }     public string Jalan { get; set; }     public string Kota { get; set; } }  Class Supplier di atas merupakan representatif dari tabel Supplier yang ada di dalam database. Setiap objek dari class Supplier akan mewakili satu baris/record tabel Supplier dan setiap field akan dipetakan ke masing-masing property objeknya.      3. Menambahkan referensi Entity Framework via NuGet, caranya dengan klik kanan node References kemudian pilih Manage NuGet Packages.      selanjutnya akan tampil dialog Manage NuGet Packages kemudian pilih EntityFramework dan klik Install.      4. Pilih “I Accept” ketika ada konfirmasi, setelah itu tunggu beberapa detik sampai paket EntityFramework selesai diinstall. Kemudian cek seharusnya library EntityFramework sudah ditambahkan di bagian node References.      selain itu ada tambahan file baru yaitu “packages.config” yang berisi informasi paket apa saja yang sudah ditambahkan via NuGet.      Konfigurasi Pemetaan (mapping)   Ada dua pilihan ketika kita ingin melakukan mapping :      Data Annotations   Code First’s Fluent API   Data Annotations   Data Annotations adalah atribut yang kita tambahkan secara langsung dibagian class atau properties. Untuk menggunakan Data Annotations kita harus menambahkan namespace System.ComponentModel.DataAnnotations. Contoh :      Atribut Tabel hanya ditambahkan jika nama tabel dan class berbeda, begitu juga untuk atribut Column hanya ditambahkan jika nama field berbeda dengan nama property.   Code First’s Fluent API   Jika ingin class entity kita tetap bersih dari atribut-atribut di atas, kita bisa menggunakan Code First’s Fluent API untuk konfigurasi mappingnya.         Jadi terserah Anda ingin menggunakan cara yang mana untuk konfigurasi mappingnya.   DbContext   Setelah proses mapping selesai, langkah berikutnya adalah menambahkan sebuah class dengan nama RetailContext, class ini harus turunan dari DbContext.      Penamaan class RetailContext, disesuaikan dengan nama project yang kita buat. Jika nama project kita adalah SmartLibrary (aplikasi perpustakaan), mungkin penamaan class SmartLibraryContext bisa menjadi pertimbangan untuk nama class Contextnya.   DbContext adalah class yang bertanggung jawab untuk berinteraksi dengan data (yang diambil dari database) yang sudah dirubah bentuknya menjadi objek atau sebaliknya dari objek kemudian dirubah lagi menjadi data yang bisa disimpan ke dalam database.   Berikut adalah kode lengkap untuk class RetailContext di atas :      Dibagian constructor ada perintah base(“Name=RetailContext”), penulisan keyword base disini adalah untuk memanggil constructor class induk dari class RetailContext yaitu DbContext. Kemudian “Name=RetailContext”, RetailContext disini adalah nama dari koneksi yang kita set nilainya via file App.config.         Berikutnya tujuan dari deklarasi property Suppliers dengan tipe DbSet adalah agar class RetailContext bisa mengakses dan memodifikasi objek Supplier.   Percaya atau tidak dengan sedikit konfigurasi di atas, tanpa melibatkan perintah SQL seperti SELECT, kita bisa langsung mengakses data Supplier yang sudah berubah bentuk menjadi objek.      Oke langsung saja kita buktikan dengan membuka file Program.cs kemudian kita lengkapi method Mainnya dengan kode berikut :      Langkah pertama yang kita lakukan adalah membuat objek dari RetailContext dengan nama db. Karena RetailContext mengimplementasikan interface IDisposable, kita bisa menggunakan keyword using agar objek db langsung dihapus dari memory setelah blok usingnya selesai dijalankan.   Selanjutnya kita membuat objek daftarSupplier untuk menampung data supplier yang di-SELECT dari database kemudian dirubah bentuknya menjadi kumpulan objek dari class entity Supplier yang disimpan di dalam sebuah wadah dengan tipe class collection List.   Terakhir kita gunakan perulangan foreach untuk mengekstrak objek Supplier yang ada di dalam objek daftarSupplier.   Jika kode di atas dijalankan, akan menghasilkan output seperti berikut :      Selamat MENCOBA :blush:  ","categories": ["Entity Framework","ORM","Visual C#"],
        "tags": ["DbContext","Entity Framework","EntityFramework","List","NuGet"],
        "url": "http://coding4ever.net/blog/2014/03/21/entity-framework-part-2/",
        "teaser": null
      },{
        "title": "Entity Framework Part 3",
        "excerpt":"Pada postingan sebelumnya kita sudah berhasil melakukan mapping (pemetaan) secara manual antara tabel yang ada di dalam database dengan class entity yang sudah kita definisikan di dalam project.   Mapping secara manual oke lah kalo hanya untuk satu atau dua tabel, tapi kalo tabel sudah banyak 10, 20, 30 …, :cry: tentu merupakan pekerjaan yang mengerikan dan menyedihkan kalo masih dikerjakan secara manual :grin:     Untungnya sudah ada beberapa tool yang bisa kita gunakan untuk melakukan mapping secara otomatis :      ADO.NET Entity Data Model Designer   Entity Framework Power Tools   InsyaAlloh kita akan membahasnya satu per satu, dan yang menjadi pembahasan pertama kita adalah penggunaan tool ADO.NET Entity Data Model Designer.   Tapi sebelumnya kita akan menambahkan beberapa tabel baru (Barang, Beli dan ItemBeli) ke dalam database Retail kita.      ADO.NET Entity Data Model Designer   ADO.NET Entity Data Model Designer (Entity Designer) adalah tool yang digunakan untuk memodifikasi file EDMX.   Dengan menggunakan ADO.NET Entity Data Model Designer memudahkan kita untuk membuat entitas (entities), asosiasi (associations), pemetaan (mappings) dan hubungan warisan (inheritance relationships) secara visual.   Oke langsung saja akan kita praktikan penggunakan tool ADO.NET Entity Data Model Designer :      Aktifkan Visual Studio .NET Anda   Buat project dengan tipe Console Application        Klik kanan project -&gt; Add -&gt; New Item              Pilih item ADO.NET Entity Data Model, tentukan namanya misal RetailModel kemudian klik tombol Add              Selanjutnya akan tampil dialog Entity Data Model, karena kita akan melakukan mapping berdasarkan database yang sudah ada, pilih Generate from database kemudian klik tombol Next                   Langkah berikutnya adalah menentukan nama database. Jika nama databasenya belum ada kita bisa menambahkannya dengan mengklik tombol New Connection …              Untuk melanjutkan klik tombol Next &gt;            Berikutnya adalah menentukan objek yang akan dimapping, untuks saat ini kita hanya memilih Tabel.              Hasil akhir dari langkah-langkah di atas, hanya akan menghasilkan sebuah file dengan ekstensi EDMX.   EDMX adalah file XML yang mendefinisikan model (konsep, penyimpanan dan mapping antar model) yang digunakan oleh Entity Framework.      Trus mana kode mappingnya ?   Seharusnya sih udah otomatis jika kita menggunakan Visual Studio .NET versi terbaru (2012 dan 2013), berhubung untuk contoh di atas saya masih menggunakan Visual Studio 2010, jadi masih ada beberapa langkah lagi yang harus kita lakukan :)   Sebelum melakukan langkah-langkah berikut ini, sebaiknya Anda sudah menginstall NuGet dan menambahkan paket Entity Framework.           Klik kanan di area kosong EF Designer -&gt; Add Code Generation Item…                   Pilih Online Templates, kemudian pada kotak pencarian ketik DbContext. Pilihan EF 5.x DbContext Generator for C#, tentukan namanya misal RetailModel kemudian klik tombol Add.                     Setelah kode generatenya berhasil dibuat seperti gambar di atas, terakhir akan kita coba untuk membaca data Supplier, dengan membuka file Program.cs dan melengkapi kode method Mainnya seperti berikut :              Dan jika kode di atas dijalankan, akan menghasilkan output seperti berikut :      Selamat MENCOBA :blush:  ","categories": ["Entity Framework","ORM","Visual C#"],
        "tags": ["ADO.NET Entity Data Model Designer","NuGet"],
        "url": "http://coding4ever.net/blog/2014/03/26/entity-framework-part-3/",
        "teaser": null
      },{
        "title": "Entity Framework Part 4",
        "excerpt":"Melanjutkan postingan sebelumnya, tentang tool-tool yang bisa digunakan untuk mengenerate kode mapping secara otomatis. Tool kedua yang akan kita bahas adalah Entity Framework Power Tools.   Saya sendiri lebih senang menggunakan Entity Framework Power Tools, dengan alasan kodenya lebih bersih dan transparan.   Untuk saat ini Entity Framework Power Tools masih versi beta dan baru bisa digunakan untuk project C# :grin:.     Inilah salah satu alasan kenapa saya lebih memilih C# dibandingkan VB .NET, untuk Indonesia mungkin saja VB .NET lebih favorit dibandingkan C# tapi di luar sana sepertinya C# yang lebih diminati, ini dibuktikan dengan lebih banyaknya referensi berbahasa C# dibandingkan VB .NET.   Secara default Entity Framework Power Tools menggunakan Code First’s Fluent API untuk konfigurasi kode mappingnya, dan untuk mengganti konfigurasi default ini ke Data Annotations, referensinya bisa Anda cek di sini.   Instalasi Entity Framework Power Tools   Untuk Visual Studio .NET 2010 bisa diinstall secara langsung melalui menu Tools &gt; Extensions and Updates, kemudian pilih Online Gallery, dan cari Entity Framework Power Tools.      Dan untuk Visual Studio .NET 2012, saya belum cek apakah tool ini sudah di-includekan secara default pada saat instalasi, jika belum langkah-langkah instalasi sama seperti di atas :grin:.   Sedangkan untuk Visual Studio .NET 2013 tool ini sudah include secara default pada saat instalasi.   Mencoba Entity Framework Power Tools   Setelah proses instalasi selesai kita bisa langsung mencoba Entity Framework Power Tools dan untuk databasenya kita masih menggunakan database postingan sebelumnya.   Langsung saja berikut langkah-langkahnya :      Aktifkan Visual Studio .NET Anda   Buat project C# dengan tipe Console Application. Ingat projectnya harus C#, karena untuk VB .NET belum didukung.        Klik kanan project -&gt; Entity Framework -&gt; Reverse Engineer Code First                   Langkah berikutnya adalah menentukan koneksi dan database.              Setelah klik tombol Ok, tunggu beberapa saat, untuk lamanya ya tergantung jumlah tabel yang ada di database.   Untuk progressnya bisa kita cek di bagian status bar.      Adapun proses yang terjadi pada saat kita menggunakan Entity Framework Power Tools sebagai berikut :      Menginstall paket Entity Framework, jadi jangan lupa untuk menginstall NuGet terlebih dulu.   Mengenerate class POCO (entity) untuk masing-masing tabel.   Mengenerate class Context yang merupakan turunan dari class DbContext.   Secara default untuk konfigurasi mapping (pemetaan) menggunakan Code First’s Fluent API.   Menggunakan pendekatan Code first (existing database).   Berikut adalah contoh class entity dan mapping hasil generate menggunakan Entity Framework Power Tools.         Class mapping      Class Context      Selamat MENCOBA :blush:  ","categories": ["Entity Framework","ORM","Visual C#"],
        "tags": ["Code First’s Fluent API","Data Annotations","Entity Framework Power Tools","EntityFramework","NuGet"],
        "url": "http://coding4ever.net/blog/2014/03/27/entity-framework-part-4/",
        "teaser": null
      },{
        "title": "Entity Framework Part 5",
        "excerpt":"Setelah selesai melakukan mapping, baik secara manual atau menggunakan tool seperti ADO.NET Entity Data Model Designer dan Entity Framework Power Tools, kita bisa langsung mencoba method-method dasar aplikasi database yang dikenal dengan istilah method CRUD seperti Save, Update, Delete dan Get.   Ingat tujuan kita menggunakan ORM seperti Entity Framework dalam pengembangan aplikasi database adalah agar kita tidak  lagi berhubungan secara langsung dengan database berikut objek-objeknya seperti tabel, view dan objek database lainnya, sehingga bisa lebih fokus ke aturan bisnis dari aplikasi yang sedang dikembangkan.     Dalam paradigma OOP, semuanya adalah objek. Saya, Anda, Customer, Supplier, Product adalah objek.   Ada beberapa keuntungan yang kita dapatkan ketika berhubungan dengan class dan objek :      Persistence ignorance - Kita tidak perlu lagi khawatir bagaimana data disimpan ataupun media yang digunakan.   Strong typing - Kita tidak perlu lagi melakukan konversi secara manual untuk setiap tipe data kolom/field yang ada di dalam sebuah tabel ketika ingin mengambil nilainya.   Compile-time checking - Class mempunyai daftar property, jika kita mengetikkan nama property yang salah, secara langsung akan mendapatkan kompilasi error. Sehingga tidak perlu menjalankan aplikasi untuk mengetahui kesalahan penulisan kode.   Ease of development - Editor kode seperti Visual Studio mempunyai fitur IntelliSense untuk mempercepat proses pengembangan aplikasi. IntelliSense memberikan petunjuk kepada pengembang aplikasi tentang daftar property, event dan method yang dimiliki oleh sebuah class. Tetapi jika kita menggunakan DataSet atau DataReader, fitur IntelliSense jadi tidak berfungsi karena penulisan nama field/kolom berbasis teks (string).   Di bawah ini kita akan membandingkan pembuatan method-method CRUD menggunakan library ADO.NET secara langsung dan menggunakan Entity Framework.   Adapun sebagai targetnya adalah tabel Supplier yang diwakili oleh class Supplier.      1. Save - Untuk menambahkan data baru   ADO.NET   private static int SaveUsingADONET(Supplier supplier) {     var result = 0;                  using (var conn = GetOpenConnection())     {         var sql = @\"INSERT INTO Supplier (NamaSupplier, Jalan, Kota)                     VALUES (@1, @2, @3)\";          using (var cmd = new SqlCommand(sql, conn))         {             cmd.Parameters.AddWithValue(\"@1\", supplier.NamaSupplier);             cmd.Parameters.AddWithValue(\"@2\", supplier.Jalan);             cmd.Parameters.AddWithValue(\"@3\", supplier.Kota);              result = cmd.ExecuteNonQuery();         }     }      return result; }  Entity Framework (EF)   private static int SaveUsingEF(Supplier supplier) {     var result = 0;      using (var db = new RetailContext())     {         db.Entry(supplier).State = EntityState.Added;         db.SaveChanges();          result = 1;     }      return result; }  Dari dua method di atas, kita bisa melihat bahwa method Save menggunakan Entity Framework (EF) lebih sederhana sehingga mengurangi kesalahan dalam penulisan kode dibandingkan dengan menggunakan ADO.NET secara langsung. Kita tidak lagi menuliskan perintah SQL INSERT yang masih berbasis teks (string).   Contoh penggunaan :   // buat objek supplier var supplier = new Supplier {     NamaSupplier = \"Morgan Bike Accessories\",     Jalan = \"6387 Scenic Avenue\",     Kota = \"Bothell\" };  var result1 = SaveUsingADONET(supplier); var result2 = SaveUsingEF(supplier);  2. Update - Untuk mengupdate data   ADO.NET   private static int UpdateUsingADONET(Supplier supplier) {     var result = 0;      using (var conn = GetOpenConnection())     {         var sql = @\"UPDATE Supplier SET NamaSupplier = @1, Jalan = @2, Kota = @3                     WHERE SupplierID = @4\";          using (var cmd = new SqlCommand(sql, conn))         {             cmd.Parameters.AddWithValue(\"@1\", supplier.NamaSupplier);             cmd.Parameters.AddWithValue(\"@2\", supplier.Jalan);             cmd.Parameters.AddWithValue(\"@3\", supplier.Kota);             cmd.Parameters.AddWithValue(\"@4\", supplier.SupplierID);              result = cmd.ExecuteNonQuery();         }     }      return result; }  Entity Framework (EF)   private static int UpdateUsingEF(Supplier supplier) {     var result = 0;      using (var db = new RetailContext())     {         db.Entry(supplier).State = EntityState.Modified;         db.SaveChanges();          result = 1;     }      return result; }  Contoh penggunaan :   // buat objek supplier var supplier = new Supplier {     SupplierID = 34,     NamaSupplier = \"Morgan Bike Accessories\",     Jalan = \"6387 Scenic Avenue\",     Kota = \"Bothell\" };  var result1 = UpdateUsingADONET(supplier); var result2 = UpdateUsingEF(supplier);  3. Delete - Untuk menghapus data   ADO.NET   private static int DeleteUsingADONET(Supplier supplier) {     var result = 0;      using (var conn = GetOpenConnection())     {         var sql = @\"DELETE FROM Supplier                     WHERE SupplierID = @1\";          using (var cmd = new SqlCommand(sql, conn))         {             cmd.Parameters.AddWithValue(\"@1\", supplier.SupplierID);              result = cmd.ExecuteNonQuery();         }     }      return result; }  Entity Framework (EF)   private static int DeleteUsingEF(Supplier supplier) {     var result = 0;      using (var db = new RetailContext())     {         db.Entry(supplier).State = EntityState.Deleted;         db.SaveChanges();          result = 1;     }      return result; }  Contoh penggunaan :   // buat objek supplier var supplier = new Supplier {     SupplierID = 34 };  var result1 = DeleteUsingADONET(supplier); var result2 = DeleteUsingEF(supplier);  4. GetAll - Untuk menampilkan semua data   Method ini akan mengembalikan kumpulan objek supplier, karena objek suppliernya bisa lebih dari satu maka dibutuhkan sebuah wadah (container) untuk menampung kumpulan objek supplier.   Untuk contoh di bawah ini saya menggunakan objek List untuk menampung kumpulan objek supplier.   ADO.NET   private static IList&lt;Supplier&gt; GetAllUsingADONET() {     var daftarSupplier = new List&lt;Supplier&gt;();      using (var conn = GetOpenConnection())     {         var sql = @\"SELECT SupplierID, NamaSupplier, Jalan, Kota                     FROM Supplier                     ORDER BY NamaSupplier\";          using (var cmd = new SqlCommand(sql, conn))         {             using (var dtr = cmd.ExecuteReader())             {                 while (dtr.Read())                 {                     var supplier = new Supplier                     {                         SupplierID = dtr[\"SupplierID\"] is DBNull ? 0 : (int)dtr[\"SupplierID\"],                         NamaSupplier = dtr[\"NamaSupplier\"] is DBNull ? string.Empty : (string)dtr[\"NamaSupplier\"],                         Jalan = dtr[\"Jalan\"] is DBNull ? string.Empty : (string)dtr[\"Jalan\"],                         Kota = dtr[\"Kota\"] is DBNull ? string.Empty : (string)dtr[\"Kota\"]                     };                      daftarSupplier.Add(supplier);                 }             }         }     }      return daftarSupplier; }  Contoh penggunaan :   var noUrut = 1;  var daftarSupplier = GetAllUsingADONET(); foreach (var supplier in daftarSupplier) {     Console.WriteLine(\"{0}. {1}\", noUrut, supplier.NamaSupplier);      noUrut++; }  Entity Framework (EF)   Tidak seperti ADO.NET yang masih menggunakan perintah SQL SELECT untuk mengakses data yang ada di dalam database, Entity Framework menggunakan LINQ.   private static IList&lt;Supplier&gt; GetAllUsingEF() {     var daftarSupplier = new List&lt;Supplier&gt;();      using (var db = new RetailContext())     {         daftarSupplier = db.Suppliers                            .OrderBy(s =&gt; s.NamaSupplier)                            .ToList();     }      return daftarSupplier; }  Contoh penggunaan :   var noUrut = 1;  var daftarSupplier = GetAllUsingEF(); foreach (var supplier in daftarSupplier) {     Console.WriteLine(\"{0}. {1}\", noUrut, supplier.NamaSupplier);      noUrut++; }  5. GetByName - Untuk menampilkan data berdasarkan nama Supplier   ADO.NET   private static IList&lt;Supplier&gt; GetByNameUsingADONET(string namaSupplier) {     var daftarSupplier = new List&lt;Supplier&gt;();      using (var conn = GetOpenConnection())     {         var sql = @\"SELECT SupplierID, NamaSupplier, Jalan, Kota                     FROM Supplier                     WHERE NamaSupplier LIKE @1                     ORDER BY NamaSupplier\";          using (var cmd = new SqlCommand(sql, conn))         {             cmd.Parameters.AddWithValue(\"@1\", \"%\" + namaSupplier + \"%\");              using (var dtr = cmd.ExecuteReader())             {                 while (dtr.Read())                 {                     var supplier = new Supplier                     {                         SupplierID = dtr[\"SupplierID\"] is DBNull ? 0 : (int)dtr[\"SupplierID\"],                         NamaSupplier = dtr[\"NamaSupplier\"] is DBNull ? string.Empty : (string)dtr[\"NamaSupplier\"],                         Jalan = dtr[\"Jalan\"] is DBNull ? string.Empty : (string)dtr[\"Jalan\"],                         Kota = dtr[\"Kota\"] is DBNull ? string.Empty : (string)dtr[\"Kota\"]                     };                      daftarSupplier.Add(supplier);                 }             }         }     }      return daftarSupplier; }  Contoh penggunaan :   var noUrut = 1;  var daftarSupplier = GetByNameUsingADONET(\"new\"); foreach (var supplier in daftarSupplier) {     Console.WriteLine(\"{0}. {1}\", noUrut, supplier.NamaSupplier);      noUrut++; }  Entity Framework (EF)   private static IList&lt;Supplier&gt; GetByNameUsingEF(string namaSupplier) {     var daftarSupplier = new List&lt;Supplier&gt;();      using (var db = new RetailContext())     {         daftarSupplier = db.Suppliers                            .Where(s =&gt; s.NamaSupplier.Contains(namaSupplier))                            .OrderBy(s =&gt; s.NamaSupplier)                            .ToList();     }      return daftarSupplier; }  Contoh penggunaan :   var noUrut = 1;  var daftarSupplier = GetByNameUsingEF(\"new\"); foreach (var supplier in daftarSupplier) {     Console.WriteLine(\"{0}. {1}\", noUrut, supplier.NamaSupplier);      noUrut++; }  Dan method terakhir adalah …   6. GetByID - Untuk menampilkan data berdasarkan Supplier ID   Method ini hanya mengembalikan satu objek supplier jika ditemukan, selain itu akan mengembalikan nilai null.   ADO.NET   private static Supplier GetByIDUsingADONET(int supplierID) {     Supplier supplier = null;      using (var conn = GetOpenConnection())     {         var sql = @\"SELECT SupplierID, NamaSupplier, Jalan, Kota                     FROM Supplier                     WHERE SupplierID = @1\";          using (var cmd = new SqlCommand(sql, conn))         {             cmd.Parameters.AddWithValue(\"@1\", supplierID);              using (var dtr = cmd.ExecuteReader())             {                 if (dtr.Read())                 {                     supplier = new Supplier();                     supplier.SupplierID = dtr[\"SupplierID\"] is DBNull ? 0 : (int)dtr[\"SupplierID\"];                     supplier.NamaSupplier = dtr[\"NamaSupplier\"] is DBNull ? string.Empty : (string)dtr[\"NamaSupplier\"];                     supplier.Jalan = dtr[\"Jalan\"] is DBNull ? string.Empty : (string)dtr[\"Jalan\"];                     supplier.Kota = dtr[\"Kota\"] is DBNull ? string.Empty : (string)dtr[\"Kota\"];                  }             }         }     }      return supplier; }  Contoh penggunaan :   var supplier = GetByIDUsingADONET(19); if (supplier != null)     Console.WriteLine(\"{0}\", supplier.NamaSupplier);  Entity Framework (EF)   private static Supplier GetByIDUsingEF(int supplierID) {     Supplier supplier = null;      using (var db = new RetailContext())     {         supplier = db.Suppliers                      .Where(s =&gt; s.SupplierID == supplierID)                      .SingleOrDefault();     }      return supplier; }  Contoh penggunaan :   var supplier = GetByIDUsingEF(19); if (supplier != null)     Console.WriteLine(\"{0}\", supplier.NamaSupplier);  Semua contoh method di atas masih menggunakan access modifier private static karena saya melakukan testingnya langsung di method Main (static void Main). Idealnya semua method di atas disimpan di dalam sebuah class dengan access modifier public.   Dan kesimpulan akhirnya adalah, dengan menggunakan ORM seperti Entity Framework, kita bisa dengan mudah membuat standarisasi penulisan kode untuk mengakses database karena memiliki pola yang sama, yg membedakan hanya nilai Statenya saja.            Selamat MENCOBA :blush:  ","categories": ["Entity Framework","ORM","Visual C#"],
        "tags": ["ADO.NET","ADO.NET Entity Data Model Designer","CRUD","Entity Framework Power Tools","OOP"],
        "url": "http://coding4ever.net/blog/2014/04/01/entity-framework-part-5/",
        "teaser": null
      },{
        "title": "Entity Framework Part 6",
        "excerpt":"Pada postingan sebelumnya kita sudah membahas bagaimana Entity Framework menangani sebuah tabel tunggal. Pada kenyataannya hampir semua aplikasi database menggunakan lebih dari satu tabel dan tentunya diantara tabel ini juga mempunyai hubungan (relasi).   Di postingan kali ini kita akan membahas bagaimana Entity Framework menangani dua buah tabel yang saling berhubungan yaitu Beli dan ItemBeli.        Untuk tabel Supplier dan Barang kita abaikan dulu walaupun kedua tabel ini juga terhubung ke tabel Beli dan ItemBeli.   Proses pembelian di dalam sebuah aplikasinya biasa masuk ke dalam modul transaksi. Ada sebuah proses yang penting ketika akan menyimpan data berupa transaksi, apalagi jika data tersebut saling berhubungan.   Proses ini dikenal dengan istilah transaction, dan salah satu poin pentingnya adalah atomic, yaitu beberapa perintah dianggap sebagai satu kesatuan. Kalau satu gagal, yang lain harus dibatalkan. Contoh pada saat transaksi pembelian proses yang terjadi adalah :      Insert 1 kali ke tabel Beli   Insert n kali ke tabel ItemBeli   Menambah stok barang (tidak di bahas di postingan ini), karena bisa juga diselesaikan dengan database trigger   Ketika insert ke tabel ItemBeli gagal, maka tabel Belinya juga harus di batalkan (undo), klo enggak ya datanya jadi enggak konsisten dong, ada nota Beli yang enggak ada item belinya.   Nah kabar gembiranya Entity Framework secara default sudah mendukung transaction.   Untuk membuat class entity Barang dan ItemBeli berikut class mappingnya sudah tidak dibahas lagi disini, karena saya menggunakan Entity Framework Power Tools.   Sebelum kita lanjut ke pembahasan kode program, kita lihat dulu class entity diagram ke empat tabel di atas.      Independent association dan Foreign key association   Hubungan dua buah entity atau lebih dikenal dengan istilah asosiasi (association). Asosiasi ini mencakup one-to-one, one-to-many dan many-to-many.   Dari sisi pemrograman Entity Framework, diperkenalkan lagi dua jenis asosiasi. Yang pertama dikenal dengan istilah independent association, asosiasi ini sudah diperkenalkan sejak Entity Framework versi awal, dan untuk memudahkan kita sebagai pengembang aplikasi, mulai Entity Framework versi 4, tim Entity Framework menambahkan asosiasi kedua yaitu foreign key association.   Dari kedua asosiasi di atas, implementasi foreign key association lebih disarankan dibandingkan independent association, sehingga untuk kode Entity Framework di bawah ini kita juga menggunakan foreign key association :grin:.   Untuk informasi lebih lanjut mengenai Independent association dan Foreign key association bisa merujuk ke referensi berikut :      Entity Framework 4 in Action   Programming Entity Framework, 2nd Edition   Foreign key vs. Independent associations in EF 4   Seperti postingan sebelumnya, saya akan menuliskan 2 versi kode sebagai bahan perbandingan yaitu menggunakan ADO.NET secara langsung dan Entity Framework.   Nama method yang akan kita gunakan untuk menambahkan data beli berikut itemnya adalah AddPembelian. Method ini akan menambahkan data di dua tabel sekaligus (Beli dan ItemBeli), sehingga sangat disarankan menggunakan database transaction.   Untuk ADO.NET fitur transaction harus ditambahkan secara manual, sedangkan Entity Framework secara default sudah menerapkan fitur transaction.   ADO.NET   private static int AddPembelianUsingADONET(Beli beli) {     var result = 0;      using (var conn = GetOpenConnection())     {          try         {             // mulai transaksi             var transaction = conn.BeginTransaction();              var sql = @\"INSERT INTO Beli (Nota, SupplierID, Tanggal, Keterangan)                         VALUES (@1, @2, @3, @4)\";              // insert ke tabel beli             using (var cmd = new SqlCommand(sql, conn, transaction))             {                 cmd.Parameters.AddWithValue(\"@1\", beli.Nota);                 cmd.Parameters.AddWithValue(\"@2\", beli.SupplierID);                 cmd.Parameters.AddWithValue(\"@3\", beli.Tanggal);                 cmd.Parameters.AddWithValue(\"@4\", beli.Keterangan);                  result = cmd.ExecuteNonQuery();             }              sql = @\"INSERT INTO ItemBeli (Nota, BarangID, Jumlah, HargaBeli, HargaJual)                     VALUES (@1, @2, @3, @4, @5)\";              // insert ke tabel item beli sebanyak n item             foreach (var item in beli.ItemBelis)             {                 using (var cmd = new SqlCommand(sql, conn, transaction))                 {                     cmd.Parameters.AddWithValue(\"@1\", beli.Nota);                     cmd.Parameters.AddWithValue(\"@2\", item.BarangID);                     cmd.Parameters.AddWithValue(\"@3\", item.Jumlah);                     cmd.Parameters.AddWithValue(\"@4\", item.HargaBeli);                     cmd.Parameters.AddWithValue(\"@5\", item.HargaJual);                      result = cmd.ExecuteNonQuery();                 }             }                                  // transaksi selesai             // simpan perubahan secara permanen             transaction.Commit();              result = 1; // status transaksi berhasil         }         catch         {             result = 0;         }     }      return result; }  Entity Framework   Menggunakan Entity Framework ternyata sangat mudah, coba lihat kode berikut setara dengan kode ADO.NET di atas :)   private static int AddPembelianUsingEF(Beli beli) {     var result = 0;      using (var db = new RetailContext())     {         try         {             db.Entry(beli).State = EntityState.Added;             db.SaveChanges();              result = 1;         }         catch         {         }     }      return result; }  Contoh penggunaan :   // buat objek item beli (3 objek) var item1 = new ItemBeli {     BarangID = \"BB-7421\",     Jumlah = 5,     HargaBeli = 54,     HargaJual = 60 };  var item2 = new ItemBeli {     BarangID = \"BB-8107\",     Jumlah = 7,     HargaBeli = 101,     HargaJual = 110 };  var item3 = new ItemBeli {     BarangID = \"BK-M18B-44\",     Jumlah = 10,     HargaBeli = 540,     HargaJual = 693 };  // buat objek beli var beli = new Beli {     Nota = \"N001\",     SupplierID = 3,     Tanggal = DateTime.Today,     Keterangan = \"Transaksi beli menggunakan Entity Framework\" };  // tambahkan item beli ke objek beli beli.ItemBelis.Add(item1); beli.ItemBelis.Add(item2); beli.ItemBelis.Add(item3);  var result = AddPembelianUsingEF(beli);  Console.WriteLine(\"\\nStatus transaksi : {0}\", result == 1 ? \"Sukses\" : \"Gagal\");           Tabel Beli terhubung dengan tabel Supplier, sehingga Supplier dengan ID 3 harus sudah ada di tabel Supplier. Begitu juga dengan table ItemBeli yang terhubung dengan tabel Barang, sehingga Barang dengan ID BB-7421, BB-8107 dan BK-M18B-44 juga harus ada di tabel Barang.   Selamat MENCOBA :blush:  ","categories": ["Entity Framework","ORM","Visual C#"],
        "tags": ["atomic","Entity Framework Power Tools","Foreign key association","Independent association","transaction","trigger"],
        "url": "http://coding4ever.net/blog/2014/04/03/entity-framework-part-6/",
        "teaser": null
      },{
        "title": "Entity Framework Part 7",
        "excerpt":"Masih melanjutkan postingan sebelumnya, setelah data pembelian berhasil disimpan tentu suatu saat kita ingin menampilkan kembali data tersebut.   Sedikit berbeda dengan postingan yang disini, saya sudah mendemokan bagaimana Entity Framework melakukan query dari sebuah tabel.   Sedangkan pada postingan kali ini, kita akan melihat bagaimana Entity Framework melakukan query dari beberapa tabel sekaligus yang saling berhubungan.   Misal kita ingin menampilkan datanya dengan format seperti berikut :        Maka ada dua proses yang perlu kita lakukan :      Mengambil data header (beli dan supplier)   Mengambil data detail (item beli dan barang)   Untuk poin pertama, jika menggunakan query konvensional, perintah SQL SELECTnya seperti berikut :   SELECT Beli.Nota, Beli.Tanggal, Supplier.SupplierID, Supplier.NamaSupplier FROM Supplier INNER JOIN Beli ON Supplier.SupplierID = Beli.SupplierID WHERE Beli.Nota = 'N001'     Sedangkan poin kedua perintahnya seperti berikut :   SELECT Barang.BarangID, Barang.NamaBarang, ItemBeli.Jumlah, ItemBeli.HargaBeli, ItemBeli.HargaJual FROM Barang INNER JOIN ItemBeli ON Barang.BarangID = ItemBeli.BarangID WHERE ItemBeli.Nota = 'N001'     Selanjutnya kita tinggal implementasikan dalam bentuk kode program (menggunakan ADO.NET) dengan membuat dua buah method masing-masing dengan nama GetPembelianUsingADONET dan GetDetailPembelian.   Method GetPembelianUsingADONET akan mengeksekusi query pertama sedangkan query kedua akan dieksekusi oleh method GetDetailPembelian.   private static Beli GetPembelianUsingADONET(string nota) {     Beli beli = null;      using (var conn = GetOpenConnection())     {         // ambil data header         var sql = @\"SELECT Beli.Nota, Beli.Tanggal, Supplier.SupplierID, Supplier.NamaSupplier                     FROM Supplier INNER JOIN Beli ON Supplier.SupplierID = Beli.SupplierID                     WHERE Beli.Nota = @1\";          using (var cmd = new SqlCommand(sql, conn))         {             cmd.Parameters.AddWithValue(\"@1\", nota);              using (var dtr = cmd.ExecuteReader())             {                 if (dtr.Read())                 {                     // mapping record ke objek supplier                     var supplier = new Supplier                     {                         SupplierID = dtr[\"SupplierID\"] is DBNull ? 0 : (int)dtr[\"SupplierID\"],                         NamaSupplier = dtr[\"NamaSupplier\"] is DBNull ? string.Empty : (string)dtr[\"NamaSupplier\"]                     };                      // mapping record ke objek beli                     beli = new Beli();                     beli.Nota = dtr[\"Nota\"] is DBNull ? string.Empty : (string)dtr[\"Nota\"];                     beli.Tanggal = dtr[\"Tanggal\"] is DBNull ? DateTime.MinValue : (DateTime)dtr[\"Tanggal\"];                     beli.Supplier = supplier; // hubungkan objek supplier dan beli                 }             }         }          if (beli != null)         {             // ambil data detail             var daftarItemBeli = GetDetailPembelian(nota, conn);             beli.ItemBelis = daftarItemBeli; // hubungkan objek beli dg detail beli         }     }      return beli; }  private static IList&lt;ItemBeli&gt; GetDetailPembelian(string nota, SqlConnection conn) {     var daftarItemBeli = new List&lt;ItemBeli&gt;();      var sql = @\"SELECT Barang.BarangID, Barang.NamaBarang, ItemBeli.Jumlah, ItemBeli.HargaBeli, ItemBeli.HargaJual                 FROM Barang INNER JOIN ItemBeli ON Barang.BarangID = ItemBeli.BarangID                 WHERE ItemBeli.Nota = @1\";     using (var cmd = new SqlCommand(sql, conn))     {         cmd.Parameters.AddWithValue(\"@1\", nota);          using (var dtr = cmd.ExecuteReader())         {             while (dtr.Read())             {                 // mapping record ke objek barang                 var barang = new Barang                 {                     BarangID = dtr[\"BarangID\"] is DBNull ? string.Empty : (string)dtr[\"BarangID\"],                     NamaBarang = dtr[\"NamaBarang\"] is DBNull ? string.Empty : (string)dtr[\"NamaBarang\"]                 };                  // mapping record ke objek item beli                 var itemBeli = new ItemBeli                 {                     Barang = barang, // hubungkan barang dg item beli                     Jumlah = dtr[\"Jumlah\"] is DBNull ? 0 : (int)dtr[\"Jumlah\"],                     HargaBeli = dtr[\"HargaBeli\"] is DBNull ? 0 : (int)dtr[\"HargaBeli\"],                     HargaJual = dtr[\"HargaJual\"] is DBNull ? 0 : (int)dtr[\"HargaJual\"]                 };                  daftarItemBeli.Add(itemBeli);             }         }     }      return daftarItemBeli; }  Untuk mencoba kode di atas gunakan kode berikut :   static void Main(string[] args) {     var beli = GetPembelianUsingADONET(\"N001\");     Console.WriteLine(\"Nota : {0}\\nTanggal : {1}\\nSupplier : {2}\",                         beli.Nota, beli.Tanggal, beli.Supplier.NamaSupplier);      Console.WriteLine(\"\\nItem Beli :\");      // ekstrak item beli     foreach (var item in beli.ItemBelis)     {         Console.WriteLine(\"Barang : {0}, Jumlah : {1}, Harga Jual : {2}\",                             item.Barang.NamaBarang, item.Jumlah, item.HargaJual);     }      Console.WriteLine(\"\\nPress any key to exit ...\");     Console.ReadKey(); }  Jika kode di atas dijalankan akan menghasilkan output seperti gambar pertama.   Trus bagaimana dengan Entity Framework ?   Tool ORM seperti Entity Framework, dibuat untuk memudahkan hidup kita sebagai pengembang aplikasi. Hidup ini sudah susah kenapa harus dipersulit :grin:   Oke, kita akan tulis ulang kode di atas menggunakan Entity Framework.   private static Beli GetPembelianUsingEF(string nota) {     Beli beli;      using (var db = new RetailContext())     {         beli = db.Belis                  .Include(bl =&gt; bl.Supplier)                  .Include(bl =&gt; bl.ItemBelis.Select(ib =&gt; ib.Barang))                  .Where(bl =&gt; bl.Nota == nota)                  .SingleOrDefault();     }      return beli; }  Gimana lebih simple bukan ? :blush:   Dan ingat …      Semakin sedikit kode yang kita tulis, semakin sedikit juga bug yang dihasilkan dan semakin sedikit kode yang kita tulis, semakin mudah juga untuk melakukan maintenance.    Selamat MENCOBA :blush:  ","categories": ["Entity Framework","ORM","Visual C#"],
        "tags": ["ADO.NET","ORM"],
        "url": "http://coding4ever.net/blog/2014/04/11/entity-framework-part-7/",
        "teaser": null
      },{
        "title": "SMS Gateway Edisi .NET Part 1",
        "excerpt":"Postingan pertama di domain yang baru :), saya ingin membahas lagi tentang pembuatan aplikasi SMS Gateway. Alasannya sederhana karna salah satu artikel yang paling banyak dibaca di blog ini adalah artikel Membuat Sms Gateway Itu Gampang, Jangan Dipersulit !!!.   Jika pada artikel Membuat Sms Gateway Itu Gampang, Jangan Dipersulit !!!, kita menggunakan bahasa pemrograman VB 6, untuk postingan kali ini kita akan menggunakan bahasa pemrograman C#.     Untuk membaca dan mengirim sms kita akan menggunakan library GSMComm, yang bisa diinstall via NuGet.   Sebelum lanjut kita lihat dulu fitur dari library GSMComm :      Manage SMS messages: Send, read, delete, store, import and export messages, get memory status, get/set SMSC.   Manage the phonebook: Create, find, delete, read, import and export phonebook entries, get memory status.   Manage the phone: Read general info, reset configuration, enter PIN   Supports notifications about new messages as well as forwarding them directly to the application.   Detect phone connection/disconnection.   Other SMS message variants also possible, such as alerts and notifications.   Support for Smart Messaging and related messages to create, locate and recombine concatenated text messages, and also to create operator logo messages.   Logging support with 4 levels to assist in troubleshooting.   Support for GSM 7-bit default alphabet and Unicode for the message text.   Supports some operator functions.   Remoting support for sending SMS messages.   SMS batch mode for faster sending of multiple messages.   Execution of custom commands that are not directly supported.   Keren bukan untuk ukuran library gratis :)   Pada postingan bagian pertama ini kita hanya akan membahas perintah-perintah dasar yang dibutuhkan untuk membuat aplikasi SMS Gateway, seperti koneksi ke device modem atau hp, membaca sms masuk, dan mengirim sms.   Membuat Project   Project yang kita gunakan adalah project berbasis Windows Form.      Menambahkan Library GSMComm via NuGet           Klik kanan node References -&gt; Manage NuGet Packages …                   Pada tab Online pilih nuget.org, pada kotak pencarian ketik gsm, kemudian klik tombol Install.              kemudian tunggu sampai proses instalasi selesai.      Tutup dialog NuGet package, Kemudian cek node references, seharusnya ada empat library baru yang sudah ditambahkan yaitu GSMCommServer, GSMCommShared, GSMCommunication dan PDUConverter.      Library PDUConverter bertanggung jawaban untuk melakukan proses decoding pesan sms, sedangkan yang bertugas untuk melakukan komunikasi ke modem atau hp adalah library GSMCommunication.   Untuk library GSMCommServer dan GSMCommShared hanya digunakan jika kita ingin mengaktifkan fitur .NET Remoting untuk mengirim sms.   Setelah semua persiapan selesai, kita bisa langsung mencoba perintah-perintah dasar yang diperlukan untuk pembuatan aplikasi sms gateway.   1. Konek ke device modem atau hp   Untuk melakukan koneksi ke modem atau hp, ada beberapa tahapan yang harus kita lakukan :      Membuat objek dari class GsmCommMain   Mendaftarkan method ke event MessageReceived, yang dikenal dengan istilah delegate    method.   Memanggil method Open.   Membuat objek dari class GsmCommMain   Misal kita akan membuat sebuah objek dari class GsmCommMain dengan nama comm, maka perintahnya yang digunakan adalah :   var port = \"COM1\"; // port yang digunakan menyesuaikan var baudRate = 9600; var timeout = 150;  var comm = new GsmCommMain(port, baudRate, timeout);  Mendaftarkan method ke event MessageReceived yang dikenal dengan istilah delegate    method   Salah satu fitur keren yang dimiliki oleh library GSMComm adalah Event MessageReceived. Dengan adanya event ini kita tidak perlu menggunakan objek timer untuk mengecek apakah ada sms yang masuk.   Event ini tidak bisa kita akses secara langsung, yang perlu kita lakukan adalah membuat sebuah method kemudian mendaftarkannya ke event ini.   Contoh kita membuat sebuah method dengan nama comm_MessageReceived, method ini hanya akan menampilkan notifikasi sms masuk. Untuk selanjutnya method ini bisa kita kembangkan lagi, misal ketika ada sms masuk datanya langsung kita simpan ke database.   private void comm_MessageReceived(object sender, MessageReceivedEventArgs e) {     var obj = e.IndicationObject;      if (obj is MemoryLocation)     {         var loc = (MemoryLocation)obj;          var msg = string.Format(\"New message received in storage \\\"{0}\\\", index {1}.\",                                 loc.Storage, loc.Index);         MessageBox.Show(msg);          return;     }      if (obj is ShortMessage)     {         var msg = (ShortMessage)obj;         var pdu = comm.DecodeReceivedMessage(msg);          MessageBox.Show(\"New message received\");     } }  Kemudian kita daftarkan ke event MessageReceived dengan perintah :   comm.MessageReceived += new MessageReceivedEventHandler(comm_MessageReceived);  sehingga ketika ada sms yang masuk method comm_MessageReceived akan otomatis dipanggil.   Memanggil method Open   Setelah langkah pertama dan kedua selesai dikerjakan kita bisa langsung memanggil method Open untuk melakukan koneksi ke modem atau hp.   comm.Open();  while (!comm.IsConnected()) {     var msgResult = MessageBox.Show(this, \"No phone connected.\", \"Connection setup\",                                         MessageBoxButtons.RetryCancel, MessageBoxIcon.Exclamation);      if (msgResult == DialogResult.Cancel)     {         comm.Close();         return;     }     else     {         comm.Close();         comm.Open();     } }  2. Membaca SMS Masuk   Method yang digunakan untuk membaca sms adalah method ReadMessages, method ini mempunyai dua parameter yaitu PhoneMessageStatus dan Storage.   Untuk PhoneMessageStatus pilihannya adalah : ReceivedUnread, ReceivedRead, StoredUnsent, StoredSent dan All. Sedangkan Storage pilihannya hanya dua yaitu : SM dan ME.        private void btnBacaSMS_Click(object sender, EventArgs e) {     var messages = comm.ReadMessages(PhoneMessageStatus.All, PhoneStorageType.Sim);     foreach (var message in messages)     {         var data = (SmsDeliverPdu)message.Data;          var phoneNumber = data.OriginatingAddress;         var msg = data.UserDataText;         var tanggal = string.Format(\"{0:yyyy/MM/dd}\", data.SCTimestamp.ToDateTime());         var jam = string.Format(\"{0:HH:mm:ss}\", data.SCTimestamp.ToDateTime());          lstDaftarSMS.Items.Add(string.Format(\"{0}, {1}, {2}, {3}\", tanggal, jam, phoneNumber, msg));     } }  3. Mengirim SMS   Untuk mengirim sms kita menggunakan method SendMessage yang membutuhkan objek pdu.   private void btnKirimSMS_Click(object sender, EventArgs e) {     var msg = txtPesan.Text;     var phoneNumber = txtNoHp.Text;      var pdu = new SmsSubmitPdu(msg, phoneNumber, string.Empty);     comm.SendMessage(pdu); }  Kode di atas hanya bisa mengirim sms dengan jumlah karakter maksimal 160 karakter, jika ingin lebih kita harus merevisi kode di atas dengan menambahkan beberapa method baru yaitu CreateConcatMessage dan SendMultiple.   private OutgoingSmsPdu[] CreateConcatMessage(string message, string number) {     OutgoingSmsPdu[] pdus = null;      try     {         pdus = SmartMessageFactory.CreateConcatTextMessage(message, number);     }     catch     {         return null;     }      return pdus; }  private void SendMultiple(OutgoingSmsPdu[] pdus) {     var num = pdus.Length;      try     {         // Send the created messages         comm.EnableTemporarySmsBatchMode();          foreach (OutgoingSmsPdu pdu in pdus)         {             comm.SendMessage(pdu);         }     }     catch     {     } }  Terakhir kode yang ada di method btnKirimSMS_Click juga harus di revisi :   private void btnKirimSMS_Click(object sender, EventArgs e) {     var msg = txtPesan.Text;     var phoneNumber = txtNoHp.Text;      if (msg.Length &gt; 160)     {         var pdus = CreateConcatMessage(msg, phoneNumber);         if (pdus != null) SendMultiple(pdus);     }     else     {         var pdu = new SmsSubmitPdu(msg, phoneNumber, string.Empty);         comm.SendMessage(pdu);     } }  Yuph akhirnya selesai juga.   Selamat MENCOBA :blush:  ","categories": ["Visual C#","SMS Gateway"],
        "tags": ["SMS Gateway"],
        "url": "http://coding4ever.net/blog/2014/05/10/sms-gateway-edisi-net-part-1/",
        "teaser": null
      },{
        "title": "Manajemen Password Menggunakan KeePass",
        "excerpt":"Hari ini kita dituntut untuk mengingat banyak password. Ada password Email, FTP, Facebook, Internet Banking, Remote Desktop dan lain sebagainya. Ditambah lagi pekerjaan kita sebagai Software developer berarti ada tambahan password lagi yang harus kita ingat seperti password SQL Server, MySQL, Firebird, Web hosting dan lain-lain.     Kita disarankan untuk menggunakan password yang berbeda untuk setiap user. Karena jika kita hanya menggunakan satu password untuk semuanya dan jika seseorang berhasil mendapatkan password kita, berarti kita mempunyai masalah… ya masalah yang serius, Anda bisa membayangkannya ? Orang tersebut akan memiliki akses ke akun email kita, facebook dan lain sebagainya.   KeePass adalah aplikasi password manager gratis dan open source, yang membantu kita untuk mengelola password dengan cara yang aman. Kita bisa menyimpan semua password dalam satu database. Database ini sendiri dipassword dengan satu password master atau bisa juga dalam bentuk file kunci. Jadi kita hanya perlu mengingat satu password master atau menggunakan file kunci untuk membuka database.   Database KeePass dienkripsi menggunakan enkripsi yang terbaik dan paling aman untuk saat ini yaitu (AES dan Twofish).   Instalasi   Langkah-langkah instalasi seperti berikut :      Download KeePass   Lakukan instalasi, kita tinggal mengikuti langkah-langkah yang ada   Cara penggunaan   Untuk menggunakan KeePass sangat mudah, berikut langkah-langkahnya :      Jalankan aplikasi KeePass, bisa melalui menu Start -&gt; Programs -&gt; KeePass 2 atau melalui desktop.        Hal pertama yang harus kita lakukan adalah membuat database KeePass. Caranya dengan mengklik menu File -&gt; New              Kemudian tentukan nama database misal DbKeePass                   Setelah itu kita diminta untuk menentukan password yang digunakan untuk membuka database DbKeePass              kemudian klik OK sekali lagi              Group Password   Secara default KeePass sudah menyediakan beberapa group password seperti group password untuk Windows, Network, Email dan sebagainya.      Untuk menambahkan group baru, kita tinggal klik kanan pada node utama kemudian pilih Add Group      Setelah itu kita inputkan nama group, misal SQL Server         Item Group   Setelah semua group password yang diperlukan dibuat, berikutnya adalah menambahkan user, password dan link URL (jika halaman web) untuk masing-masing group password.   Misal kita akan menambahkan user dan password facebook di group Internet.      Caranya dengan memilih group Internet kemudian klik kanan area kosong di panel sebelah kanan kemudian pilih Add Entry…      Setelah itu inputkan informasi User Name, Password dan URL         Sampai disini kita bisa mengulangi langkah-langkah sebelumnya untuk mendaftarkan user name dan password lainnya.   Plugin   KeePass mempunyai banyak sekali plugin yang bermanfaat, salah satunya adalah PassIFox, plugin ini memudahkan kita untuk menginputkan secara otomatis user dan password ketika kita mengakses halaman web yang ada form user dan passwordnya.   PassIFox khusus untuk browser Firefox, bagi pengguna Chrome bisa menggunakan ChromeIPass.   Misal kita mengakses halaman web yang ada form user dan passwordnya seperti Wordpress, setelah itu kita klik kanan di inputan Username atau Password kemudian pilih menu Fill User &amp; Pass.      Secara otomatis user dan password akan diisikan sesuai dengan data user dan password yang ada pada database KeePass.      PassIFox sendiri membutuhkan plugin yang lain yaitu KeePassHttp.   Instalasi Plugin KeePassHttp dan PassIFox   KeePassHttp   Berikut langkah-langkahnya :      Jika aplikasi KeePass sedang dijalankan, tutup terlebih dulu.   Download KeePassHttp.        Copykan ke folder instalasi KeePass.                   Verifikasi apakah plugin KeePassHttp sudah terinstall dengan benar melalui menu Tools -&gt; Plugins                     PassIFox   Setelah instalasi plugin KeePassHttp berhasil, kita lanjutkan dengan menginstall plugin PassIFox. Adapun langkah-langkahnya seperti berikut :      Jika aplikasi KeePass sedang dijalankan, tutup terlebih dulu.   Aktifkan Firefox Add-ons Manager        Pada kota pencarian ketik PassIFox              Setelah instalasi PassIFox, restart Firefoxnya.   Konfigurasi plugin PassIFox      Jalankan aplikasi KeePass        Buka halaman website yang ada form loginnya misal Facebook, kemudian klik tombol Connect yang ada dipojok kanan atas                   Akan tampil dialog konfirmasi, isikan KeePassHttpKey kemudian klik tombol Save              Langkah-langkah konfigurasi ini hanya sekali saja setelah instalasi awal plugin PassIFox.   Uji coba plugin PassIFox      Jalankan aplikasi KeePass   Buka halaman website yang ada form loginnya misal Facebook        Akan tampil konfirmasi, jangan lupa untuk mencontreng pilihan Remember this decision agar kotak konfirmasi ini tidak tampil lagi ketika kita mengakses halaman  web yang sama.                   Klik kanan inputan user atau password, kemudian pilih menu Fill User &amp; Pass              dan secara otomatis user dan password akan diisikan sesuai dengan data user dan password yang ada pada database KeePass.      Selamat mencoba :blush:  ","categories": ["Aplikasi"],
        "tags": ["KeePass","Manajemen Password"],
        "url": "http://coding4ever.net/blog/2014/05/21/manajemen-password-menggunakan-keepass/",
        "teaser": null
      },{
        "title": "Manajemen Proyek Menggunakan Redmine Bagian 1",
        "excerpt":"Dalam pengembangan proyek, biasanya dibutuhkan aplikasi untuk mencatat hal-hal yang berhubungan dengan proyek yang sedang dikembangkan. Seperti daftar fitur, bug, dokumentasi dan seterusnya.     Selama ini ada beberapa aplikasi proyek manajemen yang biasa saya gunakan :      ToDo List - Aplikasi berbasis windows yang gratis dan open source. Salah satu kekurangannya adalah aplikasi ini adalah aplikasi standalone, sehingga akan menyulitkan untuk mengelola proyek yang dikerjakan oleh tim.   Trello - Aplikasi berbasis web yang simple, gratis dan online. Ini adalah salah satu aplikasi andalan saya sampai saat ini.   Redmine - Aplikasi berbasis web dengan fitur lengkap, gratis dan open source. Untuk menggunakan Redmine harus dilakukan instalasi terlebih dulu.   Pada bagian pertama ini kita hanya akan membahas instalasi Redmine dengan target database MySQL.   Instalasi   Redmine adalah aplikasi proyek manajemen berbasis web yang dikembangkan menggunakan framework Ruby on Rails. Dukungan database pun lumayan banyak seperti SQLite, MySQL, PostgreSQL dan SQL Server.   Untuk menginstall aplikasi berbasis web yang dikembangkan menggunakan framework Ruby on Rails tentu berbeda dengan menginstall aplikasi berbasis web yang dikembangkan menggunakan php.   Untuk saat ini ada banyak tool yang mempermudah proses instalasi Redmine seperti Web Platform Installer dan BitNami Redmine Stack. Tapi dipostingan kali ini kita akan melakukan instalasi secara manual.   Oke kita langsung saja, berikut adalah langkah-langkah instalasi Redmine.   Prerequisites   Hal-hal yang perlu kita siapkan sebelum masuk ke proses instalasi Redmine.      Install Ruby dan Development Kit. Untuk mempermudah instalasi anda bisa menggunakan RailsInstaller yang di dalamnya sudah diikutsertakan paket Ruby dan Development Kit.   Install MySQL.        Download MySQL Connector/C, kemudian ekstrak ke folder C:\\mysql-connector                     kemudian copykan file libmysql.dll yang ada di folder C:\\mysql-connector\\lib ke folder C:\\RailsInstaller\\Ruby1.9.3\\bin       Install ImageMagick (optional).  Petunjuk instalasinya ada disini. Tujuan menginstall library ini adalah agar laporan yang dihasilkan Redmine seperti Gantt chart bisa disimpan dalam format png dan pdf.   Instalasi Redmine           Download source code terakhir Redmine, kemudian ekstrak ke folder yang sudah ditentukan misal C:\\Redmine.                   Membuat database kosong dengan nama redmine  CREATE DATABASE redmine CHARACTER SET utf8;            Konfigurasi koneksi database       Copykan file database.yml.example yang ada di folder config ke folder yang sama dengan nama database.yml. Kemudian edit file database.yml menggunakan editor kesayangan anda setelah itu update informasi yang ada di bagian production (database, host, username dan password).         production:   adapter: mysql2   database: redmine   host: localhost   username: user_mysql   password: password_user_mysql     Langkah-langkah berikut dijalankan melalui command prompt      Aktifkan command prompt        Set variabel environment CPATH dan LIBRARY_PATH ImageMagick (optional) set CPATH=C:\\ImageMagick\\include    set LIBRARY_PATH=C:\\ImageMagick\\lib            Install library mysql   gem install mysql2 --platform=ruby -- '--with-mysql-dir=\"C:\\mysql-connector\"'            Install bundler    gem install bundler            Install semua paket gem yang dibutuhkan       bundle install --without development test            Mengenerate session store secret. Untuk menyimpan cookie dan variabel session            rake generate_secret_token            Membuat objek database      set RAILS_ENV=production      rake db:migrate       Set konfigurasi default      set RAILS_ENV=production      set REDMINE_LANG=en      rake redmine:load_default_data   Setelah instalasi selesai, kita bisa melakukan tes dengan mengetikan skrip berikut :  ruby script/rails server webrick -e production   kemudian akses url : http://localhost:3000/         Login dengan user dan password admin.      Sampai disini proses instalasi Redmine sudah berhasil :)   Mendaftarkan service Redmine ke Windows Service   Tentu enggak kren klo setiap ingin mengakses Redmine, kita harus selalu menjalankan skrip ruby script/rails server webrick -e production, jadi ada baiknya service Redminenya kita daftarkan sebagai service Windows.   Berikut langkah-langkah untuk mendaftarkan service Redmine sebagai Windows Service :           Aktifkan command prompt kemudian ketik perintah berikut     gem install win32-service            Buat file dengan nama service.rb simpan di folder instalasi redmine              kemudian copas kode berikut :       REDMINE_DIR = 'C:\\redmine' LOG_FILE = \"#{REDMINE_DIR}\\\\log\\\\service.log\"   begin   require 'win32/daemon'   include Win32    class RedmineService &lt; Daemon      def service_init       File.open(LOG_FILE, 'a'){ |f| f.puts \"Initializing service #{Time.now}\" }         @server_pid = Process.spawn 'ruby script/rails s -e production', :chdir =&gt; REDMINE_DIR, :err =&gt; [LOG_FILE, 'a']     end      def service_main       File.open(LOG_FILE, 'a'){ |f| f.puts \"Service is running #{Time.now} with pid #{@server_pid}\" }       while running?         sleep 10       end     end      def service_stop       File.open(LOG_FILE, 'a'){ |f| f.puts \"Stopping server thread #{Time.now}\" }       system \"taskkill /PID #{@server_pid} /T /F\"        Process.waitall       File.open(LOG_FILE, 'a'){ |f| f.puts \"Service stopped #{Time.now}\" }       exit!     end   end    RedmineService.mainloop  rescue Exception =&gt; e   File.open(LOG_FILE,'a+'){ |f| f.puts \" ***Daemon failure #{Time.now} exception=#{e.inspect}\\n#{e.backtrace.join($/)}\" }   raise end          Kembali lagi ke command prompt kemudian ketik perintah berikut  sc create Redmine binPath= \"C:\\RailsInstaller\\Ruby1.9.3\\bin\\rubyw -C C:\\redmine\\ service.rb\"            Jalankan service redmine     net start Redmine              Akhirnya selesai juga :), dan untuk langkah-langkah penggunaan Redmine insya Alloh akan kita bahas dilain kesempatan.   Selamat mencoba :blush:  ","categories": ["Aplikasi"],
        "tags": ["Redmine","Trello","Todo List","Ruby","RailsInstaller"],
        "url": "http://coding4ever.net/blog/2014/06/02/manajemen-proyek-menggunakan-redmine-bagian-1/",
        "teaser": null
      },{
        "title": "Entity Framework Part 8",
        "excerpt":"Melanjutkan kembali pembahasan tentang Entity Framework.   Misalkan kita mempunyai struktur tabel seperti gambar di bawah ini.        Jika kita buatkan class entity dari ketiga tabel di atas, class diagramnya akan terlihat seperti berikut :      Dari gambar class diagram di atas, kita bisa melihat bahwa class Siswa, Guru dan Pegawai mempunyai beberapa property yang sama yaitu Jalan, Kota, Provinsi dan KodePos.      Untuk alasan desain class entity yang lebih baik sebaiknya kita pisahkan property Jalan, Kota, Provinsi dan KodePos ke dalam class tersendiri, misal dengan nama class Alamat, kemudian masing-masing class entity Siswa, Guru dan Pegawai menambahkan property baru dengan tipe class Alamat, sehingga class diagram kita akan menjadi seperti berikut :         Nah class baru (Alamat) inilah yang akan menjadi pembahasan kita pada postingan kali ini yang dikenal dengan istilah Complex Types atau Value Types.   Sejak awal Entity Framework sudah mendukung Complex Types atau yang dikenal juga dengan istilah value types.   Complex Types atau value types bisa digunakan sebagai tipe data dari sebuah property sehingga ada kemiripan dengan class entity biasa yang sudah kita kenal, yang disebut dengan istilah entity types.   Lalu di mana perbedaannya ?   Di dalam Entity Framework setiap entity types harus mempunyai property key sedangkan complex types tidak.   Contoh :      Mendefinisikan Complex Types   Setelah mengetahui perbedaan antara entity types dan complex types kita juga harus mengetahui aturan dalam membuat complex types.   Berikut aturan-aturan yang harus kita penuhi untuk membuat complex types.      Complex types tidak boleh mempunyai property key.   Semua property yang dimiliki complex types harus bertipe primitif.   Ketika digunakan sebagai tipe data oleh class lain, tidak boleh sebagai collection type harus single instance   Contoh :      Konfigurasi Mapping (pemetaan) Complex Types   Untuk menyederhanakan contoh kode program, konfigurasi mapping (pemetaan) complex types di bawah ini menggunakan konfigurasi Data Annotations. Saya sendiri lebih senang menggunakan konfigurasi Fluent API dengan tujuan agar class entity kita tetap bersih dari atribut-atribut Data Annotations.   Caranya adalah dengan mengedit class Alamat, kemudian menambahkan atribut Data Annotations      Terakhir kita coba untuk mengakses property dengan tipe complex types      Jika kode di atas dijalankan, akan menghasilkan output seperti berikut :      Selamat MENCOBA :blush:  ","categories": ["Entity Framework","ORM","Visual C#"],
        "tags": ["complex types","entity types","property key","Data Annotations"],
        "url": "http://coding4ever.net/blog/2014/06/08/entity-framework-part-8/",
        "teaser": null
      },{
        "title": "KR Pulsa Elektrik",
        "excerpt":"Kangen juga udah lama enggak posting :grin:   Kali ini kita akan membahas aplikasi Android yang namanya KR Pulsa Elektrik. Aplikasi ini digunakan untuk mempermudah transaksi penjualan pulsa, token PLN, pembayaran tagihan dan voucher game.   Aplikasi ini gratis dan 100% buatan saya :grin:, bisa dibilang sebagai pilot project untuk pengembangan project Android lainnya. Lumayan lah iseng-iseng berhadiah dolar :grin:.     Salah satu fitur andalan aplikasi ini adalah kemudahan dalam pembuatan format perintah yang bisa disesuaikan dengan format perintah masing-masing distributor pulsa.   Fitur andalan lainnya adalah tersedianya server data untuk mendownload data-data referensi seperti data bank, format perintah, operator kartu, harga voucher dan sms center masing-masing distributor, sehingga memudahkan Anda sebagai penjual pulsa untuk bisa langsung melakukan transaksi sesuai dengan pilihan distributor.   Aplikasi ini bisa Anda install secara langsung dengan mengakses link berikut menggunakan smartphone Android Anda.   https://play.google.com/store/apps/details?id=net.coding4ever.krpulsaelektrik      Berikut cuplikan beberapa screenshoot KR Pulsa Elektrik, untuk cara penggunaannya bisa Anda download di sini.                     Selamat MENCOBA :blush:  ","categories": ["Aplikasi","Android"],
        "tags": ["pulsa elektrik","pulsa elektronik","aplikasi pulsa android"],
        "url": "http://coding4ever.net/blog/2014/11/06/kr-pulsa-elektrik/",
        "teaser": null
      },{
        "title": "Blog Lama Coding4ever Aktif Kembali",
        "excerpt":"Blog lama coding4ever yang beralamat di http://coding4ever.wordpress.com/ saya aktifkan lagi dengan mode Read Only karena sudah banyak dokumentasi tanya jawabnya, agar pertanyaan yang sama tidak ditanyakan lagi di blog ini.  ","categories": ["Uncategorized"],
        "tags": ["coding4ever","blog"],
        "url": "http://coding4ever.net/blog/2015/04/11/blog-lama-coding4ever-aktif-kembali/",
        "teaser": null
      },{
        "title": "Membuat Laporan Crystal Reports .NET Dengan Model Data-Push",
        "excerpt":"Ketika memutuskan untuk menggunakan Crystal Reports‎ sebagai tool untuk membuat laporan, ada dua model yang bisa kita gunakan untuk menampilkan data.      Pull model – kita mengeset koneksi ke database, mengirimkan perintah SQL, menentukan filter dan sisanya akan langsung ditangani oleh Crystal Reports. Cara yang pertama ini adalah cara umum yang biasanya digunakan untuk menampilkan data, dan rata-rata tutorial yang beredar juga menggunakan cara ini.   Push model – dengan cara yang kedua ini kita membuat tabel temporary dengan menggunakan objek DataSet kemudian mengirimkan data dengan format DataSet, DataTable, IDataReader atau IEnumerable dan sisanya akan langsung ditangani oleh Crystal Reports.     Nah pada postingan kali ini kita akan menggunakan cara yang kedua yaitu Push Model dengan sumber datanya berupa object collection (IEnumerable).   Persiapan tool-tool yang akan digunakan :      Visual Studio Community 2013, Anda bisa saja menggunakan Visual Studio .NET versi sebelumnya (2010, 2012)   NuGet, untuk memudahkan dalam menambahkan library pihak ketiga. Adapun library pihak ketiga yang digunakan dalam sample ini adalah Dapper .NET dan System.Data.SQLite Core   Crystal Reports SP 13   Database SQLite   Tipe project WinForm   Untuk contoh postingan kali ini, kita hanya menggunakan satu buah tabel dengan struktur seperti berikut :      Setelah semua tool yang dibutuhkan tersedia kita lanjutkan dengan pembuatan project :           Buat project baru dengan type WinForm                          Tambahkan empat folder baru masing-masing dengan nama DataSet, Model, Dao dan Report              Folder DataSet digunakan untuk mengelompokkan item-item DataSet yang berfungsi sebagai tabel temporary, folder Model untuk mengelompokkan class-class model atau entity, folder Dao untuk mengelompokkan class-class akses database (Data Acces Object) dan terakhir folder Report untuk mengelompokkan item-item Crystal Reports.   Class Model/Entity   Untuk menerapkan konsep OOP (Object-oriented programming) dalam pemrograman database kita perlu membuat sebuah class yang disebut dengan istilah class Model atau Entity. Class ini merupakan representasi dari tabel-tabel yang ada di dalam database. Tujuan dari membuat class ini adalah agar kita bisa melakukan mapping (pemetaan) baris/row dari tabel menjadi kumpulan objek (object collection).   Pemetaan bisa dilakukan secara manual atau bisa juga secara otomatis dengan menggunakan tool-tool ORM dari pihak ketiga seperti Dapper .NET dan Entity Framework. Untuk contoh kali ini kita menggunakan Dapper .NET.      Setelah memahami apa itu class model dan bagaimana proses pemetaan record ke objek terjadi, langkah berikutnya adalah menambahkan class model Siswa yang mempunyai struktur sama persis dengan rancangan tabel di awal.   Untuk menambahkan class Model, klik kanan Project -&gt; Add -&gt; New Item…         Kemudian lengkapi kode class Siswa, seperti gambar berikut :      Class DAO (Data Access Object)   Class DAO adalah class yang bertugas untuk menangani operasi database yang dikenal dengan istilah operasi CRUD (Create, Read, Update dan Delete). Di dalam class inilah kita menuliskan perintah-perintah INSERT, UPDATE, DELETE dan SELECT. Sebagai contoh kode dibawah ini akan melakukan mapping (pemetaan) baris/row tabel menjadi kumpulan objek (object collection) secara otomatis.      Contoh pemanggilannya juga gampang :         DataSet   Dengan model data Push kita tidak langsung menghubungkan antara Crystal Reports dengan database, jadi sebagai solusinya kita menggunakan DataSet yang berfungsi sebagai tabel temporary dan menjadi sumber data bagi Crystal Reports.   Untuk menambahkan item DataSet, klik kanan Project -&gt; Add -&gt; New Item…         Setelah menambahkan item DataSet (DsSiswa), langkah berikutnya adalah menambahkan item DataTable      Kemudian input informasi DataTablenya seperti gambar berikut :      Khusus untuk nama field dan tipe data dari DataTable yang kita buat, harus disesuaikan dengan nama field dan tipe data tabel.      Crystal Reports   Crystal Reports adalah tool yang kita gunakan untuk membuat laporan. Untuk menambahkan item Crystal Report, klik kanan Project -&gt; Add -&gt; New Item…         Pilih “As a Blank Report” karena kita akan mendesain report secara manual.      Langkah berikutnya adalah menentukan sumber data yang kita arahkan ke item DataSet yang sudah kita buat pada langkah sebelumnya   Klik kanan Database Fields -&gt; Database Expert …      Pilih ADO.NET DataSet Siswa      Drag satu-satu field siswa (nis, nama dan alamat) ke section detail, kemudian dirapikan.         Crystal Report Viewer   Setelah semua persiapan selesai, langkah berikutnya adalah menambahkan Crystal Report Viewer yang berfungsi sebagai container untuk untuk menampilkan report.   Aktifkan form kemudian tambahkan Crystal Report Viewer      Kemudian tambahkan kode berikut :      Dari kode di atas kita bisa melihat tidak ada lagi kode untuk mengeset koneksi database dan perintah SQL yang akan dikirimkan. Cara ini sangat cocok digunakan ketika kita akan membangun sistem dengan arsitektur N-Tier, di mana aplikasi klien sudah tidak terkoneksi lagi secara langsung ke database.   Jika kode di atas dijalankan, akan menghasilkan output seperti gambar di bawah ini.      Selamat MENCOBA :blush:  ","categories": ["Visual C#","Crystal Reports .NET"],
        "tags": ["ORM","Dapper .NET","Entity Framework","N-Tier","SQLite","Crystal Reports .NET","Push model"],
        "url": "http://coding4ever.net/blog/2015/04/12/membuat-laporan-crystal-reports-net-dengan-model-data-push/",
        "teaser": null
      },{
        "title": "Comment as a Guest",
        "excerpt":"Blog ini dibangun di atas static blogging framework Octopress Jekyll dan untuk berinteraksi dengan pengunjung saya menggunakan layanan Disqus.   Jika sebelumnya Anda harus menjadi anggota dari Disqus untuk memberikan komentar, mulai sekarang Anda sudah bisa memberikan komentar tanpa harus mendaftar di Disqus.     Caranya adalah pada saat memberikan komentar, Anda aktifkan pilihan I’d rather post as gues.      Untuk informasi email, sebaiknya Anda isikan dengan benar jika ingin mendapatkan notifikasi ketika saya me-replay pesan Anda.   Selamat mencoba :blush:  ","categories": ["Uncategorized"],
        "tags": ["disqus","Comment as a Guest"],
        "url": "http://coding4ever.net/blog/2015/04/13/comment-as-a-guest/",
        "teaser": null
      },{
        "title": "Paket NuGet yang Wajib dicoba Bagian #1 - CrashReporter.NET",
        "excerpt":"Apakah Anda percaya jika saya katakan aplikasi saya 100% bebas bug, tentu saja tidak. Seberapa keraspun kita mencoba pasti aplikasi yang kita buat ada bugnya.   Secara teknis kita tidak bisa melakukan pengetesan sebaik yang dilakukan oleh end-user. Mereka bisa melakukan hal-hal luar biasa diluar perkiraan dan skenario kita yang bisa menyebabkan error, dan bisa saja menyebabkan mereka menjadi ilfil menggunakan aplikasi kita he he :grin:     Yang jelas, kita tidak dapat memperbaiki bug sampai kita tahu penyebabnya, sayangnya end-user biasanya kurang bisa menjelaskan masalah ini dengan baik.   CrashReporter.NET adalah salah satu library gratis yang bisa menjadi solusi untuk masalah ini dengan konfigurasi mudah dan bisa mengirimkan laporan bug via email.   Menambahkan Library CrashReporter.NET   Untuk menambahkan library CrashReporter.NET bisa kita lakukan via NuGet Package Manager. Adapun caranya seperti berikut :   Langkah – 1   Klik kanan node References -&gt; Manage NuGet Packages...      Langkah – 2   Cari CrashReporter.NET dan klik tombol Install      Klik tombol Close, kemudian cek node References, seharusnya sudah ada tambahan library CrashReporter.NET      Cara Penggunaan Library CrashReporter.NET   Ada dua cara untuk menggunakan CrashReporter.NET   1. Global Exception   Jika kita ingin semua exception dihandle oleh CrashReporter.NET, gunakan opsi ini. Caranya adalah dengan menambahkan kode konfigurasi di Main Method (Entry point dari program yang akan dijalankan pertama  kali).      2. Individual Exception   Untuk opsi yang kedua ini berarti kita menambahkan kode konfigurasi hanya pada method-method tertentu saja yang kita anggap berpotensi menimbulkan error.      Dua contoh kode di atas menggunakan class ReportCrashConfig yang kita bahas di bagian konfigurasi CrashReporter.NET.   Konfigurasi CrashReporter.NET   Untuk melakukan konfigurasi CrashReporter.NET, cukup membuat objek dari class ReportCrash dan mengeset beberapa nilai property seperti FromEmail, ToEmail, dan property penting lainnya.      Secara default CrashReporter.NET  menggunakan service Doctor Dump, untuk mengirimkan email laporan bug ke email yang sudah kita tentukan melalui property ToEmail.   Jika kita ingin menggunakan email sendiri untuk mengirim laporan bug, berarti kita harus menyiapkan dua email misal dengan nama pengirim.bug@gmail.com dan penerima.bug@gmail.com yang masing-masing kita set untuk nilai property FromEmail, ToEmail dan  kemudian mengeset nilai property AnalyzeWithDoctorDump = false. Dan jangan lupa set property UserName = FromEmail, untuk Password email menyesuaikan dengan FromEmail.   Agar kode konfigurasi di atas bisa digunakan berulang-ulang, mungkin bisa kita bungkus ke dalam sebuah class tersendiri.      Sehingga ketika diperlukan kita cukup memanggilnya dengan perintah new ReportCrashConfig(object exception)   Demo CrashReporter.NET      Untuk demo disini kita akan memanfaatkan dua jenis error yaitu DivideByZeroException dan FileNotFoundException.   DivideByZeroException            FileNotFoundException            Selamat MENCOBA :blush:  ","categories": ["NuGet","Visual C#","CrashReporter.NET"],
        "tags": ["Bug","Error","Crash Report","Exception","NuGet"],
        "url": "http://coding4ever.net/blog/2015/04/14/paket-nuget-yang-wajib-dicoba-bagian-number-1-crashreporter-dot-net/",
        "teaser": null
      },{
        "title": "Membuat Jadwal Backup Database Otomatis",
        "excerpt":"Backup database merupakan salah satu hal penting, apalagi jika kita bekerja sebagai database administrator.   Semakin banyaknya data-data yang tersimpan seperti data keuangan, akademik dan data penting lainnya mengharuskan kita untuk meluangkan waktu khusus untuk melakukan backup database.   Backup secara manual tentu saja tidak disarankan, apalagi jika datanya sudah banyak, tentu saja sedikit banyaknya akan menyita waktu kita untuk melakukan hal penting lainnya.     Salah satu keuntungan menggunakan backup otomatis adalah, kita bisa mengset jadwal backup diluar jam-jam kantor. Misal jam 5 sore, jam 12 malam atau jam lainnya sesuai dengan kebutuhan.   Database MySQL   Adapun database yang kita gunakan untuk simulasi backup otomatis ini adalah database MySQL. Untuk membackup database MySQL kita bisa gunakan tool bawaan MySQL yaitu mysqldump.   Adapun perintahnya seperti berikut :   ' backup mysqldump -uUSER_NAME -pUSER_PASSWORD --routines NAMA_DATABASE &gt; LOKASI_FILE_BACKUP.SQL  Parameter –routines ditambahkan jika database mempunyai fungsi/trigger.   Karena data backupnya yang disimpan lebih dari satu, untuk nama database akan kita buat unik dengan format : nama_database-tahun-bulan-hari_jam_menit. Contoh :      Untuk mendapatkan informasi tahun, bulan, hari dan jam, kita bisa memanfaatkan batch command dengan perintah seperti berikut :   for /f \"tokens=2-4 delims=/ \" %%a in ('date /T') do set year=%%c for /f \"tokens=2-4 delims=/ \" %%a in ('date /T') do set month=%%a for /f \"tokens=2-4 delims=/ \" %%a in ('date /T') do set day=%%b   for /f \"tokens=1 delims=: \" %%h in ('time /T') do set hour=%%h for /f \"tokens=2 delims=: \" %%m in ('time /T') do set minutes=%%m for /f \"tokens=3 delims=: \" %%a in ('time /T') do set ampm=%%a   rem membuat file backup database dengan format nama_database-tahun-bulan-hari_jam_menit set FILE_BACKUP=D:\\backup\\Chinook-%year%-%month%-%day%_%hour%-%minutes%-%ampm%   rem USER_NAME, USER_PASSWORD dan NAMA_DATABASE menyesuaikan mysqldump -uroot -prahasia --routines Chinook &gt; %FILE_BACKUP%.sql  Setelah itu kode di atas kita simpan di folder Instalasi MySQL\\bin, misal dengan nama backup.cmd.      Windows Task Scheduler   Agar file backup.cmd ini bisa dijalankan secara berulang-ulang dan otomatis, kita bisa memanfaatkan tool yang sudah tersedia di Windows yaitu ` Windows Task Scheduler`.   Untuk mengakses tool ini bisa dilakukan melalui menu Start -&gt; Accessories -&gt; System Tools -&gt; Task Scheduler      Berikut langkah-langkah untuk menambahkan task baru.           Klik Create Basic Task di panel Actions  Kemudian isikan informasi Name dan Description kemudian klik tombol Next                   Di dialog berikutnya kita akan menentukan kapan task ini akan di eksekusi. Contoh jika task ini akan dieksekusi setiap hari kita pilih Daily.                   Berikutnya kita akan menentukan jam berapa task ini akan dieksekusi        Pada gambar di atas, task ini akan dieksekusi setiap jam 5 sore.            Berikutnya kita akan menentukan apa yang akan dilakukan task ini, ketika dieksekusi. Sebagai contoh task ini akan menjalankan file backup.cmd yang tersimpan di folder bin MySQL         Di bagian Program/script kita tentukan nama file backup.cmd, sedangkan untuk Start in kita tentukan lokasi/folder file backup.cmd            Terakhir klik tombol Finish             Untuk mencoba apakah backup berjalan dengan baik, klik kanan nama task Backup Database Chinook -&gt; Run         Selamat mencoba :blush:  ","categories": ["Database","MySQL"],
        "tags": ["Backup","Database","MySQL","Task Scheduler","batch file","batch command"],
        "url": "http://coding4ever.net/blog/2015/04/30/membuat-jadwal-backup-database-otomatis/",
        "teaser": null
      },{
        "title": "Tutorial WCF Service Bagian #1",
        "excerpt":"Apa itu WCF   WCF singkatan dari Windows Communication Foundation, merupakan salah satu teknologi Microsoft untuk membangun aplikasi berbasis layanan (service-oriented applications). Dengan kata lain WCF itu merupakan salah satu alternatif untuk membangun web service dan sistem terdistribusi lainnya menggunakan teknologi Microsoft .NET.      Dalam tutorial ini kita akan lebih banyak membahas hal-hal teknis untuk membuat web service menggunakan WCF. Untuk referensi lebih lanjut mengenai WCF bisa langsung Anda cari menggunakan layanan search engine favorit Anda :blush:      WCF merupakan gabungan dari beberapa teknologi RPC lainnya seperti Web Service, .NET Remoting, MSMQ dan COM+      Sumber - WCF Tutorial{: .text-center}   Sebagai langkah awal kita akan membuat aplikasi sederhana yang akan menerapkan teknologi WCF. Aplikasi yang akan kita buat yaitu Calculator, walaupun sederhana tetapi aplikasi ini membutuhkan 3 project untuk membuatnya.           CalculatorLib – Project CalculatorLib dibuat dengan memanfaatkan project bertipe Class Library yang isinya hanya berupa interface ICalculator dengan 4 buah method abstract yaitu : Penambahan, Pengurangan, Perkalian dan Pembagian.              Project ini nantinya akan dicompile menjadi file dengan ekstensi .dll (CalculatorLib.dll), file CalculatorLib.dll ini akan dishare atau ditambahkan sebagai referensi untuk aplikasi CalculatorServer dan CalculatorClient.       Teknik ini dikenal dengan istilah Shared Assembly tujuannya adalah agar aplikasi server dan klien bisa berkomunikasi dengan cara yang sama.            CalculatorServer – Project CalculatorServer dibuat dengan memanfaatkan project bertipe Class Library. Project ini akan dicompile menjadi file dengan ekstensi .dll (CalculatorServer.dll).       Project ini nantinya akan mengimplementasikan semua method-method abstract dari project CalculatorLib.              Agar class ini (CalculatorServer.dll) bisa dikenali sebagai WCF service, kita perlu meng-host-kannya terlebih dulu dengan beberapa cara yaitu :              Hosting in Internet Information Services(IIS)       Hosting in Windows Activation Services(WAS)       Hosting in a Console or Desktop application(Self hosting)       Hosting in a Windows Service                    CalculatorClient – Project CalculatorClient dibuat dengan memanfaatkan project bertipe Windows Application, aplikasi ini hanya memanggil method-method abstract dari project CalculatorLib dengan memanfaatkan objek proxy sehingga method tersebut akan dieksekusi secara remote (dijalankan di sisi server).              Sumber - Top WCF Tutorial       Berikut gambaran lengkap project yang akan kita buat              Oke kita sudahi dulu obrolannya dan kita langsung saja mulai dengan pembuatan project CalculatorLib, jangan lupa untuk mengaktifkan terlebih dulu Visual Studio .NET Anda.   Membuat Project CalculatorLib           Klik menu File -&gt;New -&gt; Project …            Pada dialog New Project aktifkan pilihan Visual C# kemudian pada pilihan Templates pilih Class Library              Pada isian Name isikan CalculatorLib, setelah itu klik tombol Ok.       Secara default pada saat pembuatan project sudah otomatis disediakan 1 buah class kosong dengan nama Class1, karena kita akan menambahkan class baru jadi class ini dihapus saja.              Menambahkan Interface ICalculator           Klik kanan project CalculatorLib -&gt; Add -&gt; New Item…                   Pada dialog add new item, pilih Interface dan untuk isian Name diisi ICalculator              Setelah itu akan tampil editor code interface ICalculator              Jangan lupa untuk menambahkan access modifier public.       Selanjutnya kita tinggal menambahkan 4 method abstractnya yaitu Penambahan, Pengurangan, Perkalian dan Pembagian.       Berikut kode lengkapnya :              Jika kita perhatikan kode di atas, ada tambahan attribute ServiceContract dan OperationContract pada nama interface dan method abstractnya.       ServiceContract memberikan informasi service/layanan apa saja yang tersedia untuk bisa diakses sedangkan OperationContract  digunakan untuk memberikan tanda bahwa method tersebut merupakan operasi atau bagian dari ServiceContract.       Bagaimana jika kita lupa menambahkan attribut ServiceContract dan OperationContract ? Ya otomatis interface ICalculator berikut method tidak bisa diakses oleh client.       Untuk menambahkan attribut ServiceContract dan OperationContract kita perlu menambahkan referensi System.ServiceModel.              Kemudian mendaftarkannya di bagian using              Mengcompile project CalculatorLib   Tujuannya adalah agar project CalculatorLib ini bisa digunakan sebagai referensi oleh aplikasi CalculatorServer dan CalculatorClient           Klik kanan project CalculatorLib -&gt; Build              Setelah itu akan tampil hasil output dari proses Build              Yuph cukup sampai disini, insya Alloh akan kita lanjutkan pada kesempatan berikutnya.   Selamat MENCOBA :blush:  ","categories": ["WCF","Visual C#"],
        "tags": ["wcf","web service","ServiceContract","OperationContract","proxy"],
        "url": "http://coding4ever.net/blog/2015/05/02/tutorial-wcf-service-bagian-number-1/",
        "teaser": null
      },{
        "title": "Tutorial WCF Service Bagian #2",
        "excerpt":"Melanjutkan pembahasan postingan sebelumnya yaitu tentang pembuatan web service menggunakan teknologi WCF.   Kita sudah menyelesaikan project pertama yaitu pembuatan project CalculatorLib dan kita lanjutkan dengan pembuatan project CalculatorServer.     Sebagai review CalculatorServer adalah project yang akan mengimplementasikan semua method abstract yang ada pada interface ICalculator (project CalculatorLib selain itu project CalculatorServer juga akan kita hostkan sehingga bisa menjadi web service. Apa yang dimaksud dengan host disini, silahkan baca postingan Tutorial WCF Service Bagian #1.   Aktifkan kembali solution Calculator yang di dalamnya sudah ada project CalculatorLib.      Kita akan menambahkan project CalculatorServer masih di solution yang sama   Menambahkan Project CalculatorServer           Klik kanan Solution Calculator -&gt; Add -&gt; New Project                   Pada dialog Add New Project aktifkan pilihan Visual C# kemudian pilih Templates Class Library              Pada isian Name isikan CalculatorServer untuk isian Location dibiarkan saja setelah itu klik Ok. Jika langkah sebelumnya berhasil maka pada solution Calculator akan ketambahan 1 project baru yaitu CalculatorServer.              Kemudian hapus class Class1              Menambahkan Class Calculator   Class Calculator adalah class yang akan mengimplementasikan semua method abstract dari interface ICalculator yang sudah kita buat pada project sebelumnya (CalculatorLib).           Klik kanan project CalculatorServer -&gt; Add -&gt; Class…              Pada isian Name diisi Calculator              Setelah itu akan tampil editor code class Calculator              Jangan lupa untuk menambahkan access modifier public.       Sebelum kita melengkapi kode class Calculator di atas, terlebih dulu kita harus menambahkan referensi CalculatorLib yang sudah kita buat pada project sebelumnya, tujuannya adalah agar class Calculator bisa mengakses interface ICalculator dan mengimplementasikan semua method abstractnya.            Klik kanan node References -&gt; Add Reference…                   Aktifkan panel Solution kemudian pilih project CalculatorLib              Jika langkah sebelumnya berhasil akan ketambahan 1 buah node dengan nama CalculatorLib pada node References              Selanjutnya kita lengkapi kode class Calculator di atas, seperti di bawah ini.              Sampai disini kita sudah bisa mencoba untuk meng-compile project CalculatorServer dengan cara klik kanan project CalculatorServer -&gt; Build              Apa yang terjadi ??? Masih error bukan ?              Error ini terjadi karena class Calculator mengimplementasikan interface ICalculator sedangkan method-method abstractnya (Penambahan, Pengurangan, Perkalian dan Pembagian) belum kita definisikan ulang / override di class Calculator.       Mengimplementasikan Method Abastract Interface ICalculator secara Otomatis   Untuk mengatasi error pada langkah sebelumnya kita tinggal klik kanan pada tulisan interface ICalculator -&gt;Implement Interface -&gt; Implement Interface      Kemudian secara otomatis semua implementasi method abstract dari interface ICalculator akan ditambahkan.      Setelah itu kita tinggal melengkapi kode untuk masing-masing method diatas.      Sekarang kita coba lagi untuk meng-compile ulang project CalculatorServer dengan cara klik kanan project CalculatorServer -&gt; Build         WCF Service Behavior   WCF service behavior digunakan untuk mengatur behavior atau prilaku WCF service ketika menangani request atau permintaan dari klien.   Jika kita mempunyai behavior atau tingkah laku yang baik, otomatis kita juga bisa menjadi orang yang lebih baik, benar atau tidak ? :grin:   Begitu juga dengan WCF Service Behavior, dengan attribut ini kita bisa mengatur hal-hal yang berhubungan dengan :      Concurrency   Throttling   Transaction   Instance Context/Session Management   Thread Behavior   Untuk informasi yang lebih lengkap tentang WCF Service Behavior, silahkan baca artikel Implementing WCF Service Behaviors dan WCF Concurrency (Single, Multiple, and Reentrant) and Throttling.   Sebagi contoh kita akan mengeset behavior untuk Concurrency dan Instance Context dengan model Concurrency = Single dan Instance Context = Per Call via attribute WCF service behavior.   Untuk menggunakan attribute WCF service behavior, tambahkan terlebih dulu referensi System.ServiceModel      Kemudian tambahkan juga di bagian using      Setelah itu revisi class Calculator menjadi seperti berikut :      Yuph sampai disini saja untuk postingan kali ini, insyaAlloh akan kita lanjutkan pada kesempatan berikutnya.   Selamat MENCOBA :blush:  ","categories": ["WCF","Visual C#"],
        "tags": ["wcf","web service"],
        "url": "http://coding4ever.net/blog/2015/05/09/tutorial-wcf-service-bagian-number-2/",
        "teaser": null
      },{
        "title": "Tutorial WCF Service Bagian #3",
        "excerpt":"Web service itu seperti parasit, tidak bisa hidup mandiri sehingga membutuhkan sebuah wadah (host) untuk kelangsungan hidupnya. Begitu juga dengan web service yang dibuat menggunakan WCF tetap membutuhkan sebuah wadah (host).     Ada beberapa cara yang bisa digunakan untuk menempatkan web service ke dalam wadahnya (host) yaitu :      Hosting in Internet Information Services (IIS)   Hosting in Windows Activation Services (WAS)   Hosting in a Console or Desktop application (Self hosting)   Hosting in a Windows Service   Kita akan menggunakan cara yang pertama yaitu, hosting WCF service di IIS, berikut langkah-langkahnya :   1. Install Internet Information Services (IIS)   Untuk langkah-langkahnya bisa Anda ikuti disini   2. Membuat Folder Baru di wwwroot   Tambahkan folder baru di C:\\ C:\\inetpub\\wwwroot, dengan nama Calculator, kemudian tambahkan juga folder bin di dalamnya      Folder wwwroot sama seperti folder htdocs-nya Apache.   3. Build Project CalculatorServer   Aktifkan kembali project Calculator, kemudian lakukan proses Build project CalculatorServer      Cek hasil build di bagian Output      Kemudian buka folder hasil build      Di dalamnya ada dua file dengan tipe DLL yaitu CalculatorLib.dll dan CalculatorServer.dll. File CalculatorLib.dll di hasilkan dari project CalculatorLib sedangkan file ` CalculatorServer.dll dihasilkan dari project CalculatorServer`      Dua file ini akan kita copykan ke folder C:\\inetpub\\wwwroot\\Calculator\\bin      4. Membuat File Text dengan Format .svc   File .svc merupakan file text biasa yang mirip dengan file .asmx (ASP.NET web service). Dengan kata lain WCF service yang di-host-kan ke dalam IIS direpresentasikan oleh sebuah file khusus dengan format .svc.   File ini berisi informasi agar WCF service bisa berjalan dengan sukses. Adapun informasinya terdiri dari :      Pilihan bahasa (C# atau VB)   Nama service (namaspace + class)   Lokasi kode service   Contoh isi file .svc   &lt;%@ ServiceHost Language=\"C#\" Service=\"CalculatorServer.Calculator\" %&gt;  Setelah mengetahui fungsi dari file .svc, berikutnya kita akan membuat file .svc dengan nama ServiceCalculator.svc di folder C:\\inetpub\\wwwroot\\Calculator      Kemudian copas skrip berikut :   &lt;%@ ServiceHost Language=\"C#\" Service=\"CalculatorServer.Calculator\" %&gt;     Dari skrip di atas, coba perhatikan bagian Service=\"CalculatorServer.Calculator\"   CalculatorServer adalah nama namespace, sedangkan Calculator adalah nama class servicenya. Informasi ini kita dapatkan dari struktur project CalculatorServer      5. Membuat File web.config   File web.config adalah file xml yang berisi konfigurasi dari aplikasi web berbasis ASP.NET. Karena WCF service ini akan kita host-kan ke dalam IIS, jadi kita juga perlu membuat file web.config untuk menyimpan konfigurasi dari web service.   File web.config  ini akan kita buat di folder C:\\inetpub\\wwwroot\\Calculator, satu folder dengan file ServiceCalculator.svc      Kemudian copas skrip berikut     Dari skrip di atas, coba perhatikan bagian &lt;services&gt;     Di bagian ini kita mendaftarkan service apa saja yang bisa diakses oleh aplikasi klien.      Service name = diisi dengan nama service   Contract = diisi dengan interface dari nama service      Di dalam WCF, bagian ini dikenal dengan istilah EndPoint, dan berhubung di postingan ini tidak membahas masalah EndPoint, sebagai referensi bisa Anda baca disini.   6. Mendaftarkan Service Calculator ke IIS   Sebagai langkah terakhir, kita aktifkan Internet Information Services(IIS), kemudian expand node Sites -&gt; Default Web Site      Kemudian klik kanan Calculator -&gt; Convert to Application      Setelah itu akan tampil window Add Application kemudian klik tombol Select      Pilih ASP.NET v4.0         Jika berhasil icon folder Calculator akan berganti menjadi      7. Testing Web Service Calculator   Untuk mengetes apakah service Calculator ini berjalan dengan sukses, silahkan akses alamat : http://localhost/Calculator/ServiceCalculator.svc   Seharusnya anda mendapatkan tampilan seperti berikut yang menandakan konfigurasi WCF service berhasil.      Tampilan jika diakses dari WCF Test Client      Yuph sampai disini saja untuk postingan kali ini, insyaAlloh akan kita lanjutkan pada kesempatan berikutnya.   Selamat MENCOBA :blush:   ","categories": ["WCF","Visual C#"],
        "tags": ["wcf","web service","IIS","Internet Information Services","Windows Activation Services","Windows Service"],
        "url": "http://coding4ever.net/blog/2015/06/05/tutorial-wcf-service-bagian-number-3/",
        "teaser": null
      },{
        "title": "Tutorial WCF Service Bagian #4",
        "excerpt":"Postingan kali ini masih melanjutkan pembahasan tentang pembuatan web service menggunakan WCF, tapi sebelum kita melanjutkan pembahasan ada baiknya kita melakukan sedikit review.        Pembahasan secara umum apa itu WCF, dan project apa saja yang harus kita persiapkan untuk mengimplementasikannya sudah kita bahas di bagian #1   Di bagian #2 kita membuat project server yang mengimplementasikan service-service apa saja yang tersedia untuk bisa diakses oleh aplikasi klien   Agar semua service ini bisa diakses oleh klien, kita perlu sebuah wadah/host untuk menjalankan web service, ini juga sudah kita bahas di bagian #3   Berarti sekarang waktu yang tepat untuk mengetes apakah web service yang sudah kita buat berfungsi dengan baik atau belum.   Ada banyak cara untuk mengetes web service yang dibuat menggunakan WCF, kita akan bahas dua di antaranya yaitu :      Tes Menggunakan Aplikasi WCF Test Client   Tes Menggunakan Aplikasi Buatan Sendiri   1. Tes Menggunakan Aplikasi WCF Test Client   Secara default pada saat kita menginstall Visual Studio .NET, installer tidak membuat shortcut untuk aplikasi WCF Test Client, sehingga kita perlu menjalankannya secara manual di lokasi berikut :   C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\Common7\\IDE\\WcfTestClient.exe  Lokasi di atas harus disesuaikan dengan versi Visual Studio .NET Anda.   Berikut adalah tampilan aplikasi WCF Test Client      Untuk menambahkan url/link web service, klik menu File -&gt; Add Service …, setelah itu inputkan link web service      Contoh link di atas kita dapatkan dari postingan sebelumnya.   Jika berhasil akan tampil di panel sebelah kiri daftar service dari ServiceCalculator.      Dari mana datangnya nama-nama service di atas seperti Penambahan dan Pengurangan ? Nama-nama service di atas di generate berdasarkan nama-nama method abstract yang ada di project CalculatorLib      Berikutnya kita akan tes salah satu service, misal service Penambahan. Caranya adalah dengan mengklik ganda nama service Penambahan.      Setelah itu di panel sebelah kanan akan tampil form yang inputannya sesuai dengan parameter dari service Penambahan.         Langsung saja kita masukan nilai a dan b-nya, kemudian klik tombol Invoke      Dari hasil tes di atas kita bisa lihat bahwa service Penambahan berfungsi dengan benar karena penambahan nilai 5 + 2 menghasilkan 7.   2. Tes Menggunakan Aplikasi Buatan Sendiri   Setelah tes menggunakan aplikasi WCF Test Client berhasil, kita akan mencoba membuat aplikasi sendiri untuk mengakses WCF web service dan untuk menyederhanakan contoh program, kita hanya membuat aplikasi berbasis console. Tapi sebelumnya aktifkan kembali solution Calculator yang di dalamnya sudah ada project CalculatorLib dan CalculatorServer.      Kita akan menambahkan project CalculatorClient masih di solution yang sama   Menambahkan project CalculatorClient           Klik kanan Solution Calculator -&gt; Add -&gt; New Project                   Pada dialog Add New Project aktifkan pilihan Visual C# kemudian pilih Templates Class Library              Pada isian Name isikan CalculatorClient untuk isian Location dibiarkan saja setelah itu klik Ok. Jika langkah sebelumnya berhasil maka pada solution Calculator akan ketambahan 1 project baru yaitu CalculatorClient.              Kemudian klik ganda class Program, setelah itu akan tampil editor code class Program      Sampai di sini kita akan menambahkan sebuah method dengan nama GetHttpProxy. Sesuai namanya method GetHttpProxy berfungsi untuk mengenerate objek proxy.   Apa itu objek proxy ? Objek proxy merupakan representasi dari service contract sehingga objek proxy mempunyai operasi yang sama dengan service contract. Selain itu semua method yang dipanggil melalui objek proxy akan dieksekusi secara remote (dijalankan di sisi server)      Sumber - Top WCF Tutorial{: .text-center}   Berikut adalah kode dari method GetHttpProxy      Agar method GetHttpProxy di atas berfungsi dengan baik, kita juga harus menambahkan referensi System.ServiceModel      Kemudian mendaftarkannya di bagian using      Selain itu kita juga perlu  menambahkan referensi ‘CalculatorLib`      Dan mendaftarkannya dibagian using      Kenapa perlu menambahkan referensi CalculatorLib, karena kita akan mengakses interface ICalculator dan method-method abstractnya melalui method GetHttpProxy   Setelah semua persiapan kode selesai, kita tinggal melengkapi method Main yang di dalamnya kita memanggil url/link web service melalui method GetHttpProxy.      Jika kode di atas dijalankan akan menghasilkan output seperti berikut      Selamat MENCOBA :blush:  ","categories": ["WCF","Visual C#"],
        "tags": ["wcf","web service","Service Contract","proxy"],
        "url": "http://coding4ever.net/blog/2015/06/20/tutorial-wcf-service-bagian-number-4/",
        "teaser": null
      },{
        "title": "Cara Mudah Mengelola Versi Aplikasi",
        "excerpt":"Oke jadi ceritanya seperti ini, saya punya kebiasaan dan saya enggak tau apakah ini kebiasaan baik atau buruk :grin:   Untuk menerapkan konsep separation of concerns dalam pengembangan aplikasi, saya biasanya memisahkan modul-modul aplikasi menjadi beberapa project (satu solution dengan banyak project/assemblies). Contoh :        Dari gambar di atas klo kita build akan menghasilkan beberapa file assembly seperti berikut :      Kebiasaan saya yang lain adalah setiap assembly, apakah itu berupa file dll atau exe, harus mempunyai versi yang sama. Misalkan kalo rilis pertama, saya set versinya = 1.0.0 maka semua assembly-nya harus punya versi yang sama.      Klo rilis berikutnya versinya = 1.2.0, maka semua versi assembly-nya juga harus sama      Kan jadi enggak lucu klo versi assembly-nya ada yang beda he he :grin:      Merubah Versi Assembly   Kalo cara biasa, misal kita punya empat project, berarti kita juga harus merubah versi assembly di empat lokasi yang berbeda      Dari gambar di atas kita bisa melihat informasi versi assembly tersimpan di file AssemblyInfo.cs masing-masing project. Klo penasaran ini nih isinya he he :grin:      Nah ini yang sedikit merepotkan dan kadang-kadang sedikit melelahkan :grin:, sudah dibuild eh ada assembly yang lupa diganti versinya, jadi build ulang deh he he :grin:   Trus solusinya gimana ? Cara yang saya gunakan adalah dengan membuat Global Version misal dengan nama VersionInfo. File ` VersionInfo ini merupakan file dari Solution` jadi scopenya sama dengan project.      Nah untuk menambahkan file VersionInfo di atas caranya juga gampang, berikut langkah-langkahnya :           Klik kanan Solution -&gt; Add -&gt; New Item…                   Pilih item Visual C#/Basic Class                   Jika berhasil file VersionInfo akan tersimpan di folder Solution Items              Kemudian hapus semua isi file ` VersionInfo`                   Setelah itu copy sebagian informasi salah satu file AssemblyInfo.cs ke VersionInfo                   Kemudian edit sebagian isi file AssemblyInfo.cs masing-masing project (cek yang ada komentar // di nonaktifkan)                   Terakhir masing-masing project menambahkan link ke file VersionInfo                       Klik kanan Project -&gt; Add -&gt; Existing Item…                                   Pilih file VersionInfo kemudian Add As Link                                         Kemudian ulangi langkah-langkah sebelumnya untuk menambahkan link file VersionInfo ke project lainnya              Nah Sampai di sini tugas kita sudah selesai, sehingga ketika ada perubahan versi kita cukup merubah di satu file yaitu file VersionInfo yang ada di Solution Items.         Selamat mencoba :blush:   Referensi :      The Right Way to Version Your Assemblies  ","categories": ["Visual C#"],
        "tags": ["separation of concerns","assembly","AssemblyInfo"],
        "url": "http://coding4ever.net/blog/2015/06/23/cara-mudah-mengelola-versi-aplikasi/",
        "teaser": null
      },{
        "title": "The Power of Visual Studio .NET Build Events Part #1",
        "excerpt":"Build Events merupakan salah fitur menarik yang dimiliki oleh Visual Studio.NET, dengan fitur ini akan membuat hidup kita sebagai software developer semakin mudah :grin:   Saya sendiri menggunakan fitur ini untuk melakukan proses copy file (exe, dll, config) secara otomatis setelah proses build project, tetapi bukan itu saja dengan fitur ini kita juga bisa menjalankan perintah tertentu seperti batch command atau perintah lainnya sesuai kebutuhan seperti  mengupload library hasil build web service ke server IIS atau mengeksekusi skrip installer seperti Inno Setup dan NSIS.     Build Events   Build Events merupakan salah satu fitur dari Visual Studio .NET yang bisa diaktifkan melalui Project -&gt; Properties         Build Events mempunyai dua event yaitu Pre-build event dan Post-build event sesuai  namanya pre di jalankan sebelum proses build dan post setelah proses build.   Dialog Build Events   Dialog Build Events merupakan tempat untuk menuliskan perintah sesuai dengan yang kita inginkan.      Dialog Build Events juga menyediakan Macros yang di dalamnya terdapat daftar variabel bawaan (built-in) yang bisa digunakan pada saat menuliskan perintah build-event.      Kita bisa menambahkan macros dengan cara klik ganda item macros. Pemanggilan nama macros menggunakan format $(xxx), dimana xxx adalah nama macros. Contoh :      Pada saat perintah build-event dijalankan macros ini akan diganti dengan nilai aslinya (nilai aktual). Contoh berdasarkan gambar di atas $(SolutionDir) nilainya akan diganti dengan D:\\Postingan coding4ever\\coding4ever\\c#\\KRSchool.   Jadi ketika kita menuliskan perintah   copy /Y \"$(TargetDir)KRSchool.*.dll\" \"$(SolutionDir)Rilis\"  Sama artinya kita menuliskan   copy /Y \"D:\\Postingan coding4ever\\coding4ever\\c#\\KRSchool\\KRSchool.UI.Main\\bin\\Debug\\KRSchool.*.dll\" \"D:\\Postingan coding4ever\\coding4ever\\c#\\KRSchool\\Rilis\"     Berikut adalah daftar lengkap macros yang disediakan oleh Visual Studio .NET      Untuk kolom Value nilainya akan menyesuaikan dengan lokasi solution Anda.   Menggunakan Post-Build Events   Saya biasanya menggunakan post-build events untuk keperluan mengcopy hasil build project ke folder tertentu, dari pada mengcopy manual dari folder bin\\Debug atau bin\\Release. Folder tertentu ini misalnya C:\\Rilis, maka kita bisa mengetikan peritah berikut :      Macro TargetDir ini nilainya tergantung dari setting Configuration Manager, apakah di set Debug atau Release      Setelah itu lakukan proses build -&gt; project, maka semua file dll atau exe yang ada di folder bin\\Debug atau bin\\Release akan dicopykan ke folder C:\\Rilis            Selamat mencoba :blush:  ","categories": ["Visual Studio .NET","Build Events"],
        "tags": ["Visual Studio .NET","Build Events","pre-build","post-build","macros","inno setup","nsis"],
        "url": "http://coding4ever.net/blog/2015/06/25/the-power-of-visual-studio-net-build-events-part-number-1/",
        "teaser": null
      },{
        "title": "The Power of Visual Studio .NET Build Events Part #2",
        "excerpt":"Melanjutkan pembahasan postingan sebelumnya yaitu tentang fitur Build Events yang dimiliki oleh Visual Studio .NET.   Di postingan bagian #1 kita memanfaatkan fitur ini untuk melakukan proses copy file (exe, dll, config) secara otomatis setelah proses build project selesai.   Nah di postingan kali ini kita akan menambahkan perintah untuk mengcompile skrip Inno Setup sehingga proses pembuatan paket installer pun jadi otomatis.     Inno Setup   Inno Setup adalah salah satu software favorit untuk membuat paket installer berbasis windows. Selain gratis software ini juga didukung oleh dokumentasi yang lengkap sehingga memudahkan kita untuk mempelajarinya. Saya juga ada menulis beberapa postingan tentang Inno Setup yang bisa anda baca disini.   Jadi untuk melanjutkan pembahasan ini, saya mengasumsikan Anda sudah pernah menggunakan Inno Setup untuk membuat paket installer.   Untuk membuat skrip Inno Setup itu gampang, contohnya seperti berikut :   [Setup] AppName={code:GetAppName} AppVerName={code:GetAppName} Versi {code:GetAppVersion} AppPublisher={code:GetVendorName} AppVersion={code:GetAppVersion} AllowCancelDuringInstall = yes DefaultDirName={pf}\\KRSchool DefaultGroupName={code:GetAppName} Compression = lzma SolidCompression = yes OutputBaseFilename=SetupKRSchool AllowNoIcons = yes AlwaysRestart = no AlwaysShowComponentsList = no DisableProgramGroupPage = yes AppendDefaultDirName = yes CreateUninstallRegKey = yes DisableStartupPrompt = yes LanguageDetectionMethod=none ShowLanguageDialog=no UsePreviousLanguage=no Uninstallable = yes UninstallFilesDir={app}\\uninst UninstallDisplayIcon={app}\\KRSchool.exe,0 UninstallDisplayName={code:GetAppName} WindowVisible = no AppCopyright=Copyright © 2015. {code:GetVendorName} FlatComponentsList = yes PrivilegesRequired = admin VersionInfoVersion=1.0.0.0 SetupIconFile=E:\\Master\\Developer Tools\\Package\\Setup.ico WizardImageFile=E:\\Master\\Developer Tools\\Inno Setup\\WizardImages\\Modern\\SetupModern16.bmp WizardSmallImageFile=E:\\Master\\Developer Tools\\Inno Setup\\WizardImages\\Modern\\Small\\SetupModernSmall26.bmp  [Languages] Name: ina; MessagesFile: compiler:Indonesia.isl Name: en; MessagesFile: compiler:grin:efault.isl  [Tasks] Name: desktopicon; Description: {cm:CreateDesktopIcon}; GroupDescription: {cm:AdditionalIcons}; Flags: checkedonce Name: quicklaunchicon; Description: {cm:CreateQuickLaunchIcon}; GroupDescription: {cm:AdditionalIcons}; Flags: unchecked  [Files] ;My Application Runtime Source: *.*; DestDir: {app}; Flags: ignoreversion  ; .net framework Source: \"E:\\Master\\Developer Tools\\dotNET Framework\\dotNetFx40_Full_x86_x64.exe\"; DestDir: {tmp}; Flags: deleteafterinstall; Check: FrameworkIsNotInstalled   ;skin Source: E:\\Master\\Developer Tools\\Package\\dll&amp;ocx\\ISSkin.dll; DestDir: {app}; Flags: dontcopy Source: E:\\Master\\Developer Tools\\Package\\dll&amp;ocx\\Office2007.cjstyles; DestDir: {tmp}; Flags: dontcopy  [Icons] Name: {group}\\{code:GetAppName}; Filename: {app}\\KRSchool.exe; WorkingDir: {app}; IconFilename: {app}\\main.ico Name: {userdesktop}\\{code:GetAppName}; Filename: {app}\\KRSchool.exe; WorkingDir: {app}; IconFilename: {app}\\main.ico; Tasks: desktopicon  [Registry] ;INSTALL DIR Root: HKCU; Subkey: \"Software\\{code:GetVendorName}\\{code:GetAppName}\"; ValueName: \"installDir\"; ValueType: String; ValueData: {app}; Flags: uninsdeletevalue  [Run] Filename: {tmp}\\dotNetFx40_Full_x86_x64.exe; Parameters: \"/q:a /c:\"\"install /l /q\"\"\"; Check: FrameworkIsNotInstalled; StatusMsg: \"Sedang menginstall Microsoft Framework 4.0 ...\"  [Code] const   AppName = 'KR School';   AppVersion = '1.0.0';   VendorName = 'KR Software';  // Importing LoadSkin API from ISSkin.DLL procedure LoadSkin(lpszPath: String; lpszIniFileName: String); external 'LoadSkin@files:isskin.dll stdcall';  // Importing UnloadSkin API from ISSkin.DLL procedure UnloadSkin(); external 'UnloadSkin@files:isskin.dll stdcall';  // Importing ShowWindow Windows API from User32.DLL function ShowWindow(hWnd: Integer; uType: Integer): Integer; external 'ShowWindow@user32.dll stdcall';  function IsDotNetDetected(version: string; service: cardinal): boolean; // Indicates whether the specified version and service pack of the .NET Framework is installed. // // version -- Specify one of these strings for the required .NET Framework version: //    'v1.1.4322'     .NET Framework 1.1 //    'v2.0.50727'    .NET Framework 2.0 //    'v3.0'          .NET Framework 3.0 //    'v3.5'          .NET Framework 3.5 //    'v4\\Client'     .NET Framework 4.0 Client Profile //    'v4\\Full'       .NET Framework 4.0 Full Installation // // service -- Specify any non-negative integer for the required service pack level: //    0               No service packs required //    1, 2, etc.      Service pack 1, 2, etc. required var     key: string;     install, serviceCount: cardinal;     success: boolean; begin     key := 'SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\' + version;      // .NET 3.0 uses value InstallSuccess in subkey Setup     if Pos('v3.0', version) = 1 then begin         success := RegQueryDWordValue(HKLM, key + '\\Setup', 'InstallSuccess', install);     end else begin         success := RegQueryDWordValue(HKLM, key, 'Install', install);     end;      // .NET 4.0 uses value Servicing instead of SP     if Pos('v4', version) = 1 then begin         success := success and RegQueryDWordValue(HKLM, key, 'Servicing', serviceCount);     end else begin         success := success and RegQueryDWordValue(HKLM, key, 'SP', serviceCount);     end;      result := success and (install = 1) and (serviceCount &gt;= service); end;  function FrameworkIsNotInstalled: Boolean; begin     Result := not IsDotNetDetected('v4\\Full', 0); end;  function GetVendorName(Param: string): string; begin   Result := VendorName; end;  function GetAppVersion(Param: string): string; begin   Result := AppVersion; end;  function GetAppName(Param: string): string; begin   Result := AppName; end;  function InitializeSetup(): Boolean; begin    ExtractTemporaryFile('Office2007.cjstyles');   LoadSkin(ExpandConstant('{tmp}\\Office2007.cjstyles'), 'NormalAqua.ini'); \t       Result := True; end;  procedure DeinitializeSetup(); begin \t// Hide Window before unloading skin so user does not get \t// a glimse of an unskinned window before it is closed. \tShowWindow(StrToInt(ExpandConstant('{wizardhwnd}')), 0); \tUnloadSkin(); end;  Kemudian skrip di atas kita simpan di folder Rilis misal dengan nama ` SetupKRSchool.iss`      File SetupKRSchool.iss di atas akan kita compile menggunakan tool bawaan Inno Setup yaitu ISCC.exe. Untuk contoh penggunaanya seperti ini :   iscc \"c:\\rilis\\SetupKRSchool.iss\"  Nah perintah di atas akan kita panggil melalui Dialog Build Events   Revisi Perintah Build Event   Pada postingan sebelumnya kita sudah menulis perintah sederhana di dialog Build Events      Kita akan merivisi perintah diatas untuk menjalankan  tool bawaan Inno Setup yaitu ISCC.exe. Dengan tool ini kita bisa langsung mengcompile skrip Inno Setup.   Berikut perintah lengkapnya.      Pada perintah di atas saya menambahkan kondisi   if \"$(ConfigurationName)\" == \"Debug\" goto skip  yang artinya perintah build event di atas hanya akan dijalankan jika Solution Configuration atau  Configuration Manager di set Release.      Setelah itu lakukan proses build -&gt; project, maka semua file dll atau exe yang ada di folder bin\\Debug atau bin\\Release akan dicopykan ke folder C:\\Rilis, kemudian akan dilanjutkan dengan mengcompile skrip Inno Setup.               Selamat mencoba :blush:  ","categories": ["Visual Studio .NET","Build Events"],
        "tags": ["Visual Studio .NET","Build Events","inno setup"],
        "url": "http://coding4ever.net/blog/2015/07/01/the-power-of-visual-studio-net-build-events-part-number-2/",
        "teaser": null
      },{
        "title": "The Power of Visual Studio .NET Build Events Part #3",
        "excerpt":"Masih melanjutkan pembahasan tentang build events yang merupakan salah satu fitur menarik dari Visual Studio .NET dan berguna untuk meningkatkan produktivitas kita sebagai software developer.   Di postingan sebelumnya kita memanfaatkan fitur ini untuk membuat paket installer secara otomatis setelah proses build project selesai, jadi workflownya sangat cocok digunakan untuk pengembangan aplikasi desktop. Sedangkan postingan kali ini, studi kasusnya adalah pengembangan aplikasi web service.     Perlu diketahui bahwa workflow pengembangan aplikasi desktop dan web service itu sedikit berbeda. Pengembangan aplikasi web service ada kemiripan dengan pengembangan aplikasi web. Di mana kita melakukan proses develop  di komputer lokal setelah jadi baru kita upload ke server develop (untuk pengetesan lebih lanjut) atau ke server production (jika sudah siap rilis).      Dari gambar di atas, maka workflow yang bisa kita gunakan adalah :      Build project dengan mode Debug akan mengupload hasil build ke development server   Sedangkan jika build project dengan mode Release akan mengupload hasil build ke production server   Setelah menentukan workflow, berikutnya adalah menentukan cara yang kita gunakan untuk mengupload hasil build. Untuk contoh di sini kita akan memanfaatkan service FTP untuk melakukan proses upload.   FileZilla   FileZilla adalah salah satu software gratis dan open source yang bisa digunakan untuk menyediakan service FTP. Cara instalasi dan konfigurasinya juga gampang dan jika Anda belum pernah menggunakan FileZilla, saya pernah menulis tutorial penggunakan FileZilla di sini.   Web Server   Sama seperti aplikasi web, web service juga membutuhkan sebuah host/wadah agar bisa dijalankan. Untuk kebutuhan web server kita akan menggunakan spesifikasi seperti berikut :      Menggunakan OS Windows 7/Windows Server 2008 ke atas   Web Server IIS   Service FTP menggunakan FileZilla, walaupun Windows Server juga mempunyai fitur untuk menyediakan service FTP sendiri, tapi tidak kita bahas disini   Lokasi Web Service   Secara default document root web server iis ada di folder ` C:\\inetpub\\wwwroot`      Kita akan membahkan folder baru dengan nama KRSchool  berikut sub folder bin. Nah di sub folder bin inilah kita akan mengupload hasil build project.      Membuat User FTP   Setelah menyiapkan lokasi web service, berikutnya adalah membuat user yang berhak untuk mengakses lokasi web service. Di sini kita akan menggunakan FileZilla sebagai penyedia service FTP. Adapun langkah-langkahnya seperti berikut :           Jalankan FileZilla Server Interface              Kemudian klik toolbar user account dialog              Setelah itu akan tampil dialog user              Kemudian klik tombol Add dan isikan nama user                   Setelah itu kita perlu mengeset password untuk user yang baru ditambahkan                   Berikutnya pindah ke node Shared folders, klik tombol Add kemudian tentukan lokasi web service                   Terakhir aktifkan semua hak akses untuk modifikasi file              Tes User FTP   Setelah berhasil mendaftarkan user ftp, saatnya kita tes service FTPnya dari komputer lain.   Dengan asumsi ip server adalah 192.168.56.101, kita masuk ke dos prompt kemudian ketik ftp 192.168.56.101.   Jika konfigurasi service FTP yang kita lakukan dilangkah-langkah sebelumnya benar, kita akan diminta untuk memasukkan username dan password dan jika berhasil prompt akan berganti menjadi ftp&gt; yang menandakan bahwa username dan password kita benar.      WinSCP   Di sisi server kita menggunakan FileZilla sebagai penyedia service FTP, sedangkan dari sisi klien kita menggunakan WinSCP untuk mengakses service FTP.   Cara penggunaan WinSCP, juga gampang. Berikut contohnya :   winscp.com /command \"option batch abort\" \"option confirm off\" \"open ftp://USER_FTP:stuck_out_tongue:ASSWORD_FTP@IP_SERVER\" \"put FOLDER_RILIS\\*.dll bin/\" \"exit\"  Untuk USER_FTP, PASSWORD_FTP, IP_SERVER dan FOLDER_RILIS menyesuaikan. Selanjutnya kita tinggal panggil perintah di atas melalui Build Events   Build Events   Setelah semua persiapan selesai, kita akan menuliskan perintah Build Events untuk mengcopy hasil build dan menguploadnya ke server web service. Berikut perintah lengkapnya :      Pada perintah di atas, nilai IPServer tergantung dari setting Solution Configuration atau Configuration Manager. Jika di set Debug, hasil build akan diupload ke development server sedangkan jika di set Release akan di upload ke production server.      Setelah itu lakukan proses build -&gt; project, maka semua file dll yang ada di folder bin\\Debug atau bin\\Release akan dicopykan ke folder C:\\WebServiceRilis, kemudian akan dilanjutkan dengan mengupload ke web server.               Selamat mencoba :blush:  ","categories": ["Visual Studio .NET","Build Events"],
        "tags": ["Visual Studio .NET","Build Events","FileZilla","WinSCP","web server","development server","production server"],
        "url": "http://coding4ever.net/blog/2015/07/04/the-power-of-visual-studio-net-build-events-part-number-3/",
        "teaser": null
      },{
        "title": "Performance Test Menggunakan JMeter",
        "excerpt":"Aktivitas saya di kantor akhir-akhir ini, lebih sering ngoding untuk backend/web service. Nah untuk membuat service ini, saya biasanya menggunakan teknologi WCF, hanya saja untuk kekinian :grin: saya juga menggunakan ASP.NET Web Api.   Untuk tahapan testing wajib yang saya lakukan adalah minimal unit test. Unit test yang dilakukan biasanya di level DAL (Data Access Layer) dan Controller.     Unit testing ini merupakan bagian dari white box testing karena testing ini dieksekusi langsung oleh programmer. Sedangkan untuk black box testing bisa dilakukan menggunakan aplikasi sejenis Fiddler atau menggunakan add-ons yang dimiliki oleh browser-browser seperti Mozilla Firefox dan Google Chrome.   Karena service ini nantinya akan digunakan oleh banyak client dan user, tentu akan ngeri-ngeri sedap  :grin: jika testingnya masih dilakukan secara manual. Jadi sebaiknya kita menggunakan Performance Test Tool untuk proses ini.   Ada banyak Performance Test Tool yang tersedia baik yang gratis maupun yang berbayar. Untuk postingan kali ini saya menggunakan JMeter.   Apa itu JMeter ?     The Apache JMeter™ application is open source software, a 100% pure Java application designed to load test functional behavior and measure performance. It was originally designed for testing Web Applications but has since expanded to other test functions    Berikut langkah-langkah menggunakan JMeter :   1. Download JMeter kemudian ekstrak, misal di drive C:\\      2. Untuk menjalankan JMeter, klik ganda file jmeter.bat yang ada di folder bin      Tunggu beberapa saat sampai tampil, aplikasi JMeter      Kemudian ganti informasi Name, sesuai kebutuhan. Misal Performance Test Web Service Presensi.      3.\tMenambahkan User Defined Variables   Di node ini kita akan menambahkan informasi global yang sering digunakan pada saat testing seperti informasi host dan port.   Untuk menambahkan node User Defined Variables klik kanan node Test Plan (Performance Test Web Service Presensi) -&gt; Add -&gt; Config Element -&gt; User Defined Variables.      Kemudian lakukan pengaturan User Defined Variables seperti gambar berikut :      Pada gambar di atas kita menambahkan dua variabel yaitu host dan port. Nah variabel-variabel ini nantinya akan digunakan pada langkah-langkah berikutnya.   4.\tMenambahkan HTTP Header Manager   Setelah menambahkan node User Defined Variables, kita lanjutkan dengan menambahkan node HTTP Header Manager. Langkah-langkahnya sama seperti menambahkan node ` User Defined Variables, hanya saja yang dipilih adalah HTTP Header Manager`.   Di node ini kita akan menambahkan informasi apa saja yang dikirimkan JMeter ke HTTP request header.      5.\tMenambahkan HTTP Request Defaults   Langkah berikutnya adalah menambahkan node HTTP Request Defaults, caranya juga sama seperti sebelumnya hanya saja yang dipilih node HTTP Request Defaults.   Di node ini kita cukup mengeset informasi nama server/ip address, port dan protocol.      Karena sebelumnya kita sudah mendefinisikan nama host dan port di node User Defined Variables, di node ini kita tinggal panggil variabel tersebut dengan format : ${NAMA_VARIABEL}.   6.\tMenambahkan Thread Group   Node ini digunakan untuk mengelompokan service yang akan di tes. Misal kita mempunyai service Mahasiswa dan Dosen, kedua service ini sebaiknya dibuatkan Thread Group masing-masing.   Untuk menambahkan node Thread Group  klik kanan node Test Plan (Performance Test Web Service Presensi) -&gt; Add -&gt; Threads (Users) -&gt; Thread Group.      Kemudian atur settingnya seperti berikut :      Dari setting di atas, kita akan membuat skenario performance test seperti berikut :      Jumlah user sebanyak 50 orang   Setiap 2 detik (100/50), akan mengirimkan 6 request ke server.   Total jumlah sample = 300 (50 x 6)   Skenario performance test ini bisa diganti-ganti nilainya sesuai kebutuhan.   7.\tMenambahkan HTTP Request   Setelah menentukan skenario performance test, langkah berikutnya adalah menambahkan node HTTP Request. Di node inilah kita akan menentukan web service yang akan di tes. Misal web service mahasiswa mempunyai dua layanan yaitu GetByID dan GetByName. Nah dua layanan ini akan kita tambahkan sebagi bagian dari HTTP Request.   Untuk menambahkan node HTTP Request klik kanan node Thread Group (Web Service Mahasiswa) -&gt; Add -&gt; Sampler -&gt; HTTP Request.      Kemudian atur settingnya seperti berikut :      Dari gambar di atas, informasi web servicenya sebagai berikut :      Nama service : GetById   Path/Url : /Api/Mahasiswa/GetById   Service ini mempunyai satu parameter yaitu id, yang kita set nilainya 09.01.2488   Informasi server name/ip dan port number tidak perlu di set, karena sudah kita set nilainya di node HTTP Request Defaults   Ulangi langkah sebelumnya untuk menambahkan service yang lain.      8.\tMenambahkan report untuk menampilkan hasil Performance test   Ada beberapa format laporan yang digunakan untuk menampilkan hasil performance test yaitu :      View Results in Table   View Results Tree   Response Times Over Time   Transactions per Second   Statistical Aggregate Report   Summary Report   Untuk menambahkan semua format laporan di atas klik kanan node Thread Group (Web Service Mahasiswa) -&gt; Add -&gt; Listener -&gt; Pilih jenis laporan.      9.\tMenjalankan Performance test   Untuk menjalankan performance test, kita tinggal mengklik toolbar Start      Performance test ini di jalankan menggunakan Environment Test sebagai berikut :   Server Web Service :      Sistem Operasi : Windows Server 2008 64 Bit   Web Server : IIS 7   Teknologi/framwork REST Service : ASP.NET Web API 2   Processor : Intel Xeon X5570 2.93 Ghz   RAM : 12 GB   Server Database :      Sistem Operasi : Windows Server 2012 64 Bit   Database : SQL Server 2014   Processor : Intel Xeon E5-2620 v2 2.10 Ghz   RAM : 24 Gb   10. Contoh Hasil Performance Test                     Sebagai penutup saya belum menemukan referensi yang tepat bagaimana cara menganalisa hasil dari performance test di atas, tetapi biasanya yang saya jadikan acuan adalah hasil yang bisa dilihat melalui node View Results in Table kolom Status, dari node ini kelihatan apakah ada request service yang berstatus Warning. Jika ada mungkin ini bisa menjadi bahan acuan apakah service kita masih perlu di-improve lagi atau skenario performance test yang perlu diganti atau karena faktor lainnya seperti kondisi jaringan yang lagi enggak fit pada saat melakukan tes :grin:.   Selamat mencoba :blush:  ","categories": ["Software Testing"],
        "tags": ["performance test","JMeter","web service","rest","asp.net","web api","wcf"],
        "url": "http://coding4ever.net/blog/2015/10/20/performance-test-menggunakan-jmeter/",
        "teaser": null
      },{
        "title": "Online Backup Database",
        "excerpt":"Backup database lokal saja ternyata tidak cukup, paling tidak itu yang saya rasakan ketika salah satu klien saya hardisk servernya tewas :grin:. Padahal dulu itu saya sudah menyarankan untuk menggunakan UPS, tapi katanya “kalo pake UPS, fitur  powerON di biosnya jadi gak jalan…” dan saya maklum karena servernya memang ON 24 jam dan memang tidak ada petugas khusus yang mengONkan servernya kalo pas lagi OFF. Jadi kita memang dituntut untuk memberikan solusi untuk masalah ini, terutama solusi yang murah meriah he he :grin:     Salah satu solusinya adalah dengan memanfaatkan media penyimpanan online yang memang sudah terbukti handal dan gratis yaitu Google Drive. Dengan Google Drive limit ukuran file yang bisa diupload adalah maksimal 5GB.   Kita langsung saja berikut adalah langkah-langkah untuk mengakses layanan/API dari Google Drive atau layanan Google lainnya.   1. Membuat Client id   Untuk membuat client id, kita bisa langsung mengakses link Google Developer Console kemudian login menggunakan email google Anda      2. Membuat project   Klik menu Select a project -&gt; Create a project…      Kemudian isikan nama project, misal OnlineBackup      3. Mengaktifkan Google API   Dari menu dashboard klik link Use Google APIs      Secara default google sudah mengaktifkan beberapa API yang bisa kita akses dari aplikasi      Dari daftar api di atas kita belum menemukan API untuk mengakses google drive, sehingga API ini harus kita aktifkan secara manual dengan mengklik link Google APIs kemudian di kotak pencarian ketik Drive API      Selanjutnya klik link Drive API kemudian pilih Enable API         4. Membuat Credential   Sebelum layanan/API Google Drive ini bisa kita akses, kita harus membuat Credential terlebih dulu sebagai otorisasi bahwa kita adalah memang orang yang berhak untuk mengakses layanan ini.   Untuk membuat Credential klik menu Credentials kemudian pilih OAuth client ID      Kemudian klik menu Configure consent screen      Isikan datanya sesuai kebutuhan      Selanjutnya kita akan menentukan jenis aplikasi yang akan mengakses API ini. Untuk contoh disini saya menggunakan aplikasi console.      Jika berhasil kita akan mendapatkan informasi client ID dan client secret. Informasi ini akan kita gunakan untuk mengakses layanan/API google drive ataupun layanan lainnya.      5. Menyiapkan folder backup   Langkah berikutnya adalah masuk ke Google Drive kemudian kita buat folder untuk backup database. Setelah membuat folder ini, kita perlu mengetahui informasi folder id dari folder backup ini. Untuk mendapatkan folder id bisa kita lihat dibagian address bar.      Pada gambar di atas folder id dari folder Backup Database ini adalah : 0B5aEAoHOGHqkelgzM2cxVncxNGM.   Simpan informasi ini karena akan digunakan untuk mengakses folder Backup Database ini via aplikasi.   6. Membuat aplikasi client   Untuk contoh di sini kita akan menggunakan aplikasi console untuk mendemokan proses upload file ke Google Drive. Artinya aplikasi ini akan dijalankan via batch command atau command prompt.   Aplikasi ini juga membutuhkan dua library pihak ketiga yaitu Google.Apis.Drive.v2 dan DotNetZip yang bisa diinstall via NuGet.         File backup database yang akan kita upload adalah file backup yang sudah kita buatkan versi kompresnya, disini kita menggunakan library DotNetZip. Contoh kodenya  seperti berikut :   private static void CreateZip(string pathFileBackup, string fileBackup, string extension) {     var fileToZip = string.Format(@\"{0}\\{1}.zip\", pathFileBackup, fileBackup);     fileBackup = string.Format(@\"{0}\\{1}.{2}\", pathFileBackup, fileBackup, extension);      using (var zip = new ZipFile())     {         Console.WriteLine(\"\\nAdding {0}...\", fileBackup);         ZipEntry e = zip.AddFile(fileBackup, \"\");          zip.Save(fileToZip);     } }  Setelah berhasil membuat file zipnya, tinggal upload ke google drive. Berikut contoh kodenya :   private static void UploadToGoogleDrive(string pathFileBackup, string fileBackup) {     // TODO : disesuaikan dengan nilai clientId dan clientSecret Anda     //        setting ini juga bisa disimpan di file App.config     var clientId = \"505165741497-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\";     var clientSecret = \"6Nxxxxxx-xxxxxxxxxxxxxxx\";      var service = GoogleDriveHelper.AuthenticateOauth(clientId, clientSecret, Environment.UserName);      if (service == null)     {         Console.WriteLine(\"Authentication error\");         Console.ReadLine();     }                  try     {         Console.WriteLine(\"Sedang proses upload ...\");          // TODO : disesuaikan dengan nilai folder id Anda         //        setting ini juga bisa disimpan di file App.config         var folderId = \"0B5xxxxxxxxxxxxxxxxxxxxxxxxx\";                          // upload file         var fileToUpload = string.Format(\"{0}\\\\{1}.zip\", pathFileBackup, fileBackup);         File newFile = GoogleDriveHelper.UploadFile(service, fileToUpload, folderId);      }     catch     {         Console.WriteLine(\"\\nUpload file gagal !\");     }     finally     {         // hapus file yang berhasil diupload         var fileToDelete = string.Format(\"{0}\\\\{1}.zip\", pathFileBackup, fileBackup);         System.IO.File.Delete(fileToDelete);     } }  Method UploadToGoogleDrive di atas membutuhkan class GoogleDriveHelper yang bisa Anda cek di sini.   Method CreateZip dan UploadToGoogleDrive di atas mempunyai parameter seperti berikut :   void CreateZip(string pathFileBackup, string fileBackup, string extension) void UploadToGoogleDrive(string pathFileBackup, string fileBackup)  Nilai masing-masing parameter di atas kita isi pada saat memanggil aplikasi via batch command atau command prompt. Contoh :      Dan untuk mendapatkan nilainya, kita bisa mengakses parameter args dari method Main.      7. Menjalankan aplikasi client via batch command   Untuk menjalankan aplikasi di atas kita bisa menggunakan batch command. Untuk contoh kodenya menggunakan database MySQL :   for /f \"tokens=2-4 delims=/ \" %%a in ('date /T') do set year=%%c for /f \"tokens=2-4 delims=/ \" %%a in ('date /T') do set month=%%a for /f \"tokens=2-4 delims=/ \" %%a in ('date /T') do set day=%%b   for /f \"tokens=1 delims=: \" %%h in ('time /T') do set hour=%%h for /f \"tokens=2 delims=: \" %%m in ('time /T') do set minutes=%%m for /f \"tokens=3 delims=: \" %%a in ('time /T') do set ampm=%%a  rem membuat file backup database dengan format nama_database-tahun-bulan-hari_jam_menit  set FILE_BACKUP=pulsa-%year%-%month%-%day%_%hour%-%minutes%-%ampm% set LOKASI_BACKUP=D:\\BackupDatabase\\backups set FILE_EXTENSION=sql  rem set user dan password mysql set USER_MYSQL=root set PASS_MYSQL=rahasia  rem USER_NAME, USER_PASSWORD dan NAMA_DATABASE menyesuaikan mysqldump -u%USER_MYSQL% -p%PASS_MYSQL% pulsa &gt; %LOKASI_BACKUP%\\%FILE_BACKUP%.%FILE_EXTENSION%  D:\\BackupDatabase\\DemoOnlineBackup.exe %LOKASI_BACKUP% %FILE_BACKUP% %FILE_EXTENSION%  Kemudian kode di atas kita simpan dengan nama backup.cmd di folder Instalasi MySQL\\bin.      Agar proses backup ini bisa otomatis dan terjadwal kita bisa memanfaatkan Windows Task Scheduler.   Terakhir hasil tes kode di atas berhasil mengupload file ke Google Drive dengan lancar :blush:      Selamat MENCOBA :blush:   Referensi :      Google Drive API with C# .net – Upload, update, patch, delete,trash   Google-Dotnet-Samples  ","categories": ["Database","MySQL"],
        "tags": ["Backup","Database","MySQL","Task Scheduler","batch file","batch command"],
        "url": "http://coding4ever.net/blog/2016/01/06/online-backup-database/",
        "teaser": null
      },{
        "title": "Paket NuGet yang wajib dicoba bagian #2 - AutoUpdater.NET",
        "excerpt":"Masalah update program adalah masalah klasik bagi para programmer aplikasi desktop. Apakah itu untuk perbaikan bug atau penambahan fitur baru. Bagaimana tidak, biasanya kita selalu disibukan dengan masalah yang satu ini. Update… update… dan update … :grin: apalagi dengan jumlah klien yang banyak wahhhh cape deh :cry:     Sebenarnya proses update sendiri pada dasarnya adalah masalah sederhana “tinggal copy program yang baru untuk menimpa program yang lama”. Nah permasalahan biasanya muncul jika yang harus melakukan update adalah klien kita yang mungkin cuma bisa ngetik di word atau mantan operator dos yang baru pindah ke windows de el el.   Jadi merupakan ide yang baik untuk memberikan notifikasi (pemberitahuan) kepada end-user, bahwa ada updatean terbaru untuk aplikasi yang mereka gunakan.   Sehingga dengan adanya program update yang baik User nyaman kita pun senang :grin:.   AutoUpdater.NET adalah salah satu library gratis yang bisa menjadi solusi untuk masalah ini dengan konfigurasi yang mudah sehingga proses update-pun menjadi menyenangkan.   Sebelum menggunakan library AutoUpdater.NET ada beberapa hal yang perlu dipersiapkan :   1. File exe versi terakhir   File exe ini akan kita simpan di server, file inilah yang akan didownload oleh klien jika ada updatean terbaru. Jika akan mengupdate beberapa file sekaligus, misal selain mengupdate file exe juga mengupdate file dll, untuk kasus seperti ini kita bisa menggunakan paket installer.   Ada banyak tools gratis untuk membuat paket installer seperti Inno Setup dan NSIS. Untuk contoh pembuatan paket installer update bisa dilihat di sini dan sini.   2. File Info Rilis   File info rilis akan kita simpan di server. File ini berfungsi sebagai informasi bagi aplikasi klien apakah ada update-an terbaru atau tidak. File ini dibuat dengan menggunakan format XML. Contoh :   &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;item&gt; \t&lt;title&gt;Sistem Informasi Manufaktur&lt;/title&gt; \t&lt;version&gt;1.3.1.0&lt;/version&gt; \t&lt;url&gt;http://xxxxx.xxx/online-update/manufactur/auto-updater.exe&lt;/url&gt;\t &lt;/item&gt;  3. Web Server   Anda bisa menggunakan IIS, Apache atau web server lainnya. Di web server ini kita akan menyimpan file exe dan info rilis (poin 1 dan 2).      Menambahkan Library AutoUpdater.NET   Untuk menambahkan library AutoUpdater.NET bisa kita lakukan via NuGet Package Manager. Adapun caranya seperti berikut :           Klik kanan node References -&gt; Manage NuGet Packages…                   Cari AutoUpdater.NET dan klik tombol Install              Klik tombol Close, kemudian cek node References, seharusnya sudah ada tambahan library AutoUpdater.NET              Cara Penggunaan Library AutoUpdater.NET   Cara penggunaan AutoUpdater.NET sangat mudah, kita cukup menambahkan beberapa kode berikut di form utama.         Pada kode di atas method Start kita arahkan ke url : http://localhost/update/DemoAutoUpdaterDotNet.xml   Adapun isi dari file DemoAutoUpdaterDotNet.xml seperti berikut :   &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;item&gt;   &lt;title&gt;Demo AutoUpdater.Net&lt;/title&gt;   &lt;version&gt;1.1.0.0&lt;/version&gt;   &lt;url&gt;http://localhost/update/DemoAutoUpdaterDotNet.exe&lt;/url&gt;  &lt;/item&gt;  Demo AutoUpdater.NET      Selamat MENCOBA :blush:  ","categories": ["NuGet","Visual C#","AutoUpdater.NET"],
        "tags": ["NuGet","Update","Web Server","IIS","Apache"],
        "url": "http://coding4ever.net/blog/2016/01/10/paket-nuget-yang-wajib-dicoba-bagian-number-2-autoupdater-dot-net/",
        "teaser": null
      },{
        "title": "Membuat Laporan Crystal Reports .NET dengan Model Data-Push Bagian #2",
        "excerpt":"Melanjutkan pembahasan tentang bagaimana cara mendesain laporan menggunakan Crystal Reports‎ .NET tanpa terhubung langsung ke database dengan memanfaatkan objek ADO.NET DataSet atau yang dikenal dengan istilah Push model.        Jika pada postingan sebelumnya kita hanya menampilkan data dari sebuah tabel maka untuk postingan kali ini kita menampilkan data dari tiga buah tabel yang saling berhubungan.         Persiapan tool-tool yang akan digunakan :      Visual Studio Community 2013, Anda bisa saja menggunakan Visual Studio .NET versi sebelumnya (2010, 2012)   NuGet, untuk memudahkan dalam menambahkan library pihak ketiga. Adapun library pihak ketiga yang digunakan dalam sample ini adalah Dapper .NET dan System.Data.SQLite Core   Crystal Reports SP 13   Database SQLite   Setelah semua tool yang dibutuhkan tersedia kita lanjutkan dengan pembuatan project :           Buat project baru dengan type WinForm                   Tambahkan empat folder baru masing-masing dengan nama DataSet, Model, Repository dan Report              Folder DataSet digunakan untuk mengelompokkan item-item DataSet yang berfungsi sebagai tabel temporary, folder Model untuk mengelompokkan class-class model atau entity, folder Repository untuk mengelompokkan class-class akses database dan terakhir folder Report untuk mengelompokkan item-item Crystal Reports.   Class Model/Entity   Untuk menerapkan konsep OOP (Object-oriented programming) dalam pemrograman database kita perlu membuat sebuah class yang disebut dengan istilah class Model atau Entity. Class ini merupakan representasi dari tabel-tabel yang ada di dalam database. Tujuan dari membuat class ini adalah agar kita bisa melakukan mapping (pemetaan) baris/row dari tabel menjadi kumpulan objek (object collection).   Pemetaan bisa dilakukan secara manual atau bisa juga secara otomatis dengan menggunakan tool-tool ORM dari pihak ketiga seperti Dapper .NET dan Entity Framework. Untuk contoh kali ini kita menggunakan Dapper .NET.      Setelah memahami apa itu class model dan bagaimana proses pemetaan record ke objek terjadi, langkah berikutnya adalah menambahkan class model Category, Product dan Supplier yang mempunyai struktur sama persis dengan rancangan tabel di atas.         Class Repository   Class repository adalah class yang bertugas untuk menangani operasi database yang dikenal dengan istilah operasi CRUD (Create, Read, Update dan Delete). Di dalam class inilah kita menuliskan perintah-perintah INSERT, UPDATE, DELETE dan SELECT.      Sebagai contoh kode dibawah ini akan melakukan mapping (pemetaan) baris/row tabel menjadi kumpulan objek (object collection) secara otomatis.      Kode di atas menggunakan Micro ORM Dapper.NET untuk melakukan mapping/pemetaan hasil query ke objek collection.   Kemudian kita panggil seperti berikut :         DataSet   Dengan model data Push kita tidak langsung menghubungkan antara Crystal Reports dengan database, jadi sebagai solusinya kita menggunakan DataSet yang berfungsi sebagai tabel temporary dan menjadi sumber data bagi Crystal Reports.   Untuk menambahkan item DataSet, klik kanan Project -&gt; Add -&gt; New Item…         Setelah menambahkan item DataSet (DsNorthwind), langkah berikutnya adalah menambahkan item DataTable      Kemudian input informasi DataTablenya seperti gambar berikut :      Ulangi langkah sebelumnya untuk menambahkan DataTable lainnya.      Crystal Reports   Crystal Reports adalah tool yang kita gunakan untuk membuat laporan. Untuk menambahkan item Crystal Report, klik kanan Project -&gt; Add -&gt; New Item…         Pilih “As a Blank Report” karena kita akan mendesain report secara manual.      Langkah berikutnya adalah menentukan sumber data yang kita arahkan ke item DataSet yang sudah kita buat pada langkah sebelumnya   Klik kanan Database Fields -&gt; Database Expert …      Pilih ADO.NET DataSet      Drag satu-satu field ke section detail, kemudian dirapikan.         Crystal Report Viewer   Setelah semua persiapan selesai, langkah berikutnya adalah menambahkan Crystal Report Viewer yang berfungsi sebagai container untuk untuk menampilkan report.   Aktifkan form kemudian tambahkan Crystal Report Viewer      Kemudian tambahkan kode berikut :      Dari kode di atas kita bisa melihat tidak ada lagi kode untuk mengeset koneksi database dan perintah SQL yang akan dikirimkan. Cara ini sangat cocok digunakan ketika kita akan membangun sistem dengan arsitektur N-Tier, di mana aplikasi klien sudah tidak terkoneksi lagi secara langsung ke database.   Jika kode di atas dijalankan, akan menghasilkan output seperti gambar di bawah ini.      Selamat MENCOBA :blush:  ","categories": ["Visual C#","Crystal Reports .NET"],
        "tags": ["ORM","Dapper .NET","Entity Framework","N-Tier","SQLite","Crystal Reports .NET","Push model"],
        "url": "http://coding4ever.net/blog/2016/01/24/membuat-laporan-crystal-reports-net-dengan-model-data-push-bagian-number-2/",
        "teaser": null
      },{
        "title": "Menghilangkan Tab Main Report pada CrystalReportViewer",
        "excerpt":"Bagi Anda penggemar Crystal Reports .NET tentu sudah tidak asing lagi dengan tab Main Report yang tampil pada saat menampilkan laporan. Bagi sebagian orang seperti saya tab ini lumayan mengganggu karena biasanya report yang kita buat adalah report tunggal (report yang tidak me-link kehalaman yang lain).   Masih bingung ? Coba lihat gambar berikut.        Ada beberapa cara untuk menghilangkan tab tersebut, bisa dengan membuat sebuah method biasa atau dengan membuat extension method.   Method biasa   Nah cara pertama adalah dengan membuat sebuah method, misal dengan nama RemoveMainTab.      kemudian method di atas kita panggil setelah pengesetan nilai property ReportSource      Extension method   Extension method adalah salah satu fitur yang ada dalam bahasa pemrograman .NET yang memungkinkan kita untuk menambahkan  method baru dari sebuah type seperti class tanpa harus membuat turunan dari type tesebut.   Contoh class CrystalReportViewer  aslinya tidak mempunyai method RemoveMainTab tetapi dengan adanya fitur  extension method kita bisa menambahkan method baru tanpa harus membuat turunan dari class CrystalReportViewer atau merubah secara langsung class CrystalReportViewer.   Untuk membuat extension method kita harus menambahkan class baru misal dengan nama CrystalReportViewerExtension.         kemudian classnya harus static, setelah itu kita tambahkan method RemoveMainTab      Nah coba perhatikan method RemoveMainTab di atas, selain harus static parameternya juga harus ditambahkan keyword this.   Jika berhasil objek dari class CrystalReportViewer akan ketambahan method baru dengan nama ` RemoveMainTab`.      Terakhir kita cek reportnya apakah tab Main Report sudah hilang ?      Selamat MENCOBA :blush:  ","categories": ["Visual C#","Crystal Reports .NET"],
        "tags": ["Extension method","CrystalReportViewer","Crystal Reports .NET"],
        "url": "http://coding4ever.net/blog/2016/01/27/menghilangkan-tab-main-report-pada-crystalreportviewer/",
        "teaser": null
      },{
        "title": "Pengembangan Aplikasi Real-time Menggunakan SignalR",
        "excerpt":"ASP.NET  SignalR atau  dapat  disingkat  menjadi  SignalR  adalah  library yang memudahkan kita untuk menambahkan fungsi komunikasi real-time pada aplikasi yang kita kembangkan. Fungsi real-time di sini adalah kemampuan server melakukan pengiriman (push) konten atau data kepada client yang  sudah  terkoneksi  ke  server, sehingga  server  tidak  perlu  menunggu  client  untuk melakukan permintaan (request) data terbaru.   SignalR selain digunakan untuk pengembangan aplikasi web, juga bisa digunakan untuk platform lainnya seperti desktop (console dan windows form) ataupun mobile (windows phone, android dan iOS).     SignalR menyediakan API yang memungkinkan server memanggil fungsi/method yang dimiliki oleh client atau pun sebaliknya. Proses memanggil method secara remote ini dikenal dengan istilah remote procedure call (RPC).         Sumber - Introduction to SignalR   Pada gambar di atas Hub merupakan class turunan dari class Microsoft.AspNet.SignalR.Hub yang memungkinkan server memanggil fungsi/method yang dimiliki oleh client atau sebaliknya client memanggil fungsi/method yang dimiliki oleh server. Sedangkan Hub Proxy merupakan objek proxy dari class Hub yang ada di server, sehingga method yang dipanggil melalui objek proxy ini otomatis akan dieksekusi secara remote (dijalankan di sisi server).   Sebagai contoh penggunaan SignalR, kita akan membuat aplikasi sederhana tanpa database. Di contoh ini kita akan melihat bagaimana cara server dan client berbagi data secara real-time.      Aplikasi di atas terdiri dari tiga project yaitu :           DemoSignalR.WinFormServer       Project ini bertipe Windows Application yang berfungsi sebagai Server dari SignalR            DemoSignalR.WinFormClient       Project ini juga bertipe Windows Application yang berfungsi sebagai aplikasi Client            DemoSignalR.Model       Terakhir adalah project DemoSignalR.Model, project ini bertipe Class Library yang isinya hanya berupa class model. Objek dari class model inilah nantinya akan dishare secara real-time dari server ke client atau sebaliknya.              Berikutnya kita akan bahas satu persatu ketiga project di atas.   1. DemoSignalR.WinFormServer   Project ini berfungsi sebagai server dari SignalR. Untuk menggunakan SignalR kita perlu menambahkan beberapa library yang bisa kita install via NuGet.   Berikut adalah daftar paket NuGet yang perlu kita tambahkan untuk project server.      SignalR Hubs API   SignalR Hubs API memungkinkan server memanggil fungsi/method yang dimiliki oleh client atau sebaliknya client memanggil fungsi/method yang dimiliki oleh server. Proses memanggil method secara remote ini dikenal dengan istilah remote procedure call (RPC).   Di server kita mendefinisikan method yang bisa langsung dipanggil oleh client, kemudian di dalam method ini akan memanggil method yang dijalankan oleh client. Contoh :      Coba perhatikan kode di atas, method AddCustomer adalah method server yang kita definisikan dan bisa langsung dipanggil oleh client. Nah di dalam method ini juga ada perintah ` Clients.All.RefreshData(customer). Method RefreshData setelah property All adalah dynamic method, sehingga kita bebas menentukan sendiri nama methodnya. Dan jangan lupa method RefreshData` ini juga harus kita definisikan ulang di bagian client.   Untuk menggunakan fitur SignalR Hubs API kita cukup membuat sebuah class yang merupakan turunan dari class Microsoft.AspNet.SignalR.Hub. Misal kita membuat sebuah class dengan nama ServerHub, class ini harus turunan dari class Microsoft.AspNet.SignalR.Hub. Untuk kode lengkapnya seperti berikut :         Mendaftarkan SignalR   SignalR itu seperti parasit, tidak bisa hidup mandiri sehingga membutuhkan sebuah wadah (host) untuk kelangsungan hidupnya. Ada beberapa cara yang bisa digunakan untuk menempatkan SignalR ke dalam wadahnya (host) yaitu :      Hosting in Internet Information Services (IIS)   Hosting in a Console or Desktop application (Self hosting)   Hosting in a Windows Service (Self hosting)   Karena contoh Server SignalR yang kita buat di atas bertipe Windows Application, berarti kita menggunakan cara Self hosting untuk meng-hostkan SignalR. Untuk mengaktifkan fitur Self hosting kita perlu menambahkan library Microsoft.AspNet.SignalR.SelfHost dan Microsoft.AspNet.Cors, kemudian kita buat class baru dengan nama Startup. Untuk kode lengkapnya seperti berikut :         Setelah membuat class ServerHub dan Startup kita lanjutkan dengan form utama (FrmServer). Untuk desain UInya seperti berikut :      Untuk kode lengkapnya seperti berikut :     Setelah menyelesaikan project Server (DemoSignalR.WinFormServer) kita lanjutkan dengan project DemoSignalR.Model.   2. DemoSignalR.Model   Project ini hanya berisi class-class model. Data atau objek dari class-class model inilah yang nantinya akan dishare oleh server dan client secara real-time. Sebagai contoh di project ini kita hanya menambahkan satu class model yaitu Customer.         Class Customer di atas masuk dalam kategori  complex types sehingga objek dari class Customer tersebut tidak bisa langsung dikirim dari client ke server atau sebaliknya. Perlu diketahui untuk tipe-tipe data primitif seperti integer, long, boolean termasuk string (pengecualian untuk string bukan tipe data primitif) bisa langsung dikirim dari client ke server atau sebaliknya. Khusus untuk objek dari complex types perlu kita konversi terlebih dulu datanya dalam format json.   Ada dua cara yang bisa kita gunakan yaitu :           Menambahkan atribut JsonProperty pada property class             Atau mengkonversi secara langsung objek class ke dalam format json         Jadi terserah Anda mau menggunakan cara yang mana.   3. DemoSignalR.WinFormClient   Project terakhir yang akan kita bahas adalah DemoSignalR.WinFormClient ini adalah project untuk Client SignalR, tipenya juga sama seperti project Server SignalR yaitu Windows Application.      Untuk menggunakan SignalR di sisi client kita perlu menambahkan beberapa library yang bisa kita install via NuGet.   Berikut adalah daftar paket NuGet yang perlu kita tambahkan di project client.      Untuk kode lengkapnya seperti berikut :     Dan hasilnya adalah seperti berikut :      Selamat MENCOBA :blush:   Referensi :      Introduction to SignalR   Getting Started with SignalR 2   High-Frequency Realtime with SignalR 2   Learn About ASP.NET SignalR  ","categories": ["Visual C#","SignalR"],
        "tags": ["ASP.NET SignalR","SignalR Hubs API","Real-time","Push","remote procedure call","RPC","Hub"],
        "url": "http://coding4ever.net/blog/2016/02/09/pengembangan-aplikasi-real-time-menggunakan-signalr/",
        "teaser": null
      },{
        "title": "Menggunakan Objek Collection dan Transaction Pada Visual Basic 6",
        "excerpt":"Lagi kangen :grin:, udah lama enggak posting tentang Visual Basic 6. Terakhir nulis sekitar 3-4 tahun yang lalu he he :grin:.   Kali ini saya ingin membahas salah satu poin penting tetapi sering kali disepelekan ketika akan membuat aplikasi bisnis yaitu transaction. Padahal fitur ini sangat penting untuk menjaga konsistensi data, karena hampir bisa dipastikan semua aplikasi bisnis menggunakan skema header-detail.     Salah satu poin penting dari transaction adalah atomic, yaitu beberapa perintah dianggap sebagai satu kesatuan. Kalau satu gagal, yang lain juga harus dibatalkan.   Contoh pada saat terjadi order penjualan proses yang terjadi adalah :      Insert 1 kali ke tabel Order   Insert n kali ke tabel OrderDetail   Mengurangi stok barang (tidak di bahas di postingan ini), karena bisa juga diselesaikan dengan database trigger   Ketika insert ke tabel OrderDetail gagal, maka tabel Ordernya juga harus di batalkan (undo), klo enggak ya datanya jadi enggak konsisten, karena ada nota Order yang enggak ada OrderDetailnya.   Nah utk mempermudah proses transaction  ini kita bisa menggunakan objek collection untuk menyimpan objek OrderDetail yang kemudian kita binding ke objek Ordernya. Berhubung Visual Basic 6 tidak mempunyai class collection yang sepadan dengan class collection yang ada di Visual Basic .NET atau bahasa pemrograman .NET lainnya, sebagai gantinya kita bisa menggunakan class Scripting.Dictionary. Tetapi untuk menggunakan class Scripting.Dictionary ini kita harus menambahkan referensi Microsoft Scripting Runtime terlebih dulu.      Dengan asumsi database berikut tabelnya sudah tersedia, langkah berikutnya adalah membuat class Order dan OrderDetail. Kedua class ini dikenal dengan istilah class model, yaitu class-class yang merupakan representasi dari tabel-tabel yang ada di database.         Nah class-class model ini biasanya mempunyai beberapa property yang juga merupakan representasi field-field yang ada di dalam tabel.       Setelah class-class model selesai dibuat, untuk urusan CRUD-nya kita buat class tersendiri atau yang dikenal dengan istilah class-class DAO atau Repository.      Class DAO ini biasanya berisi method-method standar seperti Save, Update, Delete dan Get. Tapi untuk contoh kali ini saya hanya menambahkan method Save. Karena kita ingin insert ke tabel Order dan OrderDetail dianggap sebagai satu kesatuan, maka diterapkanlah konsep transaction dengan menambahkan perintah-perintah transaction seperti BeginTrans, CommitTrans dan RollbackTrans.     Nah klo kita perhatikan di bagian constructor (Class_Initialize), terdapat perintah untuk membuat objek Connection dengan memanggil method GetOpenConnection dari class DbConnection.        Setelah semua kodenya lengkap kita tinggal melakukan testing seperti berikut :     Selamat MENCOBA :blush:  ","categories": ["Visual Basic"],
        "tags": ["collection","transaction","atomic","crud","dao","repository"],
        "url": "http://coding4ever.net/blog/2016/02/11/menggunakan-objek-collection-dan-transaction-pada-visual-basic-6/",
        "teaser": null
      },{
        "title": "Pengembangan Aplikasi Real-time Menggunakan SignalR Bagian #2",
        "excerpt":"Dasar-dasar penggunaan SignalR, sudah saya bahas dipostingan pertama. Jadi dipostingan kedua ini saya hanya ingin berbagai source code lain contoh penggunaan SignalR yaitu source code untuk aplikasi pemesanan tiket real-time.   Cara kerja aplikasi ini masih sederhana sekali yaitu hanya mengirimkan informasi nomor kursi yang dipilih oleh user ke server, kemudian server akan melakukan pengiriman (push) nomor kursi yang dipesan kepada semua client yang sudah terkoneksi ke server.        Selamat MENCOBA :blush:  ","categories": ["Visual C#","SignalR"],
        "tags": ["ASP.NET SignalR","Real-time","Push","tiket"],
        "url": "http://coding4ever.net/blog/2016/02/15/pengembangan-aplikasi-real-time-menggunakan-signalr-bagian-number-2/",
        "teaser": null
      },{
        "title": "Repository Pattern",
        "excerpt":"Pada postingan kali ini saya ingin membahas salah satu design pattern yang sering digunakan ketika bekerja dengan database yaitu Repository Pattern.   Sebenarnya saya kurang tertarik untuk membahas tentang Repository Pattern karena memang sudah banyak artikel atau tutorial yang membahas tentang masalah ini. Tetapi berhubung beberapa postingan saya kedepan membutuhkan pengetahuan tentang Repository Pattern, jadi saya pikir akan lebih baik jika masalah ini juga dibahas di blog ini, dari pada saya harus me-link ke halaman web yang lain.     Akses  terhadap  database  merupakan  bagian  yang  sangat  penting  dari  aplikasi  database. Penggunaan  pattern/pola  yang  sesuai  dapat  memberikan  manfaat  yang sangat  besar. Salah satu pattern  yang  sering digunakan dalam akses database adalah Repository Pattern.   Pattern/pola  ini  digunakan  untuk  menerapkan  konsep separation  of  concern  atau  pemisahan  kode program  berdasarkan  fungsinya.  Semua  kode  untuk  akses  database  harus  dipisahkan dengan kode untuk pengaturan user inteface. Hal ini memungkinkan kode akses database yang dibuat untuk aplikasi desktop,  dengan mudah digunakan untuk aplikasi web. Selain itu penerapan  konsep  separation  of  concern  secara  disiplin,  dapat menghasilkan  kode  program  yang  dapat  dites  secara  otomatis menggunakan  tool Unit Testing.   Repository Pattern  berisi  semua  kode  untuk  mengakses  database.  Semua  kode  yang  sepesifik  terhadap  implementasi  akses database berhenti di sini, lapisan lebih atas tidak boleh tahu bagaimana  akses  database diterapkan,  apakah  menggunakan  ADO.NET murni atau tool ORM/Micro ORM seperti Dapper.NET, Entity Framework atau NHibernate. Lapisan lainya hanya perlu tahu fungsionalitas dari suatu method di dalam class Repository, tidak perlu tahu bagimana method tersebut diimplementasikan.   Idealnya secara logic, arsitektur aplikasi yang kita gunakan seperti berikut :      Tetapi untuk menyederhanakan pembahasan business logic layer bisa kita gabung ke presentation layer, sehingga arsitekturnya menjadi seperti berikut :      Class  Repository biasanya mempunyai beberapa method CRUD standar seperti  Save,  Update, Delete,  GetById  atau  GetAll.  Untuk method-method CRUD lainnya bisa ditambahkan sesuai kebutuhan.   Secara umum ketika menggunakan Repository Pattern setiap table akan dibuatkan class model dan repositorynya.      Class Model/Entity   Selain membuat class repository, setiap  table  juga dibuatkan  class model/entity yang merupakan representasi dari sebuah table, kemudian di dalam class ini juga kita definisikan property-property yang merupakan representasi kolom/field dari sebuah tabel.   Jadi dengan menggunakan class model/entity kita tidak lagi berhubungan dengan baris dan kolom tetapi langsung berhubungan dengan objek dari masing-masing class entity/model. Sehingga ketika kita menuliskan objek Category kemudian diikuti dengan karakter titik (.), IDE Visual Studio bisa membantu kita dengan fasilitas IntelliSensenya untuk menampilkan daftar property apa saja yang tersedia, sehingga aktivitas mengingat nama field berikut tipe datanya sudah tidak diperlukan lagi :)      Berikut contoh class model/entity dari tabel Category     Membuat Interface   Ketika berbicara tentang Repository Pattern, kita tidak akan jauh-jauh dari yang namanya interface. Interface di sini berfungsi sebagai kontrak yang mendiskripsikan method/operasi apa saja yang harus diimplementasikan oleh sebuah class. Contoh beberapa method/operasi standar yang biasa digunakan untuk mengakses database :      Menambahkan data baru (Save)   Mengupdate/edit data (Update)   Menghapus data (Delete)   Menampilkan semua data (GetAll)   Nah berdasarkan method standar di atas kita bisa membuat interface dasar yang akan digunakan oleh interface-interface yang lebih spesifik/khusus.      Karakter T pada kode di atas merupakan indikator tipe generic, artinya nilai T tersebut bisa diganti dengan tipe apapun selama tipe tersebut berupa class.   Setelah membuat interface dasar, kita bisa membuat interface yang lebih spesifik/khusus.         Pada kode di atas, nilai T diganti dengan class Category dan Product. Selain itu interface ICategoryRepository dan IProductRepository merupakan turunan dari interface IBaseRepository, artinya interface ICategoryRepository dan IProductRepository akan mewarisi semua method abstract dari interface IBaseRepository.   Penggunaan interface dalam menulis program, dikenal dengan istilah Programming  to  interface yang merupakan best  practice  yang  sebaiknya kita ikuti dalam  menulis  program. Interface memisahkan apa(what) dengan bagaimana(how) nantinya hal tersebut implementasikan. Dengan  menggunakan  interface,  struktur  kode  kita  menjadi  loosely-coupled,  karena memungkinkan secara dinamis mengganti implementasi.   Membuat Class Repository   Setelah membuat interface repository (ICategoryRepository dan IProductRepository) kita lanjutkan dengan membuat class repository yang mengimplementasikan interface ICategoryRepository dan IProductRepository. Masing-masing class repository ini akan mengimplementasikan semua method abstract yang ada di dalam interface ICategoryRepository dan IProductRepository.       Kemudian lengkapi kodenya seperti berikut :       Membuat Class Context   Di dalam Repository Pattern, class context adalah class yang bertanggung jawab untuk berinteraksi secara langsung dengan database. Jadi class contextlah yang bertanggungjawab untuk membuat koneksi, menjalankan perintah sql seperti insert, update, delete dan select atau objek database seperti store procedure dan function.   Di dalam contoh ini saya tidak menggunakan library ADO.NET secara langsung untuk berinteraksi dengan database, tetapi menggunakan Micro ORM Dapper.NET. Jadi kita akan membuat interface dan class konkretnya dengan nama IDapperContext dan DapperContext. Berikut kode lengkapnya :        Menghubungkan Class Context dan Class Repository   Karena class repository merupakan class yang bertanggungjawab untuk urusan CRUD, tentunya  class ini membutuhkan objek dari class Context dalam prosesnya. Nah untuk melewatkan objek context ke class repository bisa dengan menggunakan property atau constructor. Untuk contoh di sini kita menggunakan constructor.         Testing Class Repository   Setelah class Repository selesai dibuat, berikutnya kita akan melakukan tes sederhana dengan menggunakan aplikasi console. Dari hasil tes ini akan terlihat bahwa aplikasi pada layer presentation (UI) akan berkerja dengan object dan collection, jadi sudah tidak ada hubungannya lagi dengan database.     Selamat MENCOBA :blush:  ","categories": ["Repository Pattern","Dapper .NET","Visual C#"],
        "tags": ["repository pattern","soc","Unit Testing","ORM","ADO.NET","CRUD","entity"],
        "url": "http://coding4ever.net/blog/2016/02/22/repository-pattern/",
        "teaser": null
      },{
        "title": "Unit of Work Pattern",
        "excerpt":"Kalau sudah membahas Repository Pattern rasanya kurang manteb jika tidak membahas Unit of Work Pattern, dua pattern ini biasanya sering digunakan secara bersamaan. Kata emak-emak “ibarat sop ayam tanpa garam,  rasanya hambar” he he :grin:   Unit of Work Pattern digunakan untuk mengelompokan satu atau beberapa operasi (biasanya operasi CRUD) ke dalam satu kesatuan transaksi. Jika salah satu operasi gagal, yang lain juga harus dibatalkan. Jadi cara kerja Unit of Work Pattern ini mirip dengan salah satu fitur andalan DBMS yaitu transaction.     Unit of Work Pattern sendiri merupakan salah satu pattern kesukaan Microsoft, ini bisa dilihat dari salah satu produk open source Microsoft yang menggunakan pattern ini yaitu Entity Framework. Bagi Anda yang sudah pernah mencoba Entity Framework mungkin sudah tidak asing lagi dengan class EF Context yang menggunakan Unit of Work Pattern.   Membuat Interface dan Class Konkret Unit of Work   Sama seperti pembahasan Repository Pattern, impelmentasi Unit of Work Pattern juga disarankan menggunakan interface.   Berdasarkan contoh project Repository Pattern, kita akan menambahkan interface baru dengan nama IUnitOfWork. Di dalam interface ini kita membuat beberapa property dengan tipe interface repository.      Setelah itu kita buatkan class konkretnya dengan nama UnitOfWork, dan ingat class ini harus mengimplementasikan interface IUnitOfWork.      Terakhir kita lengkapi kode class UnitOfWork seperti berikut :     Testing Class Unit of Work   Sebagai penutup kita akan melakukan tes sederhana dengan menggunakan aplikasi console. Dari hasil tes ini akan terlihat begitu mudahnya menerapkan konsep transaction menggunakan Unit of Work Pattern.     Selamat MENCOBA :blush:  ","categories": ["Visual C#","Dapper .NET","Unit of Work Pattern"],
        "tags": ["Unit of Work Pattern","Repository Pattern","transaction","crud"],
        "url": "http://coding4ever.net/blog/2016/02/24/unit-of-work-pattern/",
        "teaser": null
      },{
        "title": "Membuat User Function Library pada Crystal Report .NET",
        "excerpt":"Crystal Report .NET selain memudahkan kita dalam mendesain report/laporan juga menyediakan puluhan fungsi yang siap pakai (built-in function) yang bisa mempercepat dalam pembuatan report/laporan. Tetapi ada waktunya ketika kita membutuhkan fungsi khusus yang tidak disediakan oleh Crystal Report .NET, dan kabar baiknya Crystal Report .NET juga menyediakan fasilitas untuk membuat fungsi tambahan yang dikenal dengan istilah User Function Library (UFL).     User Function Library (UFL) adalah class library .NET yang dibuat dengan beberapa aturan sebagai berikut :      Nama project harus di beri prefix CRUFL. Misal kita ingin membuat project dengan nama CrystalReportHelper, nama project ini harus kita tambahkan prefix CRUFL , sehingga nama projectnya menjadi CRUFLCrystalReportHelper.   Project harus terdiri dari interface dan class konkret   Setiap interface harus mempunyai attribut COM yang mempunya tiga nilai yaitu ComVisible, InterfaceType dan Guid   Begitu juga class konkret harus mempunyai attribut COM yang mempunya tiga nilai yaitu ComVisible, ClassInterface dan Guid   Mengaktifkan pilihan Register for COM interop (Project -&gt; Properties -&gt; Build)   Menginstall hasil build ke GAC(Global Assembly Cache)   Oke kita langsung saja, kita awali dengan membuat User Function Library Class Library.   Membuat UFL Class Library           Klik menu File -&gt;New -&gt; Project …            Pada dialog New Project aktifkan pilihan Visual C# kemudian pada pilihan Templates pilih Class Library              Nama project harus diberi prefix CRUFL            Setelah project berhasil dibuat, klik kanan nama project -&gt; properties            Klik tab Build, kemudian aktifkan pilihan Register for COM interop              Mengaktifkan pilihan Register for COM interop akan menyebabkan assembly secara otomatis diregister oleh utility regasm.exe, ketika project dibuild/compile. Jadi, kita tidak perlu menjalankan regasm.exe secara manual via command prompt.       Setelah project berhasil dibuat, kita akan menambahkan interface dan class konkretnya. Untuk contoh kali ini kita akan membuat fungsi terbilang yang biasanya digunakan dalam pembuatan aplikasi ritel.   Kita akan mulai dengan interface terlebih dulu.   Membuat Interface dengan Attribut COM           Hapus class default (Class1)            Tambahkan sebuah interface dengan nama ITerbilang, kemudian tambahkan juga method abstractnya dengan nama TerbilangIndonesia                   Kemudian tambahkan attribut COM              Attribut COM untuk interface terdiri dari tiga nilai yaitu ComVisible, InterfaceType dan Guid. Attribut ini perlu kita tambahkan agar class library yang kita buat bisa dikenali oleh Crystal Report.       Untuk mendapatkan nilai GUID, bisa menggunakan tool GUID yang sudah disediakan oleh Visual Studio .NET. Tool ini bisa diaktifkan melalui menu Tools -&gt; Create GUID.              Setelah menyelesaikan pembuatan interface ITerbilang, kita lanjutkan dengan pembuatan class konkretnya.   Membuat Class dengan Attribut COM           Tambahkan sebuah class dengan nama Terbilang. Class harus mengimplementasikan interface ITerbilang.              Karena class Terbilang mengimplementasikan interface ITerbilang, maka class Terbilang wajib mendefinisikan ulang (override) method TerbilangIndonesia.            Kemudian tambahkan Attribut COM              Attribut COM untuk class  terdiri dari tiga nilai yaitu ComVisible, ClassInterface dan Guid. Setelah itu lengkapi kode method TerbilangIndonesia seperti berikut :             Langkah berikutnya adalah mengeset Strong-Name key, ini adalah peraturan berikutnya yang harus kita ikuti agar class User Function Library (UFL) yang sudah kita buat bisa di daftarkan ke GAC(Global Assembly Cache).   Mengeset Strong-Name key      Klik kanan project -&gt; Properties   Aktifkan tab signing, kemudian aktifkan pilihan Sign the assembly        Pada pilihan combo Choose a string name key file, pilih &lt;New…&gt; setelah itu akan tampil dialog Create Strong Name Key kemudian isikan nilai input key file name, misal dengan nama CRUFLCrystalReportHelperKey.              Terakhir lakukan proses Build/Compile, melalui menu Build -&gt; Build Solution   Mendaftarkan Assembly ke GAC(Global Assembly Cache)   Hasil build/compile dari project CRUFLCrystalReportHelper, akan menghasilkan file dengan ekstensi .dll atau yang dikenal dengan istilah file Assembly. File ini harus kita daftarkan terlebih dulu ke GAC(Global Assembly Cache) agar bisa dikenali oleh Crystal Report.         Berikut langkah-langkah untuk mendaftarkan file Assembly ke GAC(Global Assembly Cache) :           Aktifkan Visual Studio Command Prompt sesuai dengan versi Visual Studio .NET Anda                                 Gunakan tool gacutil, dengan format perintah seperti berikut          gacutil -if &lt;Assembly Name&gt;      contoh :      gacutil -if CRUFLCrystalReportHelper.dll         Jika berhasil akan tampil pesan Assembly successfully added to the cache.   Testing User Function Library   Setelah menyelesaikan project CRUFLCrystalReportHelper dan mendaftarkannya ke GAC(Global Assembly Cache), kita akan menambahkan project baru dengan tipe WinForm Application.      Setelah itu tambahkan juga item Crystal Report.      Kemudian desain reportnya seperti berikut :      Selanjutnya kita akan menambahkan formula baru dengan nama terbilang, caranya dengan mengklik kanan Formula Fields -&gt; New …         Setelah itu akan tampil dialog Formula Workshop      Fungsi terbilang TerbilangIndonesia yang sudah kita buat masuk ke dalam kelompok Additional Functions -&gt; COM and .NET UFLs (u212com.dll). Fungsi ini membutuhkan parameter nominal yang nilainya kita isi dengan field total dari tabel Jual.      Kemudian tambahkan formula terbilang ke dalam report.      Terakhir kita running project, dan lihat hasil dari formula terbilangnya.      Selamat MENCOBA :blush:  ","categories": ["Visual C#","Crystal Reports .NET"],
        "tags": ["Crystal Reports .NET","User Function Library","UFL","GAC","Global Assembly Cache","GUID","Attribut COM","Terbilang"],
        "url": "http://coding4ever.net/blog/2016/03/26/membuat-user-function-library-pada-crystal-report-net/",
        "teaser": null
      },{
        "title": "Repository Pattern Bagian #2",
        "excerpt":"Melanjutkan pembahasan Repository Pattern, kali ini kita akan membahas salah satu manfaat menggunakan Repository Pattern. Selain digunakan untuk menerapkan konsep separation  of  concern atau pemisahan kode program berdasarkan fungsinya. Pola/pattern ini juga akan mempermudah kita untuk mengganti implementasi class secara cepat karena dari sisi client/layer presentation sudah tidak tergantung dengan layer data access, sehingga jika terjadi perubahan pada metode akses data di repsository, layer presentation sama sekali tidak perlu diubah ataupun jika terjadi perubahan hanya sedikit kode yang perlu kita ubah. Desain struktur seperti ini disebut lousley coupled.     Repository mengenkapsulasi method-method untuk manipulasi dan query data dalam sebuah class yang berhubungan dengan class model/business entity. Sebuah repository biasanya memiliki method CRUD (Create, Read, Update, Delete) standar seperti : Save, Update, Delete, dan GetAll seperti yang didefenisikan di interface IBaseRepository generic/umum sebagai berikut :      Kemudian kita definisikan interface yang lebih spesifik untuk masing-masing class repository yang mewarisi interface generic IBaseRepository. Contoh interface ICategoryRepository dan IProductRepository.         Sebagai contoh kita akan membuat aplikasi menggunakan database Northwind, dengan menggunakan Entity Framework sebagai engine untuk Data Access Layernya. Karena di atas kita sudah mendefinisikan interface ICategoryRepository, kita tinggal membuat class implementasinya misal dengan nama class CategoryRepository.     Nah dari sisi client class-class Repository diakses lewat interfacenya. Pemrograman melalui interface ini menjadikan client tidak tergantung dengan layer data access, sehingga jika terjadi perubahan pada metode akses data di repsository, layer presentation sama sekali tidak perlu diubah ataupun jika terjadi perubahan hanya sedikit kode yang perlu kita ubah. Desain struktur seperti ini disebut lousley coupled.      Pada gambar di atas deklarsi objek categoryRepository tidak langsung menggunakan tipe class repository (CategoryRepository) tetapi menggunakan interface ICategoryRepository (konsep program to interfaces), tujuannya adalah untuk mempermudah kita mengganti implementasi dari class repositorynya.   Jadi kalo seandainya terjadi perubahan implementasi dari class repositorynya, kita tinggal buat class repository yang baru, kemudian mengganti implementasi classnya di sisi client. Contoh kasus class CategoryRepository di atas menggunakan Entity Framework sebagai engine untuk Data Access Layernya, karena alasan performance akhirnya kita memutuskan untuk mengganti Entity Framework dengan ORM lain yang lebih ringan misal Dapper .NET. Untuk melakukan ini kita tinggal buat class repository yang baru, misal dengan nama CategoryRepositoryDapper kemudian mengganti implementasi classnya di sisi client. Mudah bukan :blush:                  Selamat MENCOBA :blush:  ","categories": ["Repository Pattern","Dapper .NET","Entity Framework","Visual C#"],
        "tags": ["repository pattern","lousley coupled","class model","business entity","Data Access Layer"],
        "url": "http://coding4ever.net/blog/2016/06/28/repository-pattern-bagian-number-2/",
        "teaser": null
      },{
        "title": "Unit Testing Menggunakan NUnit",
        "excerpt":"Testing merupakan salah satu fase penting yang harus dilakukan ketika membuat sebuah aplikasi. Testing biasanya dilakukan secara berbarengan pada saat menulis kode. Ada banyak gaya dalam melakukan testing dan yang paling favorit biasanya adalah gaya konvensional. Dengan menggunakan gaya ini programmer desktop akan menggunakan console/winform untuk melihat hasil tes dari sebuah unit (fungsi/method) sedangankan programmer web langsung menggunakan halaman web.     Ini adalah gaya lama yang kita pelajari dari jaman Majapahit #eh, maksudnya masa-masa kuliah dulu :grin:, kan enggak keren banget udah jadi programmer pro (programmer yang udah kerja) tapi testingnya masih bergaya mahasiswa :grin:      Dengan testing gaya jadul ini, kita yang harus melakukan evaluasi terhadap hasil tesnya. Contoh tes di atas 5 + 2 kok hasilnya 10. Bayangkan klo kita kurang teliti bakalan jadi bug di kemudian hari.   Jika Anda bosan dengan gaya ini (konvensional/jadul/mahasiswa) dan ingin naik level, kita bisa menggunakan tool yang memang dibuat khusus untuk melakukan unit testing seperti  NUnit.      Dengan menggunakan tool unit testing, komputer-lah yang melakukan evaluasi terhadap hasil tesnya. Kita tinggal duduk manis he he :blush:   Jenis-jenis Testing   Sebenarnya ada banyak jenis-jenis testing, tetapi karena keterbatasan waktu dan ilmu, saya hanya membahas jenis-jenis testing berikut :      Unit Testing   Coverage Testing   Integration Testing   Performance Testing   Jadi kita akan membahas Unit Testing terlebih dulu.   Unit testing   Unit testing adalah testing di level paling detail dari aplikasi. Artinya, testing di level method/function. Tes ini biasanya dilakukan oleh programmer dan bukan oleh tester, karena membutuhkan pengetahuan yang rinci tentang desain aplikasi dan kode yang ditulis. Ada beberapa tool yg bisa digunakan untuk keperluan ini tergantung dari bahasa pemrograman yang kita gunakan. Misal di .NET (NUnit), Java (JUnit) dan PHP (PHPUnit).   Di postingan ini kita akan menggunakan NUnit sebagai tool untuk melakukan unit testing. NUnit adalah framework unit testing yang digunakan untuk bahasa pemrograman .NET. NUnit sendiri merupakan hasil portingan dari JUnit. Sebelum menggunakan NUnit tentunya harus kita download dan kemudian menginstallnya.   Membuat Project   Untuk uji coba unit testing ada dua project yang akan kita buat yaitu :           Project CalculatorLib – Ini adalah project target yang akan kita tes untuk setiap unitnya (fungsi/method).            Project CalculatorUnitTest – Ini adalah project unit testing yang digunakan untuk mengetes project CalculatorLib.       Membuat Project CalculatorLib   Project CalculatorLib adalah project yang akan kita buatkan unit testingnya, project ini bertipe Class Library.      Nah di project ini, kita akan membuat class baru dengan nama Calculator kemudian menambahkan empat method yaitu Tambah, Kurang, Kali dan Bagi.      Coba perhatikan gambar di atas, method Tambah sengaja dibuat salah dengan menggunakan operator kali (*), biar nanti keliatan efeknya ketika dites menggunakan NUnit.   Setelah project CalculatorLib selesai kita lanjut dengan membuat project CalculatorUnitTest.   Membuat Project CalculatorUnitTest   Project CalculatorUnitTest adalah project unit testing yang digunakan untuk mengetes project CalculatorLib, project ini juga bertipe Class Library.      Di project ini, kita akan menambahkan class baru dengan nama CalculatorTest yang mempunyai empat method yaitu TambahTest, KurangTest, KaliTest dan BagiTest. Jadi konvensi penamaannya adalah untuk nama class di tambah akhiran Test. Contoh class Calculator menjadi CalculatorTest. Untuk method juga sama, misal method Tambah menjadi TambahTest, method Kurang menjadi KurangTest begitu seterusnya.      Method-method yang ada di class unit testingnya, biasanya bersifat independent artinya masing-masing method ini bisa dijalankan/eksekusi secara mandiri (tidak tergantung dengan method yang lain) sehingga kita bisa menjalankan unit testing secara berulang.   Menambahkan Referensi Project CalculatorLib   Agar project CalculatorUnitTest bisa mengakses semua class dan method yang ada di project CalculatorLib, kita terlebih dulu harus menambahkan referensi CalculatorLib. Caranya seperti berikut :           Klik kanan node References -&gt; Add Reference…                   Aktifkan panel Solution kemudian pilih project CalculatorLib                   Klik tombol Ok, kemudian cek lagi node References, seharusnya sudah ada tambahan library CalculatorLib              Kemudian lengkapi kode class CalculatorTest, seperti gambar di bawah ini.      Menambahkan Library Unit Testing   Seperti penjelasan saya di awal postingan, untuk contoh unit testing ini kita akan menggunakan NUnit. Berikut langkah-langkah menambahkan library NUnit           Klik kanan node References -&gt; Add Reference…                   Setelah tampil dialog Reference Manager, aktifkan panel Assemblies -&gt; Extensions kemudian aktifkan pilihan nunit.framework                   Klik tombol Ok, kemudian cek lagi node References, seharusnya sudah ada tambahan library nunit.framework              Menulis Unit Testing   Setelah menambahkan library unit testing, project CalculatorUnitTest tidak otomatis langsung dikenali oleh  tool unit testing, ada hal-hal lainnya yang perlu kita  ketahui dalam menulis unit testing menggunakan Nunit yaitu :      Attributes   Assertions   Attributes   Digunakan untuk memberi tag/penanda  class dan method yang akan dites. Ada dua attribut yang sering digunakan yaitu attribut [TestFixture] untuk menandai class dan attribut [Test] untuk menandai method. Contoh :      Selain itu ada attribut lain yang digunakan untuk menandai method yang berfungsi sebagai method inisialisasi yaitu attribut [SetUp]. Contoh :      Jadi method Init di atas akan dijalankan terlebih dulu sebelum tool Nunit menjalankan method-method lain yang ditandai dengan attribut [Test].   Assertions   Merupakan sekumpulan method static yang digunakan untuk mengevaluasi method yang akan dites.  Jadi method-method assertions akan mengembalikan nilai boolean (true/false). Contoh :      Pada gambar di atas kita menggunakan salah satu method Assertions yaitu method AreEqual untuk membandingkan dua buah nilai, yaitu nilai yang di harapkan (expected) dan nilai aktual. Nilai expected  kita inputkan secara manual sedangkan nilai aktual dihasilkan dari pemanggilan method. Coba perhatikan potongan kode berikut :      Dari hasil pemanggilan method Tambah(5, 2), jika menghasilkan nilai 7 maka method AreEqual akan mengembalikan nilai true yang artinya tes berhasil karena sesuai dengan nilai yang diharapkan yaitu 7 selain itu akan mengembalikan nilai false/gagal.   Untuk referensi method-method Assertions lainnya bisa dicek disini.   NUnit GUI Runner   Merupakan tool GUI bawaan NUnit yang digunakan untuk menjalankan project unit testing. Tool ini membutuhkan file assembly (dll) dari project unit testing. Jadi project CalculatorUnitTest harus kita build terlebih dulu untuk menghasilkan file assembly(CalculatorUnitTest.dll), kemudian kita buka menggunakan tool NUnit GUI Runner.      Caranya dari menu File -&gt; Open Project kemudian cari hasil build project CalculatorUnitTest (CalculatorUnitTest.dll).         Untuk memulai tes, klik tombol Run      Dari gambar di atas hanya method Tambah yang gagal melewati unit testing, coba kita cek kode unit testnya.      Dari kode di atas 5 + 2 seharusnya menghasilkan nilai 7 (nilai expected/diharapkan), tetapi dari hasil unit testingnya malah menghasilkan nilai 10, dari mana datangnya nilai 10 ini ?      Dari sini kita sudah bisa menebak ada yang salah dengan method Tambahnya, coba kita cek lagi method Tambah dari class Calculator.      Ops!!! ternyata benar ada kesalahan logic yaitu salah operator di method Tambah yang seharusnya menggunakan operator tambah (+) malah menggunakan operator kali (*), sehingga wajar 5 * 2 menghasilkan nilai 10 bukannya 7. Jadi harus kita benarin dulu operatornya kemudian build ulang.   Setelah itu kita cek lagi hasil unit testingnya      Selamat MENCOBA :blush:   Referensi :      NUnit   NUnit Quick Start   Writing Tests  ","categories": ["Software Testing"],
        "tags": ["software testing","unit testing","nunit","junit","Attributes","Assertions","TestFixture","NUnit GUI Runner"],
        "url": "http://coding4ever.net/blog/2016/07/20/unit-testing-menggunakan-nunit/",
        "teaser": null
      },{
        "title": "Coverage Testing Menggunakan NUnit, OpenCover dan ReportGenerator",
        "excerpt":"Sudah menggunakan unit testing ? Klo belum mampir ke sini dulu ya :blush:   Kali ini kita akan membahas tentang coverage testing yaitu pengetesan yang dilakukan untuk mengecek apakah unit testing yang dibuat telah meng-cover semua kode yang perlu dites. Jika unit testingnya terlalu sedikit atau waktu membuat unit testingnya asal-asalan biasanya coverage testingnya akan gagal.        Mengecek satu-persatu unit testing yang dibuat oleh programmer apakah sudah sesuai dengan kode yang perlu dites jelas tidak mungkin, untungnya sudah tersedia banyak tool yang bisa melakukkannya secara otomatis.   Berikut beberapa tool yang bisa digunakan untuk melakukan coverage testing di dunia .NET yaitu :      NUnit   OpenCover   Report Generator   Duet maut ketiga tool di atas bisa kita gunakan untuk melakukan prosedur coverage testing. Untuk mendownloadnya Anda tinggal klik link di atas, khusus untuk OpenCover dan Report Generator sebaiknya disimpan di folder yang sama.      Proses Coverage Testing   Secara umum proses coverage testing menggunakan ke tiga tool di atas bisa di gambarkan seperti berikut      Keterangan gambar :      NUnit tool menjalankan prosedur unit testing terhadap file library yang sudah ditentukan   Dari proses poin 1 akan digunakan OpenCover untuk mengenerate file hasil coverage test dalam format xml. Karena file hasil generatenya dalam format xml, tentu akan menyulitkan kita untuk membacanya, makanya kita butuh tool terakhir yaitu Report Generator   Report Generator digunakan untuk membuat laporan format HTML yang lebih manusiawi sehingga mudah dibaca berdasarkan file coverage.xml   Berdasarkan keterangan di atas kita bisa menuliskan batch command untuk prosedur coverage testing seperti berikut :   Tahapan poin 1 dan 2   '1. menjalankan OpenCover untuk mengenerate file CodeCoverageResult.xml  OpenCover.Console.exe -target:nunit-console.exe -targetargs:\"/nologo /noshadow \"\"Library.NUnitTest.dll\"\"\" -filter:+[*]* -register:user -output: CodeCoverageResult.xml  Tahapan poin 3   '2. menjalankan ReportGenerator untuk mengenerate laporan format HTML yang lebih mudah dibaca berdasarkan file CodeCoverageResult.xml  ReportGenerator.exe -reports CodeCoverageResult.xml -targetdir: _CodeCoverageReport  Persiapan Coverage Testing   Sama seperti pembahasan unit testing kita juga membutuhkan dua project yaitu project target dan project unit testing. Untuk contoh disini kita sudah punya dua project yaitu KRSoftwareLib dan KRSoftwareLibUnitTest.      Project KRSoftwareLib mempunyai sebuah class yaitu DayHelper dan mempunyai dua method GetIndonesianDay dan Weekday yang akan kita buatkan unit testingnya.      Nah ini unit testing dari method GetIndonesianDay.      Setelah project KRSoftwareLibUnitTest-nya selesai, kemudian dilanjutkan dengan proses build project, baru kita jalankan prosedur coverage testing :   '1. menjalankan OpenCover untuk mengenerate file CodeCoverageResult.xml  \"C:\\CoverageTesting\\opencover.4.6.519\"\\OpenCover.Console.exe -target:\"C:\\Program Files (x86)\\NUnit 2.6.4\\bin\"\\nunit-console.exe -targetargs:\"/nologo /noshadow \"\"C:\\CoverageTesting\\KRSoftwareLibUnitTest\\bin\\Debug\\KRSoftwareLibUnitTest.dll\"\"\" -filter:\"+[\"KRSoftwareLib\"]*\" -register:user -output:\"CodeCoverageResult.xml\"     '2. echo menjalankan ReportGenerator untuk mengenerate laporan format HTML yang lebih mudah dibaca berdasarkan file CodeCoverageResult.xml  \"C:\\CoverageTesting\\ReportGenerator_2.4.5.0\\bin\"\\ReportGenerator.exe -reports:\"CodeCoverageResult.xml\" -targetdir:\"_CodeCoverageReport\"     Dari proses coverage test di atas akan menghasilkan coverage test yang bagus, karena semua kondisi sudah dites. Berikut adalah hasil coverage testnya:      Coba perhatikan kolom Line coverage dan Branch coverage nilainya 100% (warna hijaunya penuh).      Kita juga bisa melihat detail coverage test dari class DayHelper.cs :      Nah sekarang kita coba menonaktifkan beberapa baris kode tesnya untuk melihat perbedaan nilai kolom Line coverage dan Branch coverage seperti ini :      Hasil coverage testingnya jadi jelek alias gagal karena hanya dua kondisi yang di tes yaitu hari Senin dan Selasa.      Dari detail coverage testnya class DayHelper.cs juga kelihatan baris/kondisi yang belum di tes:      Gampang bukan ? Dengan coverage testing ini, kita jadi mudah untuk mendeteksi tingkat keseriusan programmer dalam membuat unit testing.   Build Events   Sebenarnya pembahasan coverage testingnya sudah selesai, tapi berhubungan prosedur coverage testing di atas masih dijalankan secara manual via command prompt tentu akan menyulitkan kita untuk mengecek unit testingnya setiap ada perubahan. Salah satu solusinya adalah dengan memanfaatkan fasilitas Build Events yang sudah disediakan oleh Visual Studio .NET.   Nah berikut skrip Build Events yang harus kita buat untuk menjalankan prosedur coverage testing di atas secara otomatis, setiap kali project unit testingnya di build.   echo \"set lokasi tool coverage testing\" set OpenCoverDir=\"C:\\CoverageTesting\\opencover.4.6.519\" set NUnitRunnerDir=\"C:\\Program Files (x86)\\NUnit 2.6.4\\bin\" set ReportGeneratorDir=\"C:\\CoverageTesting\\ReportGenerator_2.4.5.0\\bin\"  echo \"set coverage xml\" set CodeCoverageResult=\"CodeCoverageResult.xml\"  echo \"set target library yang mau dites, misal KRSoftwareLib\" set TargetLib=\"KRSoftwareLib\"  echo \"generate coverage result xml format\" call %OpenCoverDir%\\OpenCover.Console.exe -target:%NUnitRunnerDir%\\nunit-console.exe -targetargs:\"/nologo /noshadow $(TargetFileName)\" -filter:\"+[%TargetLib%]*\" -register:user -output:%CodeCoverageResult%  echo \"generate coverage result html format\" call %ReportGeneratorDir%\\ReportGenerator.exe -reports:%CodeCoverageResult% -targetdir:_CodeCoverageReport     Jadi setiap kita melakukan build project, prosedur coverage testing otomatis akan dijalankan.      Selamat MENCOBA :blush:   Referensi :      Nunit   OpenCover   Report Generator  ","categories": ["Software Testing"],
        "tags": ["software testing","unit testing","Coverage Testing","nunit","OpenCover","ReportGenerator","Build Events"],
        "url": "http://coding4ever.net/blog/2016/07/22/coverage-testing-menggunakan-nunit-opencover-reportgenerator/",
        "teaser": null
      },{
        "title": "Integration Testing Menggunakan NUnit",
        "excerpt":"Dasar-dasar unit testing sudah kita pelajari, dilanjutkan dengan coverage testing untuk mengecek tingkat keseriusan programmer dalam membuat unit testing. Semakin sedikit unit testing yang dibuat atau asal-asalan pada saat membuat unit testing bakalan dijamin coverage testingnya akan gagal.     Pada postingan kali ini kita akan membahas tentang integration testing yaitu tes yang dilakukan secara berkelompok. Sebagai contoh, dalam pengembangan aplikasi bisnis hampir bisa dipastikan 100% akan menggunakan database.  Sehingga perlu kita tes apakah kode program yang kita buat dapat berinteraksi dengan database sesuai harapan atau tidak. Jadi kita tidak perlu lagi melakukan pengetesan secara serius di level UI (console, winform atau halaman web) karena sudah di lakukan pengetesan  melalui integration testing.   Contoh kita punya dua method CRUD seperti berikut :      Kemudian kita buatkan unit testingnya seperti ini :      Unit testing pertama yang akan kita tes adalah method GetByID, method ini mempunyai satu parameter yaitu nik yang nilainya kita isi dengan 12345. Setelah pemanggilan method GetByID (baris 30) seharusnya objek pegawai akan terisi dengan data pegawai dengan nik 12345. Setelah itu kita membuat skenario pengetesan seperti berikut :      Objek pegawai tidak boleh null (baris 32)   Nik pegawai harus sama dengan 12345 (baris 33)   Nama pegawai harus sama dengan Janoe Hendarto, S.Kom (baris 34)   Untuk alamat dan kota nilainya juga harus sama dengan gambar di atas (baris 35 – 36)   Setelah itu kita jalankan unit testingnya menggunakan NUnit GUI Runner, dan hasilnya adalah …      Unit testingnya ternyata gagal karena kondisi yang sudah kita tentukan di baris 32 bahwa objek pegawainya tidak boleh null tidak terpenuhi. Ada dua kemungkinan penyebab kegagalan ini yaitu :      Kita salah mengeset nilai niknya, jadi kemungkinan niknya bukan 12345 atau ..   Datanya memang belum ada   Jadi kita akan cek dulu kemungkinan yang nomor 2 yaitu dengan melihat isi tabel Pegawai      Ternyata memang benar datanya yang belum ada he he :grin:, berarti harus kita tambahkan dulu data pegawai dengan nik 12345.      Setelah itu kita cek lagi unit testingnya.      Ternyata masih gagal tapi dengan kondisi yang berbeda, dari gambar di atas terlihat nilai yang kita harapkan adalah Janoe Hendarto, S.Kom sedangkan yang ada di database adalah Janoe Hendarto, M.Kom beda di gelarnya yaitu S.Kom dan M.Kom, berarti kegagalan kedua ini kita yang salah mengeset kondisi unit testingnya. Solusinya kita tinggal ganti S.Kom menjadi M.Kom.         Kemudian kita cek lagi unit testingnya      Akhirnya tes pertama berhasil :blush:   Gimana ? Lebih cepat dan gampang bukan dari pada melakukan pengetesan dengan cara jadul via console, winform, atau halaman web he he just kidding :grin:   Berikutnya kita akan tes method yang kedua yaitu GetAll, kode pengetesannya seperti ini :      Method GetAll di atas akan mengembalikan kumpulan/collection dari objek pegawai. Setelah itu kita membuat skenario pengetesan seperti berikut :      Jumlah pegawainya ada 3 orang/record (baris 43)   Di baris 46 kita membuat objek pegawai kemudian mengeset datanya dengan data pegawai terakhir (index = 2)   Mulai baris 48 – 52, kita melakukan pengetesan seperti pengetesan method GetByID   Untuk keperluan tes ini kita tambahkan lagi dua record data pegawai, sehingga totalnya adalah 3 record sesuai dengan skenario nomor 1 di atas.      Setelah itu kita jalankan unit testingnya.      Karena kondisi pengetesan (unit testing) sudah sesuai dengan data riil database, pengetesanpun langsung berhasil.   Nah sampai di sini sudah dua method CRUD yang selesai kita tes, dan untuk contoh pengetesan method CRUD lainnya seperti Save, Update dan Delete kodenya lebih kurang seperti berikut:               Selamat MENCOBA :blush:  ","categories": ["Software Testing"],
        "tags": ["software testing","unit testing","integration testing","crud"],
        "url": "http://coding4ever.net/blog/2016/07/28/integration-testing-menggunakan-nunit/",
        "teaser": null
      },{
        "title": "Integration Testing Menggunakan NUnit dan NDbUnit",
        "excerpt":"Melanjutkan pembahasan tentang Integration Testing Menggunakan NUnit, di mana pada postingan sebelumnya  kita menggunakan contoh kasus integration testing  pada pengembangan aplikasi database, sehingga perlu kita tes apakah kode program yang kita buat dapat berinteraksi dengan database sesuai harapan atau tidak.     Untuk method CRUD dan unit testingnya masih menggunakan contoh yang sama dengan postingan sebelumnya.      Contoh method CRUD      Contoh Unit Testing   Sebagai pengingat untuk melakukan integration testing pada aplikasi database, kita harus menyiapkan data untuk tesnya terlebih dulu yaitu dengan meng-INSERT-kan beberapa data yang sesuai dengan kondisi yang kita set pada unit testing. Cara manual sudah kita lakukan pada postingan sebelumnya, dan untuk postingan kali ini kita akan menggunakan library tambahan yang disebut dengan NDbUnit. Dengan NDbUnit kita dapat me-reset kondisi database sesuai keinginan setiap kali tes akan dijalankan. Me-reset di sini maksudnya NDbUnit akan mengosongkan isi database terlebih dulu kemudian mengisikan data tesnya berdasarkan data yang sudah kita siapkan dalam format XML. Jadi pastikan kita tidak menggunakan database production pada saat menjalankan NDbUnit.   Menggunakan NDbUnit   NDbUnit bisa dengan mudah kita tambahkan melalui NuGet. Ada banyak pilihan library NDbUnit, disesuaikan dengan database yang kita gunakan. Untuk contoh di sini saya menggunakan NDbUnit.SqlClient untuk database SQL Server.      Setelah menambahkan library NDbUnit, langkah berikutnya adalah menambahkan file  .NET dataset schema definition (xsd) untuk setiap tabel yang akan di tes. Contoh kita punya tabel Pegawai dengan struktur seperti berikut:      Kemudian kita tinggal buatkan file.NET dataset schema definition (xsd) sesuai dengan struktur tabel di atas.      Berikutnya kita tambahkan file XML yang berisi data Pegawai yang akan di-INSERT-kan secara otomatis ke dalam database oleh NDbUnit.      Terakhir kita tambahkan method ResetDatabase pada class PegawaiRepositoryTest, kemudian kita panggil di method Init      Nah sekarang kita coba jalankan unit testingnya, tapi sebelumnya kita cek dulu isi dari tabel Pegawai.      Masih kosong kan? Coba kita jalankan unit testingnya      Yup unit testingnya langsung berhasil, sekarang kita cek lagi isi dari tabel Pegawai      Nah sudah ada isinya kan? Ini berarti NDbUnit sukses menjalankan misinya untuk mengisikan data Pegawai berdasarkan file Pegawai.xml yang sudah kita buat pada langkah-langkah sebelumnya, sebelum unit testingnya dijalankan.      Selamat MENCOBA :blush:  ","categories": ["Software Testing"],
        "tags": ["software testing","unit testing","integration testing","ndbunit","crud"],
        "url": "http://coding4ever.net/blog/2016/08/12/integration-testing-menggunakan-nunit-dan-ndbunit/",
        "teaser": null
      },{
        "title": "Persiapan Membangun Server CI (Continuous Integration) di Windows untuk Platform .NET Bagian #1",
        "excerpt":"Continuous Integration, biar gampang nyebutnya kita sebut CI aja ya, yang merupakan salah satu kegiatan untuk meningkatkan produktivitas dalam pengembangan aplikasi di mana seluruh hasil kerja (source code) dari masing-masing developer digabungkan (push) ke dalam satu wadah (server repository source code). Bisa sekali sehari, bisa juga beberapa kali dalam sehari. Setiap penggabungan source code akan diverifikasi secara otomatis oleh server CI, yang memungkinkan tim untuk mendeteksi secara dini jika ada masalah/konflik/error pada saat penggabungan source code.     Sebenarnya membangun server CI itu gambang, hanya melakukan instalasi dilanjutkan dengan konfigurasi plus menuliskan beberapa skrip sederhana (batch commands) kita sudah bisa membangun server CI. Hanya saja ada beberapa tool/software yang perlu kita ketahui cara penggunaannya  agar proses membangun server CInya jadi lebih gampang.   Berikut adalah daftarnya :      Git – ini merupakan tool untuk source/version control, kita bisa saja menggunakan version control lainnya seperti svn.   TortoiseGit – aplikasi git client berbasis windows, kita bisa saja menggunakan aplikasi git client lainnya.   Bonobo Git Server – aplikasi web gratis untuk membangun server repository Git berbasis Windows/IIS   NuGet - package manager untuk mempermudah kita menginstall library pihak ketiga   NUnit – untuk keperluan testing otomatis   MSBuild – untuk keperluan proses build   Package Installer – untuk keperluan proses deploy/pembuatan paket installer, kita bisa menggunakan yang gratis seperti Inno Setup atau NSIS   Untuk bagian #1 ini kita bahas terlebih dulu tentang Bonobo Git Server.   Kita sebagai software developer tentu sudah tidak asing lagi dengan namanya GitLab, GitHub dan Bitbucket. Ketiga website ini memberikan layanan untuk menghosting-kan repository git secara online/cloud. Git sendiri merupakan salah satu version control seperti halnya svn.   Dipostingan kali saya tidak akan membahas secara detil apa itu Git, apa bedanya dengan version control lainnya seperti svn, bagaimana cara menginstallnya dan bagaimana cara menggunakannya, sekali lagi tidak. Karena sudah banyak referensi di internet yang membahas masalah ini.   Tapi dipostingan kali ini kita akan membahas solusi jika ingin punya hosting/server sendiri untuk repository Git. Setelah mencoba beberapa  software gratis untuk membuat server repository Git di lingkungan Windows, akhirnya pilihan saya jatuh ke Bonobo Git Server. Bonobo Git Server adalah layanan repository Git berbasis web, selain gratis Bonobo Git Server juga bersifat open source dibuat menggunakan ASP.NET MVC. Jadi untuk menjalankan Bonobo Git Server dibutuhkan web server IIS. Bonobo Git Server sampai saat ini baru mendukung dua jenis database yaitu SQLite dan SQL Server. Untuk petunjuk instalasinya bisa Anda cek di sini.   Tool yang digunakan   Berikut adalah tool yang digunakan untuk uji coba Bonobo Git Server      Bonobo Git Server - aplikasi web gratis untuk membangun server repository Git berbasis Windows/IIS   Git – tool untuk source/version control   TortoiseGit – aplikasi git klien berbasis windows   Membuat Repository   Setelah instalasi Bonobo Git Server, kita bisa langsung mengakses alamat Bonobo Git Server, sebagai contoh alamat/url yang saya gunakan adalah http://192.168.56.2/git-server      Untuk Username dan Password defaultnya adalah admin. Setelah login berhasil kita bisa melakukan beberapa konfigurasi seperti mengganti password default, membuat team, user dan repository.      Untuk membuat repository klik link Create new repository, setelah itu lengkapi input halaman New Repository      Pada saat membuat repository selain menentukan nama, group dan deskripsi repository, kita juga perlu mengatur role, user dan team (optional) yang berhak mengakses repository. Ada tiga jenis role yang disediakan oleh Bonobo Git Server  yaitu :      Anonymous - setiap user bisa melihat, melakukan pull atau clone   Contributors - setiap user bisa melihat, melakukan push, pull atau clone   Administrators – akses penuh, termasuk menghapus repository   Terakhir klik tombol Create      Kemudian klik link Go to repository : Northwind      Perhatikan keterangan General Url, link tersebut akan kita gunakan pada saat melakukan proses push.   Push Source Code ke Server Repository Git   Sebelum menyimpan source code ke repository Git, ada beberapa hal atau langkah-langkah yang perlu kita lakukan yaitu :   Langkah 1: Membuat repository lokal – Git termasuk dalam kategori Distributed Version Control System, jadi selain mempunyai repository pusat/server juga mempunyai repository lokal. Bisa jadi hal ini yang menjadi salah satu daya tarik git, yang memungkinkan kita untuk melakukan commit tanpa harus terkoneksi ke Server Repository Git. Untuk membuat repository lokal, tinggal klik kanan folder project (folder kerja) -&gt; Git Create repository here…         Non aktifkan pilihan Make it Bare … kemudian pilih Ok      Langkah 2: Menambahkan file .gitignore - Dalam mengerjakan project, ada file-file yang ada di folder kerja, tapi tidak kita masukkan ke repository. Misalnya file hasil kompilasi, setting IDE, dan sebagainya. File dan folder hasil generate ini biasanya kita daftarkan di ignore list, supaya tidak ikut dicommit ke repository.      Untuk contoh file .gitignore, bisa Anda cek disini   Langkah 3: Add – Menambahkan perubahan dalam folder kerja ke staging area (index) repository lokal, sebelum melakukan proses commit. Caranya klik kanan folder kerja -&gt; Git Add..            Langkah 4: Commit – Untuk menyimpan perubahan (staging area) ke repository lokal. Caranya klik kanan folder kerja -&gt; Git Commit -&gt; ..         Langkah 4: Push – Untuk mengirim/menguplod perubahan repository lokal ke server/remote repository. Caranya klik kanan folder kerja -&gt; Git Push..      Sebelum melakukan proses push, kita harus mendaftarkan terlebih dulu alamat dari repository server dengan mengklik tombol Manage.         Link URL : http://192.168.56.2/git-server/Northwind.git di atas kita dapatkan pada saat membuat repository. Setelah klik tombol Ok, kita akan kembali ke dialog push …      Langsung saja klik tombol Ok, jika kita belum pernah melakukan push/clone biasanya akan diminta untuk menginputkan user dan password login Bonobo Git Server         Yuph, push source code berhasil :blush:   Mengecek Hasil Push Source Code   Akses link server Bonobo Git Server, kemudian login.      Kemudian klik link repository      Lanjutkan dengan mengklik link Commits      Setelah itu akan tampil histori commit      Untuk melihat detil masing-masing commit, kita tinggal klik link komentar seperti gambar di atas.   Selamat mencoba :blush:  ","categories": ["continuous integration","version control","source control"],
        "tags": ["continuous integration","version control","source control","git","TortoiseGit","msbuild"],
        "url": "http://coding4ever.net/blog/2016/09/24/persiapan-membangun-server-ci-continuous-integration-pada-windows-untuk-platform-net-bagian-number-1/",
        "teaser": null
      },{
        "title": "Persiapan Membangun Server CI (Continuous Integration) di Windows untuk Platform .NET Bagian #2",
        "excerpt":"Persiapan awal untuk membangun Server CI (Continuous Integration) sudah kita selesaikan yaitu membuat sendiri server repository Git untuk keperluan internal kantor yang berfungsi sebagai wadah untuk menampung source code dari masing-masing developer.   Masih tersisa beberapa tool yang harus kita pelajari penggunaannya agar proses membangun server CInya berjalan mulus yaitu :        Package Installer   NUnit   NuGet   MSBuild   Package Installer   Tool ini digunakan untuk membuat paket instalasi biasanya digunakan untuk aplikasi desktop seperti winform, console atau windows service. Tujuannya jelas untuk mempermudah distribusi/instalasi aplikasi ke klien. Package Installer ini nantinya digunakan untuk proses deploy yang dilakukan secara otomatis oleh server CI.   Jadi alurnya adalah ketika kita mem-push source code ke server repository git, ini akan men-trigger server CI untuk melakukan build, menjalankan tes otomatis (jika ada) kemudian membuat paket instalasi  untuk aplikasi desktop atau rilis/upload kode ke server produksi untuk aplikasi web.   Untuk membuat paket instalasi, kita bisa menggunakan yang gratis seperti Inno Setup atau NSIS.   NUnit   Tool ini digunakan untuk keperluan testing otomatis, saya sudah membahas penggunaan tool ini di kategori Software Testing.   MSBuild   Dari nama toolnya aja udah jelas, klo tool ini digunakan untuk proses build solution/project yang sedang kita kembangkan. Sadar atau tidak sebenarnya kita sudah sering menggunakan MSBuild ketika menggunakan IDE Visual Studio .NET untuk menulis kode. Setelah selesai menulis kode, biasanya kitakan menekan tombol F5 (Start Debugging) atau Ctrl+F5 (Start Without Debugging) untuk menjalankan/mengetes kode yang baru selesai kita tulis. Nah pada saat kita menekan tombol F5/Ctrl+F5, IDE Visual Studio .NET akan menjalankan/mengeksekusi MSBuild sesuai dengan pengaturan yang sudah kita set di bagian Configuration Manager atau Project -&gt; Properties -&gt; Build.      Configuration Manager      Setting Build di Project Properties   Menekan tombol F5/Ctrl+F5 inikan dari sisi developer ketika akan mem-build solution/project sedangkan dari sisi server (server CI) karena kita tidak menginstall Visual Studio.NET, kita cukup menginstall tool MSBuild secara terpisah. Sehingga untuk menjalankan tool MSBuild kita lakukan via command prompt. Tapi untuk contoh di sini kita akan menggunakan Visual Studio .NET Command Prompt untuk menjalankan tool MSBuild, caranya adalah dengan mengaktifkan Visual Studio .NET Command Prompt sesuai dengan versi Visual Studio .NET Anda.            Kemudian ketik perintah MSBuild dengan format seperti berikut:   MSBuild.exe [Switches] [ProjectFile]  Contoh :   MSBuild.exe /t:Clean,Build /p:Configuration=Release /p:stuck_out_tongue:latform=\"Any CPU\" \"D:\\DemoContinuousIntegration\\src\\Northwind.sln\"        Untuk referensi lengkap MSBuild Command, bisa Anda cek di sini.   Di server CI kita akan menuliskan perintah MSBuild seperti di atas untuk keperluan build otomatis.   NuGet   NuGet adalah tool package manager yang berfungsi untuk mempermudah kita menginstall library pihak ketiga (3rd party libraries), seperti Dapper .NET, Entity Framework, Json .NET dan masih banyak lagi library pihak ketiga yang memang sudah terbukti ampuh dan bermanfaat untuk project yang kita kembangkan.   Penggunaan tool ini juga sudah saya bahas di kategori NuGet tetapi pembahasannya dari sisi developer sedangkan untuk sisi server (server CI), NuGet digunakan untuk me-restore library nuget yang digunakan oleh project/aplikasi yang kita kembangkan, karena jika tidak di-restore, server CI akan gagal melakukan proses build.   Sebagai contoh kita akan mem-build ulang project Northwind di atas, tetapi dengan menghapus library nugetnya terlebih dulu yang ada di dalam folder lib.      Kemudian kita build ulang         Nah dari gambar di atas kan terlihat hasil buildnya gagal karena project Northwindnya membutuhkan library Dapper dan ` System.Data.SQLite.Core`.   Sekarang kita coba menambahkan perintah untuk me-restore library nugetnya terlebih dulu sebelum melakukan proses build, tapi sebelumnya download terlebih dulu tool nugetnya di sini kemudian simpan di folder misal dengan nama D:\\Development Tools, kemudian ketik perintah berikut :   \"D:\\Development Tools\\nuget.exe\" restore \"D:\\DemoContinuousIntegration\\src\"     Setelah me-restore library nugetnya berhasil, baru kita build ulang         Sampai di sini persiapan untuk membangun Server CI (Continuous Integration) sudah selesai, insya Allah di postingan berikutnya kita akan membahas Bagaimana Membangun Server CI (Continuous Integration) di Windows untuk Platform .NET Menggunakan Jenkins.   Selamat mencoba :blush:  ","categories": ["continuous integration"],
        "tags": ["continuous integration","Package Installer","NUnit","NuGet","MSBuild"],
        "url": "http://coding4ever.net/blog/2016/09/26/persiapan-membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-bagian-number-2/",
        "teaser": null
      },{
        "title": "Membangun Server CI (Continuous Integration) di Windows untuk Platform .NET Menggunakan Jenkins Bagian #1",
        "excerpt":"Melanjutkan pembahasan tentang Server CI (Continuous Integration), di mana persiapan awal sudah saya bahas di postingan saya yang berjudul “Persiapan Membangun Server CI (Continuous Integration) di Windows untuk Platform .NET” bagian satu dan dua.   Continuous Integration, untuk selanjutnya kita sebut CI saja, merupakan salah satu kegiatan untuk meningkatkan produktivitas dalam pengembangan aplikasi di mana seluruh hasil kerja (source code) dari masing-masing developer digabungkan (push) ke dalam satu wadah (server repository source code). Bisa sekali sehari, bisa juga beberapa kali dalam sehari. Setiap penggabungan source code akan diverifikasi secara otomatis oleh server CI, yang memungkinkan tim untuk mendeteksi secara dini jika ada masalah/konflik/error pada saat penggabungan source code.     Setelah penggabungan hasil kerja (source code) selesai, server CI otomatis akan melakukan proses build untuk memastikan tidak ada kode yang merusak/membuat proses build gagal. Jadi semakin cepat kegagalan build ini diketahui semakin cepat pula kita meresponnya.  Dan jika proses build-nya berhasil akan dilanjutkan dengan proses deploy. Selain itu server CI juga bisa dikonfigurasi untuk melakukan proses lain seperti menjalankan unit testing, integration testing dan testing otomatis lainnya.   Sebagai .NET developer kita sudah biasa melakukan proses build dengan menekan tombol F5 (Start Debugging) atau Ctrl+F5 (Start Without Debugging) baik pada waktu development atau perbaikan bug. Sedangkan untuk contoh deploy anggap saja seperti kita membuat paket installer yang akan didistribusikan ke komputer/server klien. Nah dengan menggunakan CI semua proses ini bisa dilakukan secara otomatis dan terpusat, sehingga kita mempunyai arsip hasil build dan deploy dari waktu ke waktu. Jadi untuk mencari file setup/paket installer terakhir enggak usah lagi nanya ke developer karena bisa langsung kita download dari server CI-nya.   Proses build ini selain bisa dibuat otomatis setiap kita mem-push source code ke server repository bisa juga kita buatkan jadwalnya, misal pas jam makan siang atau jam pulang kantor. Jadi di kantor dibuat kesepakatan/aturan klo ada yang merusak build pas jam makan siang enggak boleh makan siang sampai proses build-nya berhasil atau yang merusak build pas jam pulang kantor enggak boleh pulang sampai proses build-nya  berhasil :grin:   Jadi dengan menggunakan CI, alur kerja kita lebih kurang seperti berikut :      Menulis kode, build dan tes di komputer masing-masing (seperti biasa).   Commit dan push kode ke server repository/source control seperti GIT atau SVN. Di masing-masing repository kita pasang hook script untuk memanggil job/project yang sudah kita buat dan konfigurasi di server CI.   Server CI akan meng-clone repository kemudian melakukan build, menjalankan tes otomatis (jika ada) dan deploy secara otomatis. Jika buildnya gagal ulangi lagi langkah pertama   Cukup ya intronya, berikutnya akan kita bahas tool/software yang bisa kita gunakan untuk mengimplementasikan CI, salah satunya adalah Jenkins.   Jenkins adalah salah satu software continuous integration (CI) open source yang dibuat menggunakan Java. Untuk sejarah Jenkins silahkan digoogle sendiri ya :blush:   Selain Jenkins, ada tool-tool lain yang harus kita siapkan agar implementasi CI menggunakan Jenkins ini bisa berhasil. Berikut daftar lengkapnya :      Jenkins   MSBuild – untuk keperluan proses build   NuGet – untuk merestore package nuget sebelum proses build dijalankan   Source Control menggunakan Git, Anda bisa juga menggunakan SVN   TortoiseGit – aplikasi git client   Bonobo Git Server (server Git gratis berbasis Windows/IIS)   Inno Setup atau NSIS – untuk keperluan proses deploy/pembuatan paket installer   Tool-tool di atas selain perlu disiapkan juga harus tau cara penggunaannya, klo belum ya silahkan mampir dulu ke sini dan sini.   Sebelum kita lanjut ke pembahasan, kita lihat tool/software untuk Environment Test yang saya gunakan baik di sisi server (Server CI) dan client (developer).   Environment Test Server      Windows Server 2008 R2   Automation server Jenkins   .NET Framework 4.0, 4.5.x   Microsoft Build 2015   Source/version control Git   Server Repository Git   Package Installer Inno Setup   NuGet   Environment Test Client      Visual Studio .NET 2013 Community Edition   Source/version control Git   TortoiseGit   Fokus Pembahasan   Untuk postingan pertama ini, kita akan membahas:      Konfigurasi Jenkins   Plugin tambahan yang perlu diinstall   Pembuatan Project (Job)   Tes clone repository, restore library nuget dan  build dalam satu langkah/klik   Instalasi Jenkins   Download dan install Jenkins di sini, setelah instalasi Jenkins bisa diakses di link http://localhost:8080      Konfigurasi Jenkins   Jenkins mempunyai banyak plugin yang mudah dikonfigurasi seperti plugin Git, MSBuild dan lainnya. Berikut adalah daftar plugin yang akan kita install.      Git plugin   MSBuild plugin   NUnit plugin   Cobertura plugin   PowerShell plugin   Sebagai contoh kita akan menginstall plugin Git dan MSBuild, berikut langkah-langkahnya :   Menginstall plugin Git      Akses link : http://localhost:8080/   Klik link Manage Jenkins, pilih Manage Plugins   Aktifkan tab Available, ketik Git plugin di filter box, dari daftar pilihan plugin yang tersedia pilih Git plugin   Klik tombol Install without restart      Menginstall plugin MSBuild   Masih sama dengan langkah-langkah sebelumnya, hanya saja kali ini plugin yang perlu difilter adalah MSBuild      Ulangi langkah-langkah di atas untuk menginstall plugin lainnya seperti NUnit, Cobertura dan PowerShell.   Konfigurasi Git dan MSBuild   Setelah instalasi plugin Git dan MSBuild, kita perlu menambahkan konfigurasinya di halaman Global Tool Configuration, berikut langkah-langkahnya :      Akses link : http://localhost:8080/   Klik link Manage Jenkins, pilih Global Tool Configuration        Scroll ke bawah sampai menemukan tulisan Git/Git installations , untuk isian ` Path to Git executable` isikan lokasi instalasi git secara absolute              Untuk lokasi Git disesuaikan dengan lokasi instalasi Git di mesin Anda.       Kemudian scroll kebawah lagi sampai menemukan tulisan MSBuild, kemudian klik tombol Add MSBuild        Isikan konfigurasinya seperti gambar berikut :              Untuk lokasi MSBuild juga disesuaikan dengan lokasi instalasi MSBuild di mesin Anda. Terakhir klik tombol Save.       Pembuatan Project (Job)   Berikutnya kita akan membuat project sederhana untuk mencoba proses build, berikut langkah-langkahnya:      Akses link : http://localhost:8080/   Klik link New Item   Isikan nama project, misal northwind-build   Pilih Freestyle project        Pilih Ok                   Aktifkan tab Source Code Management, kemudian pilih Git                   Kemudian lengkapi isian Repository URL dan Credentials seperti contoh berikut:              Untuk contoh di atas dengan asumsi instalasi Jenkins dan server repository Git di mesin yang sama.       Jenkins selalu bekerja dengan branch dan secara default menggunakan branch master.            Berikutnya aktifkan tab Build, klik Add build step                   Pilih ` Build a Visual Studio project or solution using MSBuild`       Disini kita perlu mengisikan beberapa nilai:              MSBuild Version diisi dengan MSBuild  (yang sudah kita konfigurasi pada langkah sebelumnya)       MSBuild Build File diisi dengan nama solution atau project       Command Line Arguments (optional) diisi dengan parameter MSBuild                  Karena project kita menggunakan library NuGet, kita juga perlu menambahkan konfigurasi untuk me-restore library NuGet. Masih di tab Build, klik Add build step kemudian pilih ` Execute Windows batch command`.              Untuk isian Command isikan perintah/skrip seperti berikut:              Perintah/skrip di atas dengan asumsi Anda sudah mendownload tool NuGet dan menyimpannya di folder D:\\Development Tools.       Seperti yang sudah pernah saya bahas di postingan Persiapan Membangun Server CI Bagian #2, proses build dilakukan setelah me-restore library nuget. Jadi kita harus merubah urutan prioritas agar konfigurasi “Execute Windows batch command” dijalankan terlebih dulu sebelum konfigurasi “Build a Visual Studio project or solution using MSBuild” dengan cara men-drag-nya ke atas.                     Pada gambar di atas terlihat konfigurasi “Execute Windows batch command” dan “Build a Visual Studio project or solution using MSBuild” sudah berganti posisi. Terakhir klik tombol Save              Testing Build   Setelah menyelesaikan beberapa konfigurasi, saatnya melakukan pengetesan apakah konfigurasi sebelumnya sudah benar. Berikut langkah-langkahnya :           Klik link project northwind-build                   Di halaman project northwind-build, klik link Build Now                   Di informasi Build History akan terlihat progress build dengan nama #1, #2,… dst                   Jika proses build-nya sukses penanda bulat-nya berwarna biru, jika warna merah berarti gagal                   Untuk melihat detil build, klik link build number, misal #1, #2,… dst                   Kemudian klik link Console Output              Catatan penting dari output di atas adalah lokasi dari workspace di mana source code/hasil clone dari repository dan proses build dilakukan. Informasi ini tentu akan sangat membantu kita dalam melakukan debuging konfigurasi/setup CI.              Kesimpulan dari proses build di atas dan tentunya berdasarkan konfigurasi yang kita lakukan, jenkins melakukan hal-hal berikut :      Meng-clone repository git   Me-restore library nuget   Melakukan proses build   Selamat mencoba :blush:   ","categories": ["continuous integration","jenkins"],
        "tags": ["continuous integration","jenkins","Package Installer","NUnit","NuGet","MSBuild"],
        "url": "http://coding4ever.net/blog/2016/09/29/membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-menggunakan-jenkins-bagian-number-1/",
        "teaser": null
      },{
        "title": "Membangun Server CI (Continuous Integration) di Windows untuk Platform .NET Menggunakan Jenkins Bagian #2",
        "excerpt":"Pada postingan sebelumnya kita sudah membuat project/job sederhana menggunakan Jenkins untuk melakukan proses build, dan untuk postingan kali ini kita akan menambahkan proses deploy. Kalo masih bingung dengan istilah deploy di sini, anggap saja seperti kita membuat paket installer yang akan didistribusikan ke komputer klien. Nah dengan menggunakan CI semua proses ini bisa dilakukan secara otomatis dan terpusat, sehingga kita mempunyai histori hasil build dan deploy dari waktu ke waktu. Jadi untuk mencari file setup/paket installer terakhir enggak usah lagi nanya ke developer karena bisa langsung kita download dari server CI-nya.        Inno Setup   Inno Setup adalah tool untuk membuat paket installer yang gratis dan open source. Selain itu kita juga bisa menggunakan tool installer lainnya seperti NSIS. Untuk informasi lebih lanjut tentang Inno Setup dan NSIS bisa langsung ke sini dan sini.   Jadi di postingan kali ini kita akan menggunakan Inno Setup untuk keperluan proses deploy. Sebagai contoh berikut adalah skrip Inno Setup untuk project Northwind yang kita gunakan sebagai contoh project.   #define AppName 'Northwind App' #define AppDir 'Northwind' #define AppExeName 'Northwind.WinFormApp.exe' #define AppVendorName 'KR Software' #define AppCopyright 'Copyright © 2016. ' + AppVendorName #define AppURL 'http://coding4ever.net/' #define AppVersion GetFileVersion('bin\\' + AppExeName) #define AppMainIcon 'mainIcon.ico'  [Setup] AppName={#AppName} AppVerName={#AppName} Versi {#AppVersion} AppPublisher={#AppVendorName} AppVersion={#AppVersion} AllowCancelDuringInstall = yes DefaultDirName={pf}\\{#AppVendorName}\\{#AppDir} DefaultGroupName={#AppVendorName} Compression = lzma SolidCompression = yes OutputDir=new-release OutputBaseFilename=Setup-v{#AppVersion} AllowNoIcons = yes AlwaysRestart = no AlwaysShowComponentsList = no DisableProgramGroupPage = yes AppendDefaultDirName = yes CreateUninstallRegKey = yes DisableStartupPrompt = yes LanguageDetectionMethod=none ShowLanguageDialog=no UsePreviousLanguage=no Uninstallable = yes UninstallFilesDir={app}\\uninst UninstallDisplayIcon={app}\\{#AppExeName},0 UninstallDisplayName={#AppName} WindowVisible = no AppCopyright={#AppCopyright} FlatComponentsList = yes PrivilegesRequired = admin VersionInfoVersion={#AppVersion}  [Tasks] Name: desktopicon; Description: {cm:CreateDesktopIcon}; GroupDescription: {cm:AdditionalIcons}; Flags: checkedonce Name: quicklaunchicon; Description: {cm:CreateQuickLaunchIcon}; GroupDescription: {cm:AdditionalIcons}; Flags: unchecked  [Files] ;My Application Runtime Source: bin\\*.exe; DestDir: {app}; Flags: ignoreversion Source: bin\\*.dll; DestDir: {app}; Flags: ignoreversion  [Icons] Name: {group}\\{#AppName}; Filename: {app}\\{#AppExeName}; WorkingDir: {app}; IconFilename: {app}\\{#AppMainIcon} Name: {userdesktop}\\{#AppName}; Filename: {app}\\{#AppExeName}; WorkingDir: {app}; IconFilename: {app}\\{#AppMainIcon}; Tasks: desktopicon  [Code] procedure AboutButtonOnClick(Sender: TObject); begin   MsgBox('{#AppName}' #13#13 '{#AppCopyright}' #13 '{#AppURL}', mbInformation, mb_Ok); end;  procedure CreateAboutButtonAndURLLabel(ParentForm: TSetupForm; CancelButton: TNewButton); var   AboutButton: TNewButton; begin   AboutButton := TNewButton.Create(ParentForm);   AboutButton.Left := ParentForm.ClientWidth - CancelButton.Left - CancelButton.Width;   AboutButton.Top := CancelButton.Top;   AboutButton.Width := CancelButton.Width;   AboutButton.Height := CancelButton.Height;   AboutButton.Caption := '&amp;About...';   AboutButton.OnClick := @AboutButtonOnClick;   AboutButton.Parent := ParentForm;   end;  procedure InitializeWizard(); begin   CreateAboutButtonAndURLLabel(WizardForm, WizardForm.CancelButton);   end;  Kemudian simpan skrip di atas di folder workspace\\deploy. Workspace adalah folder di mana project atau job disimpan.      Menambahkan Proses Deploy      Akses link : http://localhost:8080/, kemudian login        Klik link project northwind-build                   Di halaman project northwind-build, klik link Configure                   Berikutnya aktifkan tab Build, klik Add build step kemudian pilih Execute Windows batch command              Kemudian isikan skripnya seperti berikut              Tidak ada yang aneh dengan skrip di atas, hanya sekumpulan batch commands yang tentunya Anda dan Saya sudah familiar dengannya. Coba perhatikan lagi skrip di atas, di sana ada variabel %WORKSPACE% yang merupakan variabel built-innya Jenkins, dan jika mengacu pada project northwind-build  di atas maka isinya adalah “C:\\Program Files (x86)\\Jenkins\\workspace\\northwind-build”.              Menambahkan Artifact   Artifact adalah output dari proses build, bisa berupa file exe, dll atau file dengan ekstensi lainnya. File-file artifact ini nantinya akan tersedia untuk di download di halaman project. Berikut langkah-langkah untuk menambahkan artifact :           Masih di halaman Configure, aktifkan tab Post-build Actions klik Add post-build action kemudian pilih Archive the artifacts.                   Isikan nama-nama file artifact yang perlu di arsipkan, misal kita hanya mengarsipkan file Setup.exe              Jika file artifactnya lebih dari satu pisahkan dengan tanda koma, contoh : deploy\\new-release\\Setup*.exe, deploy\\help\\file_bantuan.chm, deploy\\help\\video_tutorial.avi.            Terakhir klik Save              Testing Build dan Deploy   Setelah menyelesaikan tambahan konfigurasi deploy, saatnya melakukan pengetesan apakah konfigurasinya sudah benar. Berikut langkah-langkahnya :           Kembali ke halaman project northwind-build, kemudian klik link Build Now                   Di informasi Build History akan terlihat progress build dengan nama #1, #2, … dst                   Jika proses build-nya sukses penanda bulat-nya berwarna biru, jika warna merah berarti gagal                   Setelah build selesai, di halaman project northwind-build akan tersedia link download file artifact              Selamat mencoba :blush:  ","categories": ["continuous integration","jenkins"],
        "tags": ["continuous integration","jenkins","inno setup","nsis","Artifact"],
        "url": "http://coding4ever.net/blog/2016/10/01/membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-menggunakan-jenkins-bagian-number-2/",
        "teaser": null
      },{
        "title": "Membangun Server CI (Continuous Integration) di Windows untuk Platform .NET Menggunakan Jenkins Bagian #3",
        "excerpt":"Melanjutkan pembahasan tentang Server CI (Continuous Integration). Kita sudah berhasil membuat project/job untuk melakukan proses build dan deploy secara otomatis dan terpusat di satu server. Hanya saja, ada sedikit yang kurang yaitu project/job ini harus kita jalankan/eksekusi secara manual setelah proses push source code ke server repository kita lakukan, dan tentunya akan sangat merepotkan jika harus bolak-balik mengeksekusi project/job setiap selesai melakukan proses push.     Nah untuk solusi masalah ini, kita akan menambahkan sedikit skrip agar proses eksekusi project/job ini bisa berjalan secara otomatis setelah selesai melakukan proses push. Skrip ini dikenal dengan nama hook script. Jadi source control seperti Git, mempunyai sekumpulan skrip (hook script ) dengan nama tertentu yang akan di eksekusi oleh git sebelum atau sesudah event-event tertentu, seperti: commit, push, receive dan event-event lainnya. Hook script ini disimpan di folder hooks masing-masing folder repository.      Pada gambar di atas, saya menambahkan file hook script dengan nama post-receive, file ini akan dieksekusi secara otomatis seteleh proses push selesai. Berikut contoh isi dari file ` post-receive`.      Skrip ` post-receive ` di atas akan mengakses URL/alamat yang di gunakan untuk proses build dan deploy yaitu :   JENKINS_URL/job/JOB_NAME/build?token=TOKEN_NAME     JENKINS_URL diisi dengan alamat dari server jenkins misal http://localhost:8080   JOB_NAME diisi dengan nama project/job jenkins misal  northwind-build   TOKEN_NAME diisi dengan sembarang nilai token, misal cnwlhaUq6g5Uwzvg6ePI   Selain itu untuk mengakses URL ini juga dibutuhkan informasi user dan APInya, misal menggunakan user admin dengan apinya 94a0428ca9d8d1d6c2e229fe1183f98. Selain menggunakan user API kita juga bisa menggunakan langsung password dari user tapi tentunya cara yang kedua ini tidak disarankan.   Mendapatkan Informasi User API   Informasi user API bisa diakses melalui menu ` Manage Jenkins -&gt; Manage Users -&gt; Configure`      Kemudian klik tombol Show API Token…         Mengaktifkan Project/Job Authentication Token   Untuk bisa mengakses URL  JENKINS_URL/job/JOB_NAME/build?token=TOKEN_NAME selain membutuhkan User dan User API, kita juga perlu mengaktifkan project/job Authentication Token melalui link Project -&gt; Configure         Kemudian aktifkan pilihan Trigger builds remotely      Untuk nilai Authentication Token diisi sesuai keinginan, kalo saya biasanya menggunakan tool KeePass untuk mengenerate nilai tokennya.      Testing Build Otomatis   Setelah menyelesaikan konfigurasi di atas, saatnya melakukan pengetesan apakah konfigurasinya sudah benar atau belum. Berikut langkah-langkahnya :      Aktifkan project Northwind        Tambahkan method abstract baru di interface IProductRepository, misal dengan nama GetByCategoryName                   Kemudian lengkapi implementasinya method abstractnya di class ProductRepositoryDapper                   Terakhir lakukan commit dan push                                 Dan secara otomatis proses build dan deploy di server CI akan dijalankan              Kesimpulan   Dengan memanfaatkan hook script proses build dan deploy bisa dibuat otomatis pada event- event-event tertentu, seperti: commit, push, receive dan event-event lainnya.   Selamat mencoba :blush:  ","categories": ["continuous integration","jenkins"],
        "tags": ["continuous integration","jenkins","git","hook script","build","deploy"],
        "url": "http://coding4ever.net/blog/2016/11/07/membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-menggunakan-jenkins-bagian-number-3/",
        "teaser": null
      },{
        "title": "Membangun Server CI (Continuous Integration) di Windows untuk Platform .NET Menggunakan Jenkins Bagian #4",
        "excerpt":"Masih membahas tentang  manfaat dari Server CI (Continuous Integration) untuk kemudahan dalam melakukan proses build dan deploy secara terpusat. Jika dipostingan sebelumnya saya menggunakan contoh aplikasi desktop maka kali ini kita akan membahas proses build dan deploy untuk aplikasi berbasis web seperti ASP.NET, ASP.NET MVC dan ASP.NET  WEB API.     Untuk kemudahan proses deploy ke web server IIS, Microsoft sudah menyediakan tool khusus untuk melakukan ini yaitu Web Deploy. Tool ini akan kita kombinasikan dengan tool Microsoft Build.   Environment Test   Untuk keperluan postingan kali ini, saya menggunakan environment test sebagai berikut:   Server CI (Continuous Integration)      Windows Server 2008 R2   Software CI (Continuous Integration) menggunakan Jenkins   .NET Framework 4.0, 4.5.x   Microsoft Build 2015   Web Deploy 3.6   Source/version control Git   Repository Git menggunakan Bonobo Git Server   NuGet   Server Development/Production      Windows Server 2008 R2   Web Server IIS 7   .NET Framework 4.0, 4.5.x   Web Deploy 3.6   PC/Laptop Development      Visual Studio .NET 2013 Community Edition   Source/version control Git   TortoiseGit   Konfigurasi Server Development/Production   Berikut langkah-langkahnya:   Langkah 1: Aktifkan role Management Service (Server Manager -&gt; Role -&gt; Web Server (IIS))      Setelah selesai dilanjutkan dengan pembuatan user windows/local user.   Langkah 2: Menambahkan user windows/local non-admin untuk keperluan deploy (Server Manager -&gt; Configuration -&gt; Local Users and Groups -&gt; Users      Langkah 3: Download dan Install Web Deploy. Pada saat instalasi pilih custome kemudian aktifkan semua pilihan.         Langkah 4: Konfigurasi Web Deploy Publishing (IIS Manager -&gt; Site -&gt; Deploy -&gt; Configure Web Deploy Publishing …)         tukang_deploy di atas adalah user windows/local non-admin yang sudah kita buat pada langkah sebelumnya.   Langkah 5: Selesai   Konfigurasi PC/Laptop Development   Untuk konfigurasi pc/laptop development dilakukan dengan cara membuat publish profile.  Berikut langkah-langkahnya:   Langkah 1: Aktifkan project Visual Studio.net, sebagai contoh bisa didownload di sini      Langkah 2: Klik kanan project Web API -&gt; Publish…, setelah itu akan tampil dialog publish web      Langkah 3: Kemudian pada tab Profile pilih Custome         Isikan nama profile   Langkah 4: Pada tab Connection isikan konfigurasinya seperti berikut      Contoh konfigurasi di atas menggunakan ip 192.168.56.2 untuk server development, jadi nilainya tinggal disesuaikan. Untuk user dan password dikosongkan dulu aja, nanti kita set pada saat proses build dan deploy di job/project jenkins.      Langkah 5: Selanjutnya tinggal di Next aja      Langkah 6: Terakhir klik tombol Close      Setelah proses ini selesai akan dibuatkan file PublishProfiles yang tersimpan di node Properties -&gt; PublishProfiles      File PublishProfiles ini nantinya akan kita gunakan pada saat proses build dan deploy      Konfigurasi Server CI (Continuous Integration)   Dipostingan kali ini saya tidak lagi menjelaskan secara rinci bagaimana membuat dan melakukan konfigurasi job/project jenkins karena sudah saya bahas dipostingan sebelumnya. Berikut langkah-langkahnya:   Langkah 1: Buat job/project baru, misal dengan nama northwind-web-api-deploy      Langkah 2: Setting repository git      Langkah 3: Setting restore nuget package      Langkah 4: Setting MSBuild      Langkah 5: Terakhir tes build dan deploy      Jika proses build dan deploy selesai, kita tinggal cek hasilnya di IIS Manager      Setelah itu kita juga bisa langsung mencoba web servicenya menggunakan web browser.      Selamat MENCOBA :blush:  ","categories": ["continuous integration","jenkins"],
        "tags": ["continuous integration","jenkins","msbuild","msdeploy","asp.net","asp.net mvc","asp.net web api"],
        "url": "http://coding4ever.net/blog/2016/12/14/membangun-server-ci-continuous-integration-di-windows-untuk-platform-net-menggunakan-jenkins-bagian-number-4/",
        "teaser": null
      },{
        "title": "Build Otomatis Project Visual Basic 6 Menggunakan Jenkins",
        "excerpt":"Mas kalo di tempat saya masih menggunakan tool jadul seperti Visual Basic 6 untuk pengembangan aplikasinya, apakah masih bisa menggunakan Jenkins sebagai software CInya ? Jawabannya bisa, walaupun secara plugin, di Jenkins belum ada plugin khusus untuk keperluan “build otomatis project Visual Basic 6” seperti halnya di .NET yang sudah tersedia plugin MSBuild. Sebagai solusinya kita bisa menggunakan skrip psake  yang ditulis menggunakan bahasa PowerShell. Kalo masih bingung dengan skrip psake, skrip ini mirip dengan skrip rake yang dibuat menggunakan bahasa Ruby.     Environment Test   Untuk keperluan postingan kali ini, saya menggunakan environment test sebagai berikut:   Server CI (Continuous Integration)      Windows Server 2008 R2   Software CI (Continuous Integration) menggunakan Jenkins   Source/version control Git   Server Repository Git menggunakan Bonobo Git Server   Microsoft Visual Studio/Basic 6.0   Library (dll/ocx) pihak ketiga   Skrip psake - psake is a build automation tool written in PowerShell   UPX - UPX is a free, portable, extendable, high-performance executable packer for several executable formats   PC/Laptop Development      Microsoft Visual Studio/Basic 6.0   Source/version control Git   TortoiseGit   Skrip Build Otomatis Project Visual Basic 6   Secara plugin di Jenkins memang belum tersedia plugin khusus untuk keperluan “build project Visual Basic 6” tapi sebagai solusinya kita bisa menggunakan skrip psake untuk keperluan ini. Contoh skrip  psake untuk keperluan build otomatis project Visual Basic 6 bisa Anda download di sini.   Berikut contoh skripnya:   # This build assumes the following directory structure # Script assumes all directories exists, initialized by a parent script # # \\build_artifact - This folder is created if it is missing and contains output of the build # \\build_log      - This folder is created if it is missing and contains log of the build # \\src            - This folder contains the source code or project you want to build  # run : .\\psake.ps1 build.ps1  # properties that is used by the script properties {        \t\t\t \t$vb6bin = \"C:\\Program Files (x86)\\Microsoft Visual Studio\\VB98\\VB6.EXE\" \t \t$build_dir = Split-Path $psake.build_script_file         \t$src_dir = \"$build_dir\\src\" \t$build_artifact_dir = \"$build_dir\\build_artifact\" \t$build_log_dir = \"$build_dir\\build_log\" \t \t$project_name = \"Northwind.vbp\" \t$project = \"$src_dir\\$project_name\"\t\t         \t$logfile = \"$build_log_dir\\$project_name.log\" }  function NormalizeOutDir($outdir) { \tif (-not ($outdir.EndsWith(\"\\\"))) { \t\t$outdir += '\\' \t}  \tif ($outdir.Contains(\" \")) { \t\t$outdir = $outdir + \"\\\" \t}  \treturn $outdir }  function HasFailed($logFile) { \treturn ((Select-String \"failed\" $logfile -Quiet) -or (Select-String \"not found\" $logfile -Quiet)) }  function HasSucceeded($logFile) { \treturn (Select-String \"succeeded\" $logFile -Quiet) }  FormatTaskName ((\"-\"*25) + \"[{0}]\" + (\"-\"*25))  Task Default -Depends Build  Task Build -Depends CreateLogFile {\t\t\t\t     $outdir = NormalizeOutDir(\"$build_artifact_dir\")     $failed = $false     $retries = 0     $succeeded = $false \t     Write-Host \"Building $name\" -ForegroundColor Green \t \ttry { \t\tExec {&amp; $vb6bin /m $project /out $logfile /outdir $outdir} \t} catch { \t\t$failed = $true \t}      while (!($failed -or $succeeded)) {         Write-Host -NoNewline \".\"         Start-Sleep -s 1         $failed = HasFailed($logfile)         $succeeded = HasSucceeded($logfile)         $retries = $retries + 1         $failed = ($failed -or ($retries -eq 60)) -and !$succeeded     }      if ($failed)     {         Type $logfile         throw \"Unable to build $name\"     }     Type $logfile }  Task CreateLogFile { \tIf (!(Test-Path $build_artifact_dir))  \t{ \t\tNew-Item -Path $build_artifact_dir -ItemType Directory \t} \t \tIf (!(Test-Path $build_log_dir))  \t{ \t\tNew-Item -Path $build_log_dir -ItemType Directory \t} \t \tWrite-host  (\"Build dir : {0}\" -f $build_dir) \tWrite-host  (\"Src dir : {0}\" -f $src_dir) \tWrite-host  (\"Artifact dir : {0}\" -f $build_artifact_dir)\t \tWrite-host  (\"Log dir : {0}\" -f $logfile) \t     if (Test-Path $logfile)     {         Remove-Item $logfile     } \t     $path = [IO.Path]::GetFullPath($logfile)     New-Item -ItemType file  $path }  Kemudian skrip di atas disimpan di lokasi yang sama dengan folder src      Untuk contoh project Visual Basic 6-nya bisa Anda download di sini.         Konfigurasi Server CI (Continuous Integration)   Dipostingan kali ini saya sudah tidak lagi menjelaskan lagi secara rinci bagaimana membuat dan melakukan konfigurasi job/project jenkins karena sudah saya bahas dipostingan  sebelumnya. Berikut langkah-langkahnya :   Langkah 1: Buat job/project baru, misal dengan nama northwind-vb6-build      Langkah 2: Setting repository git      Langkah 3: Setting Execute Windows batch command untuk menjalankan skrip build.ps1      Skrip di atas akan menjalankan file build.ps1 yang akan menghasilkan file exe dari project Visual Basic 6      Hasil compile Visual Basic 6 biasanya ukuran filenya belum dioptimasi, sehingga kita bisa menambahkan skrip untuk melakukan compress menggunakan tool UPX.      Lumayan hasil compressnya bisa mencapai 30%-an sendiri.         Kita juga bisa menambahkan skrip Inno Setup untuk membuat paket installer secara otomatis setelah proses build selesai, caranya gimana bisa Anda cek di sini.   Langkah 4: Terakhir tes build      Jika proses build selesai, kita tinggal cek hasilnya compilenya di folder job      Selamat MENCOBA :blush:  ","categories": ["continuous integration","jenkins"],
        "tags": ["continuous integration","jenkins","build","deploy","powershell","psake","upx"],
        "url": "http://coding4ever.net/blog/2016/12/26/build-otomatis-project-visual-basic-6-menggunakan-jenkins/",
        "teaser": null
      },{
        "title": "Manajemen Perubahan Struktur Database Menggunakan Liquibase",
        "excerpt":"Dalam pembuatan aplikasi perubahan struktur/schema database merupakan hal yang wajar, baik pada fase development maupun setelah masuk ke fase implementasi (production/live). Ada banyak alasan kenapa kita perlu melakukan perubahan struktur database, contoh:        Penambahan fitur baru yang membutuhan penambahan attribut/field di tabel yang sudah ada atau malah menambahkan tabel yang baru.   Perbaikan bug yang menyebabkan perubahan nama atau jenis data dalam database.   Issue kinerja sistem yang memerlukan tambahan index dalam database.   Perubahan-perubahan ini tentunya wajib kita catat baik secara manual maupun menggunakan tool khusus yang bisa dengan mudah membuat log perubahan struktur database dari waktu ke waktu, karena jika tidak bisa berpotensi menjadi bug di kemudian hari.   Beberapa tool database management seperti SQLyog versi Enterprise/Ultimate atau EMS SQL Manager versi berbayarnya memang menyediakan fitur untuk melakukan sinkronisasi struktur database dengan mudah, tapi bagi Anda yang mempunyai anggaran terbatas untuk membeli lisensinya ada alternatif tool gratis dan open source yang bisa kita gunakan salah satunya yaitu  Liquibase.   Pernah kebayang nggak ngoding tanpa source/version control seperti Git atau SVN kalo dulu mungkin iya, kalo sekarang source/version control merupakan hal yang wajib kita gunakan untuk memberikan rasa aman saat ber-coding ria :grin:. Source/version control ini digunakan untuk mencatat perubahan kode dari waktu ke waktu, apalagi kalo ngodingnya bareng-bareng, hanya orang-orang kreatif saja yang bisa melakukannya tanpa  source/version control :grin:. Dengan mengusung tema Source Control for Your Database Liquibase juga bisa kita fungsikan sebagai source/version control untuk mencatat perubahan struktur/schema database.   Instalasi  Liquibase   Liquibase tidak memerlukan instalasi khusus, kita tinggal download filenya di web site resmi Liquibase kemudian mengekstraknya.      Selain itu ada tool lain yang perlu kita siapkan yaitu:      JRE atau JDK karena Liquibase ditulis menggunakan Java.   JDBC driver disesuaikan dengan database yang digunakan, untuk contoh di sini saya menggunakan database PostgreSQL. Setelah didownload kita copykan ke folder lib      Membuat Changelog   Struktur database dalam Liquibase ditulis dalam format XML, disebut dengan istilah changelog. Ada beberapa perintah yang bisa digunakan untuk menghasilkan changelog, tentunya disesuaikan dengan kebutuhan.   generateChangelog   Perintah ini digunakan untuk membuat changelog dari struktur database secara lengkap jadi mirip dengan perintah dump/export ke sql. Biasanya kita gunakan pada saat implementasi awal sistem untuk mengopykan struktur database kosongan dari server development ke server production/live. Misal di awal implementasi sistem kita mempunyai struktur database seperti berikut :      Dari gambar di atas kita baru mempunyai dua buah tabel yaitu m_customer dan m_supplier.   Kemudian kita jalankan perintah generateChangelog:   liquibase --url=\"jdbc:stuck_out_tongue:ostgresql://localhost:5432/db-develop\" --username=postgres --password=masterkey --changeLogFile=output/db.changelog-1.0.xml generateChangeLog     Akan menghasilkan file changelog seperti berikut:        Mungkin tidak perlu dijelaskan lagi ya, karena isi dari file db.changelog-1.0.xml di atas hanya menjelaskan struktur dari tabel m_customer dan m_supplier dalam format XML.   Setelah itu kita jalankan perintah update agar changelog yang dihasilkan dari perintah generateChangelog di atas dieksekusi ke database target (db production/live).   liquibase --url=\"jdbc:stuck_out_tongue:ostgresql://localhost:5432/db-production\" --username=postgres --password=masterkey --changeLogFile=output/db.changelog-1.0.xml update\t     Dari gambar di bawah ini terlihat kondisi database production sebelum (sebelah kiri) dan sesudah dijalankan perintah update.      Pada saat pertama kali Liquibase dijalankan untuk database target, Liquibase akan membuat dua buah tabel sistem yaitu databasechangelog dan databasechangeloglock kedua tabel ini digunakan untuk mencatat hasil eksekusi changelog dari waktu ke waktu. Jadi perlu diperhatikan kedua tabel ini jangan dihapus.   diffChangeLog   Selama fase development maupun setelah masuk ke fase implementasi (production/live) kadang-kadang terjadi perubahan struktur database, sehingga kita perlu mengetahui perbedaan dari struktur lama dan baru, untuk melakukan ini kita menggunakan perintah diffChangeLog.   Misal seperti penjelasan gambar di bawah ini, yang sebelah kiri adalah struktur awal database yang hanya mempunyai dua buah tabel yaitu m_customer dan m_supplier, selama proses development berlangsung terjadi penambahan beberapa tabel baru yaitu m_golongan, m_produk dan tabel baru lainnya.      Nah untuk menghasilkan changelog, yang isinya adalah perbedaan struktur lama dan baru kita gunakan perintah diffChangeLog.   liquibase --url=\"jdbc:stuck_out_tongue:ostgresql://localhost:5432/db-production\" --username=postgres --password=masterkey --referenceUrl=\"jdbc:stuck_out_tongue:ostgresql://localhost:5432/db-develop\" --referenceUsername=postgres --referencePassword=masterkey  --changeLogFile=output/db.changelog-1.1.xml diffChangeLog     Contoh file changelog yang dihasilkan:        Kemudian kita jalankan lagi perintah update. Perintah update ini melakukan patch ke database target (database production/live).   liquibase --url=\"jdbc:stuck_out_tongue:ostgresql://localhost:5432/db-production\" --username=postgres --password=masterkey --changeLogFile=output/db.changelog-1.1.xml update  Setelah itu kita cek lagi struktur database productionnya.      Gampang bukan :blush:, dengan menggunakan Liquibase proses migrasi struktur database pun menjadi lebih mudah.   File Liquibase Properties   Untuk menyingkat penulisan perintah Liquibase kita bisa memanfaatkan file liquibase properties. Di file ini kita mengeset semua nilai parameter yang dibutuhkan pada saat menjalankan perintah Liquibase. Secara default nama yang digunakan untuk file liquibase properties adalah liquibase.properties, jika menggunakan nama default ini kita bisa langsung menjalankan perintah Liquibase seperti berikut :   # generateChangelog liquibase generateChangelog  # diffChangeLog liquibase diffChangeLog  # update/patch database target liquibase update  dan jika menggunakan nama yang lain, misal untuk masing-masing perintah kita buatkan  file liquibase properties tersendiri, pada saat menjalankan perintah Liquibase harus kita sebutkan secara explicit nama file  liquibase properties-nya dengan menambahkan parameter defaultsFile=&lt;nama_file_liquibase_properties&gt;. Contoh:   # generateChangelog liquibase --defaultsFile=generate-liquibase.properties generateChangelog  # diffChangeLog liquibase --defaultsFile=diff-liquibase.properties diffChangeLog  # update/patch database target liquibase --defaultsFile=update-liquibase.properties update  Dan untuk masing-masing file liquibase properties-nya kita isi seperti berikut:         Selamat mencoba :blush:  ","categories": ["database","liquibase"],
        "tags": ["liquibase","liquibase properties","database","schema database","struktur database","source/version control","changelog","generateChangelog","diffChangeLog"],
        "url": "http://coding4ever.net/blog/2017/01/18/manajemen-perubahan-struktur-database-menggunakan-liquibase/",
        "teaser": null
      },{
        "title": "Membuat Log Aplikasi Menggunakan Log4Net",
        "excerpt":"Secara teknis kita memang tidak bisa membuat aplikasi yang 100% bebas dari bug. Seberapa keraspun kita mencoba pasti aplikasi yang kita buat ada bugnya. Di sisi lain user adalah tester terbaik yang pernah ada :grin:. Mereka bisa melakukan hal-hal luar biasa di luar perkiraan dan skenario kita yang bisa menyebabkan error, sayangnya user biasanya kurang bisa menjelaskan dengan baik apa yang menyebabkan error. Yang jelas, kita tidak dapat memperbaiki bug sampai kita tahu penyebabnya.     Saat ini, sebagian besar aplikasi menggunakan logging sebagai cara untuk menyimpan informasi tentang operasi yang dilakukan, karena data tersebut sangat berguna ketika kita harus mendiagnosa masalah yang terjadi pada saat aplikasi dijalankan. Logging di sini tidak hanya digunakan untuk mencatat error yang terjadi, tapi bisa juga digunakan untuk mencatat operasi harian yang dilakukan oleh aplikasi, seperti operasi simpan, update, delete atau yang lebih dikenal dengan istilah operasi CRUD.   Dari pada kita harus membuat fungsi sendiri untuk melakukan proses logging, ada baiknya kita menggunakan library yang sudah terbukti ampuh, mudah digunakan dan open source. Salah satunya adalah log4net.   Log4net   Log4net adalah library open source yang dibangun di atas teknologi .NET. Dengan menggunakan library ini kita bisa dengan mudah mengatur output dari log, apakah akan ditampilkan langsung di layar console, disimpan ke file text/database atau pilihan output lainnya. Log4net merupakan hasil portingan dari library Log4J yang digunakan untuk Java.   Beberapa fungsi atau fitur Log4net yang akan dibahas pada postingan kali ini adalah:      Logger – Logger adalah object yang bertugas mengeluarkan pesan log. Inilah object utama yang kita gunakan dalam kode program.   Level - Secara default, Log4net menyediakan beberapa level logging, diurutkan berdasarkan urutan prioritas terendah            ALL       DEBUG       INFO       WARN       ERROR       FATAL       OFF           Appender - Appender  adalah  object  yang  bertugas  menampilkan  log  message. Ada beberapa appender yang biasa digunakan, misalnya:            ConsoleAppender - untuk  menampilkan  log  ke  console atau command prompt       RollingFileAppender - untuk menyimpan log ke dalam file           Selain itu ada juga appender untuk menyimpan  ke  database,  mengirim  email,  mengakses  log  sistem operasi, dan berbagai tujuan lainnya. Untuk informasi lebih lanjut tentang log4net appender bisa Anda cek di sini.       Menggunakan Log4net   Sebelum menggunakan Log4net kita siapkan terlebih dulu project uji cobanya. Project ini bisa langsung Anda download di sini.      Project ini menggunakan konsep Repository Pattern untuk menerapkan konsep separation of concern atau pemisahan kode program berdasarkan fungsinya. Semua kode untuk akses database harus dipisahkan dengan kode untuk pengaturan user interface. Informasi lebih lanjut tentang Repository Pattern bisa Anda cek di sini.   Langkah 1: Menyiapkan tabel untuk menyimpan hasil log   Seperti yang sudah saya jelaskan di bagian intro, bahwa Log4net mempunyai beberapa jenis objek appender yang bertugas untuk menampilkan log, salah satunya adalah  appender untuk menyimpan ke database. Karena data lognya akan disimpan ke database, tentunya kita harus menyiapkan struktur tabelnya terlebih dulu. Berdasarkan dokumentasi resmi Apache log4net struktur tabel standar yang digunakan adalah sebagai berikut:   CREATE TABLE Log (     Id int IDENTITY (1, 1) NOT NULL,     Date datetime NOT NULL,     Thread varchar (255) NOT NULL,     Level varchar (50) NOT NULL,     Logger varchar (255) NOT NULL,     Message varchar (4000) NOT NULL,     Exception varchar (2000) NULL )  Karena tidak semua field tabel di atas kita butuhkan, selain itu ada beberapa field yang perlu kita tambahkan, sehingga struktur tabel log di atas kita revisi seperti berikut:   CREATE TABLE Logs(     LogID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,      Level VARCHAR(10),      ClassName VARCHAR(200),      MethodName VARCHAR(100),      Message VARCHAR(100),      NewValue VARCHAR(1000),      OldValue VARCHAR(1000),      Exception VARCHAR(1000),      CreatedBy VARCHAR(50),      LogDate DATETIME DEFAULT CURRENT_TIMESTAMP )  Penjelasan struktur tabel:      Level – Berisi salah satu level dari Log4net yaitu DEBUG, INFO, WARN, ERROR, FATAL dan level lainnya.   ClassName – Berisi namespace dan nama class yang memanggil objek logger   MethodName – Berisi nama method yang memanggil objek logger   Message – Berisi pesan yang kita tambahkan pada saat memanggil objek logger   NewValue – Berisi data yang ditambahkan atau data setelah di edit dalam format json   OldValue – Berisi data sebelum di edit atau data yang dihapus   Exception – Menyimpan nilai string dari objek exception   CreatedBy – Menyimpan informasi user yang menjalankan aplikasi   Di bawah ini adalah contoh hasil log yang sudah disimpan ke dalam database.      Langkah 2: Menambahkan library Log4net via nuget package manager   Library Log4net sudah tersedia di repository nuget sehingga mempermudah kita dalam proses instalasinya.      Langkah 3: Menambahkan class Log4NetRepository dan Log4NetAppender   Setelah menyiapkan tabel logs (langkah 1), langkah berikutnya adalah menambahkan class repository untuk mengakses tabel tersebut. Class ini dibuat berdasarkan repository pattern yang sudah pernah saya bahas di sini.      Class Log4NetRepository ini nantinya akan kita akses melalui class Log4NetAppender. Class Log4NetAppender merupakan class  custom Log4Net appender yang merupakan turunan dari class AppenderSkeleton. Class ini akan meng-override method Append.      Setelah itu kita lengkapi kode implementasinya seperti berikut:      Untuk informasi lebih lanjut tentang log4net appender bisa Anda cek di sini.   Langkah 4: Menambahkan konfigurasi Log4Net   Edit file app.config/web.config, di file ini kita akan menambahkan konfigurasi log4net untuk mengeset custom appender dan level logging yang sudah kita buat dilangkah 3.      Langkah 5: Tes Pemanggilan Objek Logger   Sebelum kita lanjut ke tes pemanggilan objek logger, aktifkan terlebih dulu class  entry point (Program.cs). Setelah itu tambahkan kode berikut:      Dibaris ke 9, kita menambahkan attribut [assembly: log4net.Config.XmlConfigurator(Watch = true)] yang berfungsi untuk membaca konfigurasi log4net yang tersimpan di file app.config/web.config.   Dibaris 14 kita menambahkan public static objek dengan nama log (logger), objek inilah yang bertugas untuk mengeluaran pesan log. Dan terakhir di baris 23 kita menambahkan custom property dengan nama UserName. Nilai property ini akan di baca oleh class custome Log4Net appender sebelum di simpan ke database.      Setelah semua persiapan selesai, kita akan memanggil objek logger pada event/method tertentu, misal pada saat menyimpan data (Save), Edit data (Update) dan Hapus Data (Delete).   Logger untuk Method Save   Berikut adalah contoh pemanggilan objek logger untuk method Save.      Perhatikan baris ke 115, kita mengeset nilai custom property dengan nama NewValue. Isinya adalah nilai dari objek class model/entity yang sudah di konversi ke format JSON. Method ToJson adalah method extension yang saya tambahkan untuk mempermudah proses konversi dari objek class model/entity ke format json. Saya sendiri menganggap method extension ini sebagai jurus terlarang :grin:, kenapa terlarang karena method extension ini melanggar salah satu aturan dalam dunia OOP yaitu kita bisa menambahkan method baru dari sebuah class tanpa melalui mekanisme pewarisan (inheritance). Berikut kode untuk method extension ToJson.      Kembali ke method Save di atas,jika dipanggil akan menghasilkan log seperti berikut:         Perhatikan field NewValue di atas, isinya adalah nilai dari objek Category yang sudah di konversi ke dalam format json.   Logger untuk Method Delete   Mirip dengan contoh pemanggilan objek logger untuk method Save. Hanya saja di sini kita mengeset nilai custom property dengan nama OldValue yang isinya adalah nilai objek class model/entity yang sudah  dikonversi ke json.         Logger untuk Method Update   Khusus untuk method Update kita akan me-log dua data yaitu data sebelum (OldValue) dan sesudah (NewValue) diupdate. Jadi kita akan memanggil objek logger di dua lokasi yang berbeda yaitu di layer User Interface (UI) dan layer Data Access (Repository).               Field NewValue akan berisi dengan data setelah diupdate, sedangkan field OldValue akan berisi dengan data sebelum diupdate.   Terakhir Logger untuk Exception/Error   Untuk log exception/error bisa langsung kita tempatkan di blok try .. catch.         Kesimpulan   Dengan menggunakan library log4net akan memudahkan tugas harian kita dalam membuat log aplikasi.   Selamat MENCOBA :blush:  ","categories": ["Logger"],
        "tags": ["logger","log4net","GlobalContext.Properties","LogicalThreadContext.Properties","Repository Pattern","Appender"],
        "url": "http://coding4ever.net/blog/2017/01/23/membuat-log-aplikasi-menggunakan-log4net/",
        "teaser": null
      },{
        "title": "OpenRetail - Open Source Project for Retail Business",
        "excerpt":"Apa itu OpenRetail?   OpenRetail adalah software open source khusus untuk bidang usaha ritel, grosir, mini market, toko bangunan, toko komputer, toko buku dan bidang usaha lainnya yang sejenis.   Saat ini pilihan software untuk usaha retil memang banyak ditambah lagi harga yang bervariasi mulai dari ratusan hingga jutaan rupiah. Tapi untuk software yang gratis, open source dan berkualitas mungkin OpenRetail adalah solusinya :blush:.     Apakah aplikasi ini benar-benar gratis?   Yuph, benar-benar gratis, bahkan lebih dari itu OpenRetail adalah software open source sehingga Anda bisa mendownload kode sumbernya, mempelajarinya dan mengembangkan sendiri sesuai kebutuhan, tapi dengan syarat tidak boleh menghapus informasi asli tentang pembuat aplikasi ini.   Sebagai penutup, jika Anda merasakan manfaat menggunakan OpenRetail, jangan lupa untuk ikut berkontribusi dalam pengembangan OpenRetail.   Download: OpenRetail                              Selamat mencoba :blush:  ","categories": ["Freeware"],
        "tags": ["OpenRetail","Open Retail","Software","Project","Mini Market","Toko Bangunan","Open Source"],
        "url": "http://coding4ever.net/blog/2017/04/13/openretail-open-source-software-for-retail-business/",
        "teaser": null
      },{
        "title": "Membuat Service SMS Gateway untuk Engine Gammu",
        "excerpt":"Pasti udah pada tau kan apa itu Gammu ? Klo enggak ya keterlaluan he he. Itu loh engine yang biasa digunakan untuk mengirim dan menerima sms dan biasanya sering digunakan untuk membuat sms gateway.   Di postingan ini saya tidak akan membahas bagaimana cara instalasi Gammu, konfigurasi dan database yang digunakan. Jadi saya mengasumsikan bahwa service Gammu Anda (GammuSMSD) sudah berjalan dengan baik, dengan kata lain jika ada sms masuk ke nomor yang Anda gunakan sebagai sms center, maka service Gammu otomatis akan meng-INSERT-kan sms tersebut ke tabel inbox.     Struktur Tabel Gammu   Sebelum kita lanjut bagaimana membuat windows service untuk engine Gammu ada baiknya kita melihat dulu struktur tabel Gammu secara menyeluruh.      Dari keenam tabel di atas, kita cukup fokus di 3 tabel utama yaitu inbox, outbox dan outbox_multipart. Tabel inbox otomatis terisi, jika ada sama masuk tentunya dengan syarat service Gammu Anda (GammuSMSD) sudah berjalan dengan baik. Di tabel inbox ini juga sudah ada field dengan nama Processed yang bisa kita gunakan sebagai flag/penanda sms yang sudah diproses.   Nah jika ada sms yang mau dikirim, tinggal kita INSERT-kan datanya secara manual ke tabel outbox. Dan jika smsnya panjang (lebih dari 160 karakter), smsnya harus kita pecah menjadi 2, 3, dst sesuai dengan jumlah karakter yang mau dikirim. Setelah dipecah, sms pertama masuk ke tabel outbox, dan sisanya masuk ke tabel outbox_multipart.   Untuk informasi lebih lanjut tentang struktur database Gammu bisa Anda cek di sini.   Konfigurasi Gammu   Untuk konfigurasi gammu ada dua file yang harus kita edit nilainya yaitu file smsdrc dan gammurc. File ini biasanya ada di folder Instalasi Gammu\\share\\doc\\gammu\\examples\\config trus kita copykan ke folder ` Instalasi Gammu\\bin`. Berikut adalah contoh konfigurasi gammu yang saya gunakan.   # konfigurasi file gammurc  [gammu] device = com3: connection = at115200  # konfigurasi file smsdrc  [gammu] device = com3: connection = at115200  [smsd] # SMSD service to use, one of FILES, MYSQL, PGSQL, DBI service = SQL  # File (or stderr, syslog, eventlog) where information will be logged logfile = C:\\gammu\\log\\gammu.log  # Amount of information being logged, each bit mean one level debuglevel = 255  # How many seconds should SMSD wait after there is no message in outbox before scanning it again. Default is 30. commtimeout = 1  # Shows how many seconds SMSD should wait for network answer during sending sms. If nothing happen during this time, sms will be resent. Default is 30. sendtimeout = 10  # Phone communication settings checksecurity = 0 CheckBattery = 0  # Database backends congfiguration user = root password = rahasia host = gammuodbc  # pc can also contain port or socket path after colon (eg. localhost:/path/to/socket) database = db_gammu  # DBI configuration driver = odbc  # Possible values: mysql, pgsql, sqlite, mssql (Microsoft SQL Server), access (Microsoft Access), oracle # ref: https://wammu.eu/docs/manual/smsd/config.html#gammu-smsdrc sql = mysql  Coba perhatikan konfigurasi pada file smsdrc di atas terutama di bagian host, nilainya kita isikan dengan nama ODBC yang terhubung ke database gammu, dan untuk membuat ODBCnya kita gunakan fasilitas ODBC Data Source.      Untuk menambahkan ODBC di atas, sebelumnya kita harus menginstall terlebih dulu MySQL Connector/ODBC.   Environment Testing dan Development Tool yang Digunakan      Windows 7 Pro 64 bit   Visual Studio Community 2013 – untuk bahasa yang digunakan C#   Tipe aplikasi – Windows Service   Micro ORM Dapper.NET   Gammu-1.38.4-Windows-64bit   Database SQLite – untuk menyimpan data siswa, mata pelajaran dan nilai   Database MySQL v5.5.45 – untuk menyimpan data gammu   MySQL Connector/ODBC v5.3.9   Modem Wavecom M1306B   Kok menggunakan Connector/ODBC ? Iya karena Gammu v1.38.4 sudah mendukung koneksi menggunakan ODBC. Jadi selain MySQL, dengan menggunakan ODBC dukungan databasenya jadi lebih banyak seperti PostgreSQL, SQLite, Oracle, MS SQL Server dan MS Access.      Contoh Kasus   Untuk contoh kasusnya kita akan membuat service sms gateway untuk request data yang berhubungan dengan siswa seperti data pribadi, mata pelajaran dan nilai. Service sms gateway ini akan terhubung ke dua database yaitu database gammu yang tersimpan di MySQL dan database nilai yang tersimpan di SQLite. Sms gateway ini mempunyai beberapa format request data yaitu:   CEKMP\t\t          # request data mata pelajaran CEKSISWA#NIS           # request data siswa CEKNILAI#NIS#&lt;KODE MP&gt; # request data nilai, kode mp optional  Untuk data siswa, mata pelajaran dan nilainya disimpan menggunakan database SQLite.      Project SMS Gateway   Project SMS Gateway ini dibangun dengan menggunakan konsep separation  of  concern atau pemisahan kode program berdasarkan fungsinya. Semua kode untuk akses database harus dipisahkan dengan kode untuk pengaturan user inteface. Hal ini memungkinkan kode akses database yang dibuat untuk aplikasi desktop, dengan mudah digunakan untuk aplikasi lainnya seperti web, console atau windows service. Selain itu penerapan konsep separation  of  concern secara disiplin, dapat menghasilkan kode program yang dapat dites secara otomatis menggunakan tool Unit Testing.   Untuk urusan kode akses database, project ini menggunakan pattern/pola Repository Pattern yang berisi semua kode untuk mengakses database. Semua kode yang sepesifik terhadap implementasi akses database berhenti di sini, lapisan lebih atas tidak boleh tahu bagaimana akses database diterapkan, apakah menggunakan ADO.NET murni (raw ADO.NET) atau menggunakan tool ORM/Micro ORM seperti Dapper.NET, Entity Framework atau NHibernate. Lapisan lainya hanya perlu tahu fungsionalitas dari suatu method di dalam class Repository, tidak perlu tahu bagimana method tersebut diimplementasikan.   Idealnya secara logic, arsitektur aplikasi yang kita gunakan seperti berikut:      Tetapi untuk menyederhanakan pembahasan business logic layer bisa kita gabung ke presentation layer, sehingga arsitekturnya menjadi seperti berikut:      Nah untuk contoh project SMS Gateway ini menggunakan arsitektur yang kedua.      Yang pertama adalah project WindowsServiceGammu.Model. Project ini bertipe Class Library yang berisi class model/entity yang merupakan representasi dari sebuah table. Jadi kalo kita ingin menerapkan konsep OOP dalam pemrograman database maka class-class model/entity ini wajib kita gunakan.      Berikutnya adalah project WindowsServiceGammu.Repository. Project ini bertipe Class Library yang berisi class-class repository yang bertugas untuk menangani operasi CRUD. Biasanya untuk masing-masing class model/entity kita buatkan class repositorynya.      Pada gambar di atas saya menggunakan dua class context yaitu MySqlContext dan SQLiteContext. Class context adalah class yang bertanggung jawab untuk berinteraksi secara langsung dengan database. Jadi class contextlah yang bertugas untuk membuat koneksi, menjalankan perintah sql seperti insert, update, delete dan select atau objek database seperti store procedure dan function. Selain class context juga ada class-class repository yang bertugas untuk menangani operasi CRUD. Berikut adalah contoh class repository untuk class SiswaRepository dan GammuRepository.       Untuk class repository lainnya bisa Anda cek di sini.   Dan yang terakhir adalah project WindowsServiceGammu.Service yang bertipe Windows Service. Project ini tidak bisa dijalankan secara langsung seperti halnya project dengan tipe Console atau Windows Form, tapi harus didaftarkan terlebih dahulu ke Windows Service.      Project ini hanya memanggil class-class model atau repository yang sudah ada.   Ada dua class utama yang digunakan oleh project ini yang pertama yaitu class MainService yang merupakan turunan dari class ServiceBase. Class ServiceBase adalah class bawaan .NET Framework yang merupakan class dasar agar sebuah aplikasi bisa di register/menjadi bagian dari aplikasi service (Windows Service).     Berikutnya adalah class SMSGatewayTask yang bertugas untuk membaca tabel inbox-nya gammu, memvalidasi perintah yang ada dan mengenerate pesan balasan dan kemudian menyimpannya ke tabel outbox. Semua aktivitas membaca dan menyimpan kembali ke database ini dibantu oleh class-class repository.     Instalasi Windows Service   Seperti yang sudah saya jelaskan di atas, project dengan tipe Windows Service tidak bisa dijalankan secara langsung seperti halnya project dengan tipe Console atau Windows Form, tapi harus didaftarkan terlebih dahulu ke Windows Service. Untuk mendaftarkannya kita gunakan tool bawaan .NET Framework yaitu InstallUtil.exe.   # install service %WINDIR%\\Microsoft.NET\\Framework\\v4.0.30319\\InstallUtil.exe WindowsServiceGammu.Service.exe  # uninstall service %WINDIR%\\Microsoft.NET\\Framework\\v4.0.30319\\InstallUtil.exe WindowsServiceGammu.Service.exe /u  Jika berhasil seharusnya service sms gateway yang sudah kita buat akan terdaftar di Windows Service.      Selamat MENCOBA :blush:  ","categories": ["Visual C#","Dapper .NET","SMS Gateway"],
        "tags": ["sms gateway","windows service","gammu","repository","dapper"],
        "url": "http://coding4ever.net/blog/2017/08/22/membuat-service-sms-gateway-untuk-engine-gammu/",
        "teaser": null
      },{
        "title": "GitLab CI untuk .NET Developer Bagian #1",
        "excerpt":"Sudah hampir setahun saya menggunakan Jenkins sebagai tool/software CI Continuous Integration. Ada banyak manfaat yang saya rasakan terutama untuk mengurangi pekerjaan-pekerjaan sepele tapi berulang seperti pembuatan paket instalasi, upload updatean terbaru ke server atau deploy web api/service ke server development atau production.  Dengan menggunakan software CI(Continuous Integration) seperti Jenkins pekerjaan-pekerjaan membosankan tersebut bisa dilakukan hanya dengan mengklik satu tombol atau bisa juga dibuat otomatis ketika kita mem-push perubahan source code ke repository git. Waktu yang dibutuhkan juga biasanya tidak lama sekitar 1-3 menit, ya tergantung besar atau kecilnya project yang akan dibuild/deploy.        Selain itu dari sisi dokumentasi juga ikut terbantu, karena tool seperti Jenkins dan dengan bantuan pluginnya bisa otomatis mengenerate history build dari waktu ke waktu.      Tapi pada postingan kali ini saya ingin membahas tool/software CI(Continuous Integration) yang lain yaitu GitLab CI. Beberapa hari ini saya menyempatkan untuk mencoba GitLab CI dan kesimpulannya ada beberapa kelebihan GitLab CI dibandingkan Jenkins yaitu:      GitLab CI sudah terintegrasi dengan GitLab . GitLab  adalah layanan cloud untuk repository git, jadi mirip dengan github atau bitbucket. Kelebihan gitlab dibandingkan dengan github dan bitbucket adalah untuk layanan gratisnya tidak ada pembatasan jumlah tim atau jumlah repository private yang bisa dibuat. Sedangkan untuk Jenkins repository gitnya harus diinstall terpisah atau menggunakan layanan repository git yang sudah ada seperti gitlab, github atau bitbucket.   Konfigurasi Job di GitLab CI lebih sederhana dibandingkan Jenkins. Konfigurasi job GitLab CI menggunakan file text biasa dengan format YAML, sehingga file konfigurasi ini bisa kita tambahkan ke repository git.   Satu konfigurasi GitLab CI sudah bisa digunakan untuk beberapa job dan stage sedangkan dengan Jenkins kita harus membuat beberapa job untuk masing-masing stage (CMIIW).   Penggunaan  Jenkins sangat cocok untuk keperluan internal kantor, jadi jika ingin digunakan secara public (di akses via internet) harus menyediakan mesin khusus yang mempunyai ip public atau bisa juga menggunakan VPS. Sedangkan untuk GitLab CI sendiri kita cukup menyediakan mesin yang mempunyai akses internet dan tidak harus mempunyai ip public.   Apalagi ya…, silahkan dicoba sendiri he he :grin:   Continuous Integration   Sebelum kita lanjut ke pembahasan GitLab CI, saya ingin mereview kembali apa yang dimaksud dengan CI (Continuous Integration).  Continuous Integration, untuk selanjutnya kita sebut CI saja, merupakan salah satu kegiatan untuk meningkatkan produktivitas dalam pengembangan aplikasi di mana seluruh hasil kerja (source code) dari masing-masing developer digabungkan (push) ke dalam satu wadah (server repository source code). Bisa sekali sehari, bisa juga beberapa kali dalam sehari. Setiap penggabungan source code akan diverifikasi secara otomatis oleh server CI, yang memungkinkan tim untuk mendeteksi secara dini jika ada masalah/konflik/error pada saat penggabungan source code.   Setelah penggabungan hasil kerja (source code) selesai, server CI otomatis akan melakukan proses build untuk memastikan tidak ada kode yang merusak/membuat proses build gagal. Jadi semakin cepat kegagalan build ini diketahui semakin cepat pula kita meresponnya. Dan jika proses build-nya berhasil akan dilanjutkan dengan proses deploy. Selain itu server CI juga bisa dikonfigurasi untuk melakukan proses lain seperti menjalankan unit testing, integration testing dan testing otomatis lainnya.   Sebagai .NET developer kita sudah biasa melakukan proses build dengan menekan tombol F5 (Start Debugging) atau Ctrl+F5 (Start Without Debugging) baik pada waktu development atau perbaikan bug. Sedangkan untuk contoh deploy anggap saja seperti kita membuat paket installer yang akan didistribusikan ke komputer/server klien. Nah dengan menggunakan CI semua proses ini bisa dilakukan secara otomatis dan terpusat, sehingga kita mempunyai arsip hasil build dan deploy dari waktu ke waktu. Jadi untuk mencari file setup/paket installer terakhir enggak usah lagi nanya ke developer karena bisa langsung kita download dari server CI-nya.   Proses build ini selain bisa dibuat otomatis setiap kita mem-push source code ke server repository bisa juga kita buatkan jadwalnya, misal pas jam makan siang atau jam pulang kantor. Jadi di kantor dibuat kesepakatan/aturan klo ada yang merusak build pas jam makan siang enggak boleh makan siang sampai proses build-nya berhasil atau yang merusak build pas jam pulang kantor enggak boleh pulang sampai proses build-nya berhasil :grin:   Jadi dengan menggunakan CI, alur kerja kita lebih kurang seperti berikut :      Menulis kode, build dan tes di komputer masing-masing (seperti biasa).   Commit dan push kode ke server repository/source control seperti GIT atau SVN.   Server CI akan meng-clone/pull repository kemudian melakukan build, menjalankan tes otomatis (jika ada) dan deploy secara otomatis. Jika buildnya gagal ulangi lagi langkah pertama.   Nah mudah-mudahan sampai di sini sudah punya gambaran ya tentang apa itu Continuous Integration dan bagaimana cara kerjanya.   Apa saja yang perlu dipelajari ?   Untuk belajar CI, tentu saja ada pengetahun penunjang yang perlu Anda pelajari yaitu penggunaan Source/Version Control terutama GIT dan aplikasi GIT Client seperti TortoiseGit. Pengetahun lainnya adalah pembuatan paket instalasi menggunakan Inno Setup untuk aplikasi desktop atau bisa juga pengetahuan mendeploy web api/service ke server.   GitLab CI   GitLab CI adalah salah satu tool/software Continuous Integration gratis yang merupakan bagian dari GitLab. GitLab sendiri merupakan layanan cloud repository git, jadi mirip dengan github atau bitbucket. Kelebihan dari GitLab ini sendiri, untuk versi gratisnya tidak dibatasi seperti halnya github dan bitbucket. Jadi dengan versi gratisnya tidak ada pembatasan jumlah private repository yang bisa kita buat ataupun jumlah tim yang terlibat. Menarik bukan untuk sebuah layanan cloud repository git yang gratis.   GitLab CI sendiri kalo kita lihat lebih mirip dengan sebuah dashboard untuk mengelola job dan log hasil buildnya. Jadi aslinya yang melakukan build dan deploy itu bukanlah GitLab CI tapi tool lain yang disebut dengan  GitLab Runner. GitLab Runner ini harus kita install di mesin (pc/server) yang mempunyai akses internet agar bisa terhubung ke service GitLab CI. Mesin untuk GitLab Runner tidak harus mempunyai ip public yang penting terkoneksi dengan internet.   Idenya sederhana tapi brilian, dengan konsep seperti ini akan menghemat resource dari server GitLab itu sendiri, karena semua resource yang dibutuhkan untuk proses build dan deploy di tanggung oleh mesin dari user/developer. Tapi dari sisi user/developer juga diuntungkan karena mesin untuk build dan deploynya adalah milik kita sendiri, sehingga kita punya akses full untuk setup/konfigurasi tool/software apa saja yang dibutuhkan untuk proses build dan deploy tersebut.   GitLab Runner   GitLab Runner adalah tool/software yang bertugas untuk menjalankan job dan mengirimkan kembali hasilnya ke GitLab, nah data-data inilah yang akan diolah oleh GitLab CI.   GitLab Runner bisa diinstall untuk GNU/Linux, macOS, FreeBSD, dan Windows.   Instalasi GitLab Runner   Instalasi GitLab Runner sendiri sangat mudah, ditambah dengan dokumentasi yang lengkap. Jadi seharusnya Anda tidak akan mendapatkan masalah untuk langkah-langkah instalasinya. Untuk petunjuknya bisa ada cek di sini.   Untuk memastikan instalasinya GitLab Runnernya berhasil, silahkan Anda cek service GitLab Runnernya.      Selain menginstall GitLab Runner, kita juga perlu menginstall beberapa tool pendukung seperti:      .NET Framework 4.0, 4.5.x   Microsoft Build 2015   Source/version control Git   Pembuat paket installer seperti Inno Setup   Nuget untuk merestore paket nuget   FTP Client seperti WinSCP   Intinya semua tool pendukung di atas, diinstall sesuai dengan kebutuhan environment development.   Mendaftarkan Repository ke GitLab Runner   Setelah instalasi GitLab Runner, berikutnya adalah mendaftarkan repository git ke GitLab Runner. Berikut langkah-langkahnya:   Langkah 1.\tLogin ke GitLab, klo belum punya ya silahkan daftar terlebih dulu.   Langkah 2.\tBuat repository baru      Langkah 3.\tSetelah membuat repositorynya berhasil, klik link Settings -&gt; Pipelines      Scroll ke bawah sedikit, kemudian catat informasi Specific Runners untuk poin 2 dan 3.      Kemudian di bagian Shared Runners klik tombol Disable shared Runners      Langkah 4.\tBerikutnya adalah mengaktifkan Command Prompt dengan mode Administrator kemudian masuk ke folder instalasi GitLab Runner      Setelah itu ketik perintah gitlab-runner register, kemudian tinggal jawab pertanyaan yang ada termasuk informasi Specific Runners yang kita dapatkan di langkah 3.      Jika proses registrasinya berhasil, kita bisa cek runner aktifnya dibawah informasi Specific Runners      Contoh Project   Untuk keperluan uji coba kali ini saya menggunakan contoh aplikasi Northwind yang bisa Anda download di sini. Setelah itu kita push source codenya ke link repository gitlab yang sudah kita buat di langkah-langkah sebelumnya.      Dan untuk proses push-nya saya menggunakan TortoiseGit.            Menambahkan file .gitlab-ci.yml   Untuk melakukan konfigurasi GitLab CI, kita perlu menambahkan file dengan nama .gitlab-ci.yml. File ini adalah file text biasa yang menggunakan format YAML, sehingga file konfigurasi ini bisa kita tambahkan ke folder source code kemudian kita simpan juga ke repository git.         Berikut contoh isi file .gitlab-ci.yml     Coba perhatikan skrip di atas, di baris ke-6 kita mendefinisikan beberapa stage yaitu restore dan build, kita bisa juga menambahkan stage yang lain misal test, deploy, development, production, dst. Stage digunakan untuk menentukan jenis dari job. Jadi perlu diingat bahwa stage dan job itu berbeda, walaupun dibanyak contoh menggunakan nama yang sama untuk stage dan job.   Eksekusi antar job di GitLab CI itu sifatnya independen atau dengan kata lain tidak ada hubungan antar job. Ketika job B membutuhkan file yang dihasilkan oleh job A secara default tidak bisa, sehingga kita perlu menambahkan konfigurasi cache, seperti yang terlihat di baris ke-10. Kita mendaftarkan folder lib ke dalam konfigurasi cache. Folder lib ini berisi file-file library (*.dll) hasil dari job restore_nuget_package. Semua file yang ada di folder lib ini dibutuhkan pada saat menjalankan job build_solution.   Berikutnya kita pindah ke baris 15, di baris ini kita mendefinisikan job dengan nama restore_nuget_package dengan tipe stage restore, kemudian menjalankan skrip untuk merestore paket nuget.   Terakhir di baris ke-21, kita mendefinisikan job lain dengan nama build_solution, sesuai namanya job ini digunakan untuk membuild solution atau project atau klo lewat IDE Visual Studio .NET kita menekan tombol F5 (Start Debugging) atau Ctrl+F5 (Start Without Debugging).   Cara Mengecek/Memvalidasi Skrip File .gitlab-ci.yml   Sebelum kita menambahkan file .gitlab-ci.yml ke repository git, ada baiknya kita cek terlebih dahulu apakah script yang kita tuliskan sudah benar atau belum. GitLab CI sudah menyediakan link khusus untuk mengeceknya, yang bisa Anda cek di sini.      Testing Build   Untuk testing build kita tinggal melakukan push ke repository git.      Kemudian untuk melihat log progres buildnya kita bisa cek link Pipelines.      Gambar detail job yang sedang dijalankan      Untuk melihat detail log dari masing-masing job, tinggal kita klik nama jobnya, misal job restore nuget package      job build solution      Status proses build berhasil      Untuk contoh lengkap hasil buildnya bisa Anda cek di sini   Akhirnya selesai juga postingan GitLab CI untuk .NET Developer Bagian #1, dan mudah-mudahan bisa dipahami :grin:. Untuk postingan berikutnya insyaAlloh kita akan menambahkan job untuk membuat paket instalasi menggunakan Inno Setup dan menguploadnya sehingga bisa langsung didownload via  Dashboard GitLab CI.   Selamat MENCOBA :blush:  ","categories": ["continuous integration","gitlab ci"],
        "tags": ["continuous integration","gitlab ci","gitLab runner","git","build","deploy","job"],
        "url": "http://coding4ever.net/blog/2017/08/30/gitlab-ci-untuk-net-developer-bagian-number-1/",
        "teaser": null
      },{
        "title": "GitLab CI untuk .NET Developer Bagian #2",
        "excerpt":"Melanjutkan pembahasan tentang Continuous Integration menggunakan GitLab CI. Di postingan sebelumnya kita sudah melakukan konfigurasi GitLab CI dengan menambahkan file  .gitlab-ci.yml.   Di konfigurasi awal ini kita sudah menambahkan dua job yang bertugas untuk merestore paket nuget dan melakukan proses build. Berikutnya kita akan menambahkan satu job lagi yang bertugas untuk membuat paket instalasi menggunakan Inno Setup jika job pertama dan kedua berhasil dijalankan. Nah dengan menggunakan CI semua proses ini bisa dilakukan secara otomatis dan terpusat, sehingga kita mempunyai histori hasil build dari waktu ke waktu. Jadi untuk mencari file setup/paket installer terakhir enggak usah lagi nanya ke developer karena bisa langsung kita download dari server CI-nya.        Inno Setup   Inno Setup adalah tool yang digunakan untuk membuat paket installer yang gratis dan open source. Selain Inno Setup, kita juga bisa menggunakan tool installer lainnya seperti NSIS. Untuk informasi lebih lanjut tentang Inno Setup dan NSIS bisa langsung ke sini dan sini.   Jadi di postingan kali ini kita akan menggunakan Inno Setup untuk keperluan pembuatan file setup/paket installer. Sebagai contoh, berikut adalah skrip Inno Setup yang digunakan untuk membuat file setup/paket installer untuk project Northwind yang kita gunakan sebagai contoh project.     Skrip Inno Setup ini kita tambahkan ke folder yang sama dengan folder source code kemudian kita simpan juga ke repository git.         Menambahkan Job untuk Membuat Paket Instalasi   Setelah menambahkan file Inno Setup, langkah berikutnya adalah kita mengedit file .gitlab-ci.yml untuk menambahkan job baru yang bertugas untuk mengeksekusi file setup.iss   Berikut isi file .gitlab-ci.yml yang sudah kita edit:     Coba perhatikan skrip di atas, di baris ke-4 kita menambahkan variabel InnoSetupPath yang isinya adalah lokasi file ISCC.exe yang digunakan untuk mengompile skrip inno setup. Kemudian di baris ke-10 kita menambahkan stage baru dengan nama setup yang digunakan untuk job baru yang akan kita tambahkan yaitu job create_file_setup. Terakhir di baris ke-29, kita menambahkan job baru dengan nama create_file_setup. Job ini akan melakukan proses kompilasi skrip inno setup menjadi file setup/paket instalasi (baris ke-33), kemudian mengupload ke server GitLab. Untuk keperluan upload ini, kita menambahkan keyword artifacts masih di job create_file_setup, kemudian diikuti dengan beberapa konfigurasi. Artifact adalah output dari proses build, bisa berupa file exe, dll atau file dengan ekstensi lainnya   Setelah itu simpan perubahan file .gitlab-ci.yml ke repository  git.      Kemudian langsung di push, untuk melihat apakah semua job (restore, build dan pembuatan paket instalasi) berhasil dijalankan.      Tunggu beberapa saat, kemudian cek link Pipelines untuk melihat status Pipelines yang sedang dijalankan.      Pipelines digunakan untuk mengelompokkan job. Jika ingin melihat job apa saja yang ada di dalam Pipelines, kita tinggal klik aja link statusnya.      Jika sudah selesai, kita bisa melihat link download artifacts di kolom terakhir.            Selesai…, untuk contoh lengkap hasil buildnya bisa Anda cek di sini   Selamat MENCOBA :blush:  ","categories": ["continuous integration","gitlab ci"],
        "tags": ["continuous integration","gitlab ci","gitLab runner","git","build","deploy","job","inno setup"],
        "url": "http://coding4ever.net/blog/2017/09/09/gitlab-ci-untuk-net-developer-bagian-number-2/",
        "teaser": null
      },{
        "title": "Membuat jaringan VPN Menggunakan SoftEther VPN Bagian #1",
        "excerpt":"Salah satu tantangan bagi kita, pengembang software untuk aplikasi bisnis berbasis desktop adalah ketika klien kita bertanya “Mas, databasenya kalau di taruh di server saja bisa ya? Jadi bisa di akses dari mana saja, soalnya butuh juga akses dari luar”, sedangkan kondisi database server mereka hanya mempunyai ip private. Solusi paling cepat dan murah (gratis) yang mungkin bisa kita tawarkan adalah dengan menggunakan software VPN. Ada banyak pilihan software VPN, mulai dari instalasinya yang gampang seperti Hamachi dan ZeroTier One atau yang sedikit lebih ribet tapi menawarkan segudang fitur yang wah seperti  SoftEther VPN.     Apa itu VPN?   VPN (Virtual Private Network) adalah koneksi private melalui jaringan publik (dalam hal ini internet) yang bersifat virtual, dengan kata lain tidak ada koneksi jaringan secara riil antara 2 atau lebih perangkat (bisa pc, laptop, dll) yang akan berhubungan. VPN bersifat private sehingga tidak semua orang bisa mengaksesnya. Data yang dikirimkan terenkripsi sehingga tetap rahasia meskipun menggunakan jaringan publik. Selain untuk masalah keamanan data, VPN juga bisa digunakan untuk membuat koneksi private dari rumah ke jaringan toko atau kantor misalnya, tanpa menggunakan ip publik, cukup akses internet saja.   Aslinya saya tidak terlalu tertarik dengan solusi software VPN, tapi ini hanya buat jaga-jaga saja. Seperti yang sudah saya jelaskan di bagian intro.   Environment Test   Pembuatan jaringan VPN ini menggunakan environment test sebagai berikut:   Server VPN      Sistem Operasi: Windows 7   Software: SoftEther VPN Server   Relay Server: VPN Azure Cloud, layanan VPN gratis dari Microsoft   Client VPN      Sistem Operasi: Windows 7   Software: SoftEther VPN Client   Selain Windows, SoftEther VPN juga mendukung OS Linux, Mac, FreeBSD dan Solaris.   Skema Jaringan   Sebelum dimulai, kita lihat terlebih dulu skema jaringan yang saya gunakan untuk uji coba membuat jaringan VPN menggunakan SoftEther VPN.      Pada gambar di atas kita bisa melihat, untuk koneksi VPN dari pc/laptop klien ke server VPN kantor melewati VPN Azure Cloud. Apa itu VPN Azure Cloud? VPN Azure Cloud adalah layanan VPN gratis dari Microsoft, dengan menggunakan layanan VPN ini sebagai relay server kita bisa membuat server VPN cukup dengan menggunakan ip private. Jadi itu alasan kenapa di postingan bagian pertama ini kita menggunakan layanan VPN Azure Cloud.   Instalasi SoftEther VPN Server   Langkah 1: Download SoftEther VPN versi Server   Klik link download SoftEther VPN, kemudian pilih SoftEther VPN Server di bawah drop-down list Select Component. Berikutnya di pilihan Select Platform pilih Windows      Versi terakhir saat postingan ini ditulis adalah versi (4.27, Build 9668, beta). Karna masih beta (artinya masih dalam tahap pengembangan dan tes), jadi saya akan menggunakan rilis stabil versi sebelumnya yaitu versi (4.25, Build 9656, rtm).      Kemudian klik link SoftEther VPN Server and VPN Bridge (Ver 4.25, Build 9656, rtm)  untuk memulai proses download.   Langkah 2: Instalasi SoftEther VPN versi Server   Jalankan file EXE SoftEther VPN Server yang sudah didownload untuk memulai instalasi SoftEther VPN versi Server. Setelah instalasi berjalan untuk pertama kali akan tampil jendela welcome, klik tombol Next untuk melanjutkan instalasi.      Selanjutnya akan tampil jendela untuk memilih jenis SoftEther VPN Server.      Pilih SoftEther VPN Server kemudian klik tombol Next. Selanjutnya di jendela End User License Agreement, aktifkan pilihan I agree … , kemudian klik Next.      Kemudian klik tombol Next beberapa kali sampai proses instalasi SoftEther VPN Server dimulai.      Setelah instalasi selesai, di jendela Setup Finished, aktifkan pilihan Start the SoftEther VPN Server Manager kemudian klik tombol Finish.      Konfigurasi SoftEther VPN Server   Langkah 1: Mengatur setting koneksi untuk SoftEther VPN Server   Setelah proses instalasi selesai, akan tampil jendela SoftEther VPN Server Manager, kemudian klik tombol Connect.      Setelah itu akan diminta untuk menginputkan password administrator.      Langkah 2: Memilih jenis SoftEther VPN Server   Pada jendela ini kita aktifkan pilihan Remote Access VPN Server.      Langkah 3: Konfigurasi Virtual Hub   Jendela berikutnya adalah mengeset konfigurasi Virtual Hub. Penamaan Virtual Hub biasanya berdasarkan lokasi dari server, misal KANTOR-JOGJA-VPN.      Langkah 4: Konfigurasi Dynamic DNS Function   Jendela berikutnya adalah pengaturan Dynamic DNS Function. Di jendela ini Anda bisa menggunakan pengaturan default atau bisa juga mengganti nilai dari Dynamic DNS Hostname         Jika gagal, ada kemungkinan Dynamic DNS Hostname sudah digunakan, Anda bisa mencoba Hostname yang lain. Setelah itu klik tombol Exit   Langkah 5: Konfigurasi IPSec / L2TP / L2TPv3   Untuk saat ini kita tidak perlu melakukan perubahan konfigurasi di jendela ini karna kita akan menggunakan layanan VPN Azure Cloud relay server sebagai layanan VPN gratis dari Microsoft.      Kecuali jika ingin menggunakan layanan VPS (Virtual Private Server) sendiri apakah berbasis windows atau linux, Anda harus mengaktifkan pilihan Enable L2TP Server Function, agar server VPNnya bisa diakses dari client.      Langkah 6: Mengaktifkan layanan VPN Azure Cloud   Langkah berikutnya adalah mengaktifkan layanan VPN Azure Cloud relay server sebagai layanan VPN gratis dari Microsoft.      Aktifkan pilihan Enable VPN Azure, kemudian tunggu sampai statusnya menjadi Connected. Untuk penamaan hostname VPN Azure, menyesuaikan dengan Konfigurasi Dynamic DNS Function (langkah 4).   Langkah 7: Membuat User   Langkah berikutnya adalah membuat user yang boleh mengakses server VPN. Pada langkah ini sangat penting untuk membuat kombinasi password yang kompleks mengingat hubungannya dengan keamanan server VPN Anda.            Langkah 8: Konfigurasi Local Bridge   Setelah berhasil membuat user, langkah berikutnya adalah mengeset konfigurasi Local Bridge dengan cara memilih network adapter dari daftar yang tersedia. Pilihlah network adapter yang terhubungan dengan jaringan lokal. Jangan memilih Wi-Fi adapter karena tidak direkomendasikan untuk membuat Local Bridge.      Langkah 9: Mengaktifkan Konfigurasi SecureNAT (optional)   Langkah ini sifatnya optional, jadi tergantung kondisi jaringan lokal dari server VPN Anda. Jika jaringan lokal dari server VPN mengaktifkan fungsi DHCP Server (ip dinamis) maka setting ini tidak perlu diaktifkan, sebaliknya jika jaringan lokal server VPN menggunakan ip statis, maka setting ini harus diaktifkan dengan mengklik tombol Manage Virtual Hub.      Kemudian klik tombol Virtual NAT and Virtual DHCP Server (SecureNAT)      Untuk melihat konfigurasi default DHCP Server yang digunakan, klik tombol SecureNAT Configuration         Anda bisa mengganti konfigurasi di atas sesuai dengan kebutuhan.   Kemudian klik tombol Enable SecureNAT untuk mengaktifkan konfigurasi SecureNAT      Instalasi SoftEther VPN Client   Langkah 1: Download SoftEther VPN versi Client   Klik link download SoftEther VPN, kemudian pilih SoftEther VPN Client di bawah drop-down list Select Component. Berikutnya di pilihan Select Platform pilih Windows      Kemudian download versi stabil pada saat postingan ini ditulis yaitu versi (4.25, Build 9656, rtm)      Kemudian klik link SoftEther VPN Client (Ver 4.25, Build 9656, rtm)  untuk memulai proses download.   Langkah 2: Instalasi SoftEther VPN versi Client   Jalankan file EXE SoftEther VPN Client yang sudah didownload untuk memulai instalasi SoftEther VPN versi Client. Setelah instalasi berjalan untuk pertama kali akan tampil jendela welcome, klik tombol Next untuk melanjutkan instalasi.      Selanjutnya akan tampil jendela untuk memilih jenis SoftEther VPN Client.      Pilih SoftEther VPN Client kemudian klik tombol Next. Selanjutnya di jendela End User License Agreement, aktifkan pilihan I agree … , kemudian klik Next.      Kemudian klik tombol Next beberapa kali sampai proses instalasi SoftEther VPN Client dimulai.      Setelah instalasi selesai, di jendela Setup Finished, aktifkan pilihan Start the SoftEther VPN Client Manager kemudian klik tombol Finish.      Konfigurasi SoftEther VPN Client   Langkah 1: Membuat Virtual Network Adapter   Virtual Network Adapter digunakan oleh SoftEther VPN Client untuk melakukan koneksi ke server VPN. Cara untuk menambahkan Virtual Network Adapter dengan mengklik kanan list Virtual Network Adapter kemudian pilih New Virtual Network Adapter…         Untuk saat ini kita menggunakan nama default saja, kemudian klik tombol Ok. Setelah itu akan tampil jendela proses pembuatan Virtual Network Adapter.      Virtual Network Adapter berhasil ditambahkan.      Langkah 2: Membuat Koneksi VPN   Klik ganda item Add VPN Connection      Setelah itu akan tampil jendela New VPN Connection setting      Untuk informasi Host Name, Port Number dan Virtual Hub Name, nilainya disesuaikan dengan konfigurasi SoftEther Server Manager      Selanjutnya klik tombol Advanced Settings …      Kemudian lakukan perubahan konfigurasi seperti berikut.      Sampai di sini semua konfigurasi sudah selesai baik di sisi server maupun klien.   Langkah 3: Tes Koneksi VPN   Untuk melakukan tes koneksi VPN, klik ganda item Koneksi VPN Kantor Jogja.         Tunggu beberapa saat, dan jika berhasil status koneksi VPN menjadi Connected      Setelah terkoneksi ke server VPN, kita bisa melakukan beberapa tes, misal:      Melakukan ping ke beberapa pc yang ada di kantor.   Melakukan remote menggunakan RDC (Remote Desktop Connection).   Atau query langsung ke server database.   Dan jika berhasil, selamat !!!, Anda sudah mempunyai server VPN sendiri dan bisa mengakses jaringan internal kantor dari mana saja.   Kesimpulan   Dengan menggunakan software SoftEther VPN dan layanan VPN Azure Cloud dari Microsoft, proses pembuatan server VPN menjadi mudah cukup menggunakan ip private dengan biaya 0 rupiah.   Selamat mencoba :blush:   Referensi:      https://www.softether.org/   http://www.vpnazure.net/en/   ","categories": ["vpn"],
        "tags": ["server vpn","vpn server","vpn client","hamachi","zerotier","softether vpn","azure cloud"],
        "url": "http://coding4ever.net/blog/2018/07/05/membuat-jaringan-vpn-menggunakan-softether-vpn-bagian-number-1/",
        "teaser": null
      },{
        "title": "Menyimpan konfigurasi aplikasi secara terpusat menggunakan Consul Key-Value Store Bagian #1",
        "excerpt":"Cara apa yang biasa Anda gunakan untuk menyimpan konfigurasi aplikasi? Biasanya ada beberapa pilihan seperti menyimpan dalam format text (INI, XML, JSON), database atau langsung di hardcode di dalam kode program. Nah cara terakhir adalah yang paling ekstrim, jika terjadi perubahan konfigurasi aplikasi berarti kita harus merubah kode program dan melakukan kompilasi ulang :grin:.     Konfigurasi lokalan ini memang sedikit merepotkan bagai programmer desktop, karana aplikasinya biasanya diinstall dibeberapa tempat sesuai dengan jumlah klien yang ada.   Konfigurasi apa saja sih yang biasanya diperlukan oleh sebuah aplikasi? Ini juga tergantung kebutuhan, biasanya yang paling umum itu ya konfigurasi yang berhubungan dengan database seperti, ip server, nama database dan port yang digunakan. Contoh:         Pada contoh di atas konfigurasi aplikasi disimpan dengan berbagai format seperti INI, XML dan JSON.   Untuk aplikasi yang dibuat menggunakan VB6 biasanya akan menyimpan konfigurasi dengan format INI, sedangkan yang menggunakan .NET lebih senang menggunakan format XML atau JSON.   Jadi apapun pilihan format konfigurasi aplikasi yang Anda gunakan, ketika ada perubahan konfigurasi berarti kita harus merubah satu per satu konfigurasi lokal dari aplikasi kita yang sudah terinstall di pc/laptop klien, baik dilakukan secara langsung (datang ke lokasi) atau dengan bantuan tool remote seperti Radmin.  Anda bayangkan saja klo pengguna aplikasi kita sudah ratusan bahkan ribuan, tentu akan menjadi pekerjaan yang merepotkan alias buang-buang waktu :grin:   Apa itu Consul?   Consul adalah tool yang digunakan untuk keperluan discovery dan konfigurasi service. Tool ini mempunyai beberapa fitur utama yaitu:      Service Discovery   Health Checking   Key/Value Store   Multi Datacenter   Saya sendiri mencoba tool ini ketika mempelajari arsitektur microservices untuk keperluan monitoring service. Nah salah satu fitur tool ini yaitu Key/Value Store yang bisa kita gunakan untuk keperluan menyimpan konfigurasi aplikasi secara terpusat.   Cara Menginstall Consul   Cara installnya gampang, Anda tinggal download consul sesuai dengan versi OS yang Anda gunakan.      Contoh di sini saya mendownload consul versi Windows dan menyimpannya di folder c:\\consul.      Setelah itu kita bisa langsung menjalankan consul dengan mode development.      Setelah jalan, kita bisa langsung mengakses web administrasi consul di alamat localhost:8500      Menjalankan consul dengan mode development ini ada sedikit kekurangan yaitu perubahan data yang kita lakukan misal menambahkan data di menu Key/Value itu tidak tersimpan secara permanen, jadi kita akan menjalankan consul agent dengan mode production. Caranya adalah dengan menambahkan file konfigurasi, misal kita simpan di folder c:\\consul\\config dengan nama consul.json.      Kemudian untuk isinya seperti gambar berikut:      Untuk element bind_addr diisi dengan ip pc/server dimana consul dijalankan. Dan untuk informasi lebih lanjut tentang bagaimana cara mengkonfigurasi consul, bisa anda cek di link ini.   Setelah itu kita jalankan kembali consul dengan mode production.      Consul Key-Value Store   Seperti yang sudah saya jelaskan di atas, salah satu fitur menarik yang dimiliki oleh consul yaitu Key-Value Store. Dengan fitur ini kita bisa menyimpan konfigurasi aplikasi secara terpusat di pc/server yang sudah terinstall consul. Jadi konfigurasi aplikasi kita yang awalnya tersimpan di lokalan, apakah itu menggunakan format INI, XML atau JSON bisa langsung kita pindah ke sini.      Mengakses Data Key-Value Store   Data yang tersimpan di Key-Value Store bisa diakses via RESTful API, untuk postingan pertama ini kita akan menggunakan salah satu tool  REST Client yaitu Postman untuk mengakses data tersebut. Adapun endpoint yang digunakan yaitu /v1/kv.      Untuk response valuenya sudah diencoded menggunakan algoritma Base64, tapi jika ingin langsung menampilkan data aslinya kita tinggal tambahkan parameter ?raw=true.      Menambahkan token   Kayaknya kurang aman klo semua orang bisa langsung mengakses endpoint Key-Value Store tersebut tanpa memasukan token terlebih dulu. Jadi kita bisa menambahkan token pada saat mengakses endpoint Key-Value Store. Caranya adalah dengan mengedit kembali file konfigurasi consulnya.      Setelah itu kita coba akses kembali untuk mengakses endpoint Key-Value Storenya tanpa token. Apakah masih bisa?      Karna sudah tertolak, sekarang coba tambahkan parameter ?token  untuk mengakses endpointya.      Horeee berhasil :blush:   Nah dengan adanya fitur Key-Value Store yang di miliki oleh Consul ini, akan memudahkan kita jika terjadi perubahan konfigurasi aplikasi karena bisa dilakukan secara terpusat.   Mungkin cukup ya untuk postingan bagian pertama ini, insyaAlloh di postingan berikutnya kita akan bahas bagaimana mengakses data Key-Value Store langsung dari aplikasi yang dibuat menggunakan VB6 dan .NET.   Oh iya ada yang kelupaan, gimana caranya agar consul bisa diinstall sebagai service (windows service)? Gampang, Anda tinggal ikuti langkah-langkah yang ada di sini :grin:.   Selamat mencoba :blush:  ","categories": ["service discovery","consul"],
        "tags": ["consul","key-value"],
        "url": "http://coding4ever.net/blog/2019/08/02/menyimpan-konfigurasi-terpusat-menggunakan-consul-key-value-store-bagian-number-1/",
        "teaser": null
      },{
        "title": "Solusi Mengakses Database Lokal (IP Private) Secara Online",
        "excerpt":"Salah satu tantangan bagi software developer untuk aplikasi bisnis berbasis desktop adalah ketika klien meminta untuk mengonlinekan database mereka. Karena memang rata-rata aplikasi desktop hanya digunakan untuk keperluan internal kantor/perusahaan.   Biasanya ada beberapa solusi yang bisa kita tawarkan, ketika klien menginginkan database lokal mereka (ip private) bisa diakses secara online, seperti:        Upgrade paket internet, jika klien kita berlangganan paket internet indihome bisa upgrade ke paket enterprise, tapi klo berat dibiaya bisa langganan IP Dynamic Indihome. Apakah masalah sudah selesai sampai di sini? Engga juga sih, kita masih harus menyeting portforwarding dan setting-lainnya lainya.   Menggunakan software VPN seperti Hamachi, ZeroTier, atau SoftEther VPN, tapi cara kedua ini akan mengurangi koneksi internet kita karena harus menyediakan jalur untuk koneksi VPNnya.   Menyewa layanan Shared Hosting, biaya langganannya juga lumayan murah, sekitar 100 ribuan pertahun. Dengan menyewa layanan Shared Hosting berarti kita harus membuat copyan database lokal untuk ditempatkan di Shared Hosting agar bisa diakses secara online. Tantangannya adalah kita harus membuat aplikasi kecil yang bertugas menyinkronkan database lokal dan database yang ada di Shared Hosting.   Membuat sendiri service yang berfungsi sebagai gateway yang bertugas menjembatani antara aplikasi klien dan database. Untuk cara yang terakhir ini kita membutuhkan sebuah server dengan ip public, contoh disini saya menyewa VPS dengan OS Linux (Ubuntu) di digitalocean.   Nah dipostingan ini kita akan membahas solusi terakhir. Idenya adalah kita ingin memberikan kemudahan kepada klien/customer dalam menggunakan aplikasi yang kita buat, jadi dengan konfigurasi yang sangat minim sekali, aplikasi client bisa langsung konek ke database. Keuntungan lainnya adalah dengan cara ini bisa dijadikan lahan bisnis untuk layanan sewa server, jadi klo klien ingin databasenya bisa diakses secara online ya harus sewa server dulu hehehe :grin:   Karena postingan kali ini adalah hasil dari riset komersil yang saya kerjakan, jadi saya hanya akan membahas tentang arsitektur dan teknologi yang digunakan, tanpa kode ya… :grin:.   Arsitektur Aplikasi   Untuk arsitektur aplikasi yang digunakan seperti gambar berikut:      Keterangan gambar:      Database yang diinstall di jaringan lokal, bisa database PostgreSql, FirebirdSql, SQL Server, MySQL, dan lain-lain. Tergantung database yang Anda gunakan.        WebSocketService – Aplikasi ini bisa diinstall secara terpisah atau satu mesin dengan database. Jadi aplikasi inilah yang terkoneksi langsung dengan database via jaringan lokal (LAN). Aplikasi ini dibuat menggunakan WinForm atau bisa juga berbasis windows service, intinya disesuaikan dengan kebutuhan Anda. Karena aplikasi ini menggunakan library SignalR Core untuk berkomunikasi dengan aplikasi WebSocketGateway yang ada di VPS, maka untuk menjalankan aplikasi ini minimal windows yang dibutuhkan adalah Windows 7 SP1 (.NET Framework 4.6.x).               WebSocketGateway – Aplikasi ini berfungsi sebagai WebSocket server, dibuat menggunakan ASP.NET Core. Selain bertugas untuk menghandle komunikasi via websocket (signalR), juga bertugas untuk menghandle komunikasi via http (web api). WebSocketGateway ini nantinya akan di deploy ke VPS dengan bantuan Docker.               Aplikasi klien, bisa berupa desktop, web dan mobile. Aplikasi ini akan berkomunikasi dengan WebSocketGateway via web api (web service)               Teknologi yang digunakan:      ASP.NET Core, teknologi ini saya gunakan karena VPS yang disewa berbasis linux (Ubuntu)   Websocket menggunakan SignalR   Docker digunakan untuk mempermudah proses deploy aplikasi ASP.NET Corenya   Apa itu ASP.NET Core?   ASP.NET Core adalah sebuah framework yang bisa digunakan untuk membangun sebuah layanan Web API berbasis teknologi .NET. Framework ini adalah versi open-source dari ASP.NET, yang bisa berjalan di berbagai platform seperti macOS, Linux, dan Windows.   Untuk informasi lebih lanjut mengenai ASP.NET Core bisa Anda baca di sini.   Apa itu SignalR?   SignalR adalah library yang memudahkan kita untuk menambahkan fungsi komunikasi real-time pada aplikasi yang kita kembangkan. Fungsi real-time di sini adalah kemampuan server melakukan pengiriman (push) konten atau data kepada client yang sudah terkoneksi ke server, sehingga server tidak perlu menunggu client untuk melakukan permintaan (request) data terbaru.   SignalR selain digunakan untuk pengembangan aplikasi web, juga bisa digunakan untuk platform lainnya seperti desktop (console dan windows form) ataupun mobile (windows phone, android dan iOS).   SignalR menyediakan API yang memungkinkan server memanggil fungsi/method yang dimiliki oleh client atau pun sebaliknya. Proses memanggil method secara remote ini dikenal dengan istilah remote procedure call (RPC).   Komunikasi antara client dan server SignalR dibangun di atas koneksi WebSocket.   Beberapa waktu lalu saya pernah menulis implementasi SignalR untuk aplikasi berbasis windows yang bisa Anda baca disini.   Apa itu Docker?   Docker adalah teknologi container yang memudahkan kita untuk melakukan proses deployment aplikasi ke berbagai platform (macOS, Linux, dan Windows). Untuk informasi lebih lanjut tentang Docker, bisa Anda baca disini.   Demo Aplikasi   Cara menghubungan aplikasi klien (desktop atau mobile) dengan WebSocketService sangat mudah, cukup menginputkan app id yang ditampilkan aplikasi WebSocketService pada tab Pengaturan. Setelah itu aplikasi klien Anda langsung terhubung ke database lokal.      Jika Anda juga penasaran dengan cara kerja aplikasi ini, dan ingin mencoba langsung, bisa Anda download demonya di sini.   Selamat mencoba :blush:  ","categories": ["websocket","signalr"],
        "tags": ["database lokal","online","websocket","signalr"],
        "url": "http://coding4ever.net/blog/2019/08/25/solusi-mengakses-database-lokal-ip-private-secara-online/",
        "teaser": null
      },{
        "title": "Menyimpan konfigurasi aplikasi secara terpusat menggunakan Consul Key-Value Store Bagian #2",
        "excerpt":"Oke, hari ini saya ingin melanjutkan pembahasan postingan saya sebelumnya tentang penyimpanan konfigurasi aplikasi secara terpusat menggunakan consul. Jika pada postingan sebelumnya fokus pembahasan pada instalasi kemudian dilanjutkan dengan demo cara mengakses data yang tersimpan pada key-value store menggunakan salah satu tool REST Client favorit saya yaitu Postman, maka fokus pembahasan kali ini adalah bagaimana cara mengakses data key-value store yang berbasis REST API menggunakan bahasa pemrograman Visual Basic 6 dan C# (.NET).     Mengakses Data Key-Value Store   Sebagai review untuk data yang tersimpan di key-value store bisa diakses via RESTful API (Web API) menggunakan HTTP METHOD GET. Adapun endpoint yang digunakan yaitu /v1/kv/NAMA_KEY. Contoh      Informasi endpoint dan HTTP METHOD ini penting untuk dicatat karena berhubungan dengan kode program yang akan kita tulis di pembahasan berikutnya.   Mengakses Data Key-Value Store Dari Visual Basic 6   Sebagai contoh kasus kita akan membuat form login, di mana form login ini selain membutuhkan user dan password juga membutuhkan informasi server, database dan port. Khusus untuk informasi server, database dan port secara otomatis akan membaca data yang tersimpan di dalam Key-Value Store.   Untuk tampilannya kita buat yang sederhana aja ya :grin:         Karena data yang diakses berupa RESTful API (dokumen web), di Visual Basic 6 kita menggunakan library Microsoft XML v6.0      Setelah itu kita buat sebuah method dengan nama GetRequest untuk mengakses RESTful API dengan menggunakan library Microsoft XML v6.0.      Kemudian tambahkan lagi sebuah method dengan nama LoadAppConfig, di dalam method ini kita memanggil method GetRequest dan menampilkan hasilnya ke console. Agar method ini bisa dipangil secara otomatis, kita panggil method ini di event form load.      Jika berhasil, hasilnya seperti berikut:      Nah dari gambar di atas, kita lihat bahwa hasil pemanggilan endpoint Key-Value Store ini mengembalikan data string dengan format JSON. Secara built-in VB6 tidak menyediakan library untuk mengolah data dengan format JSON, tapi untungnya di luar sana sudah ada yang berbaik hati membuatkan librarynya, sehingga mempermudah kita untuk mengolah data dengan format JSON menggunakan Visual Basic 6.      Setelah menambahkan library VB-JSON sekarang kita bisa langsung mengolah data JSONnya sebagai sebuah objek dan kemudian langsung menampilkan hasilnya ke dalam textbox server, database dan port. Berikut adalah hasil revisinya method LoadAppConfignya:      Ok sampai di sini, kita bisa langsung menjalankan aplikasi untuk melihat hasilnya. Setelah form loginnya tampil aktifkan tab Connection, di mana informasi server, database dan port sudah otomatis terisi sesuai dengan informasi Key-Value Store yang tersimpan di server consul.      Sudah tampil bukan?   Sekarang kita coba edit informasi db-confignya, melalui menu Key/Value, kemudian jalankan sekali lagi aplikasinya.      Nah secara otomatis perubahan data yang tersimpan di Key-Value Store juga akan terbaca oleh aplikasi.   Mengakses Data Key-Value Store Dari C# (.NET)   Untuk contoh berikutnya kita akan mengakses data Key-Value Store menggunakan bahasa pemrograman C# (.NET). Di C# saya biasanya menggunakan library RestSharp untuk mengakses web api, selain itu kita juga membutuhkan library Newtonsoft.Json, kenapa? Karena hasil dari pemanggilan web apinya berupa string dengan format json. Jadi kita membutuhkan library ini untuk mengkonversi string json ke objek class. Untuk menginstall kedua library ini Anda bisa menggunakan  Nuget Package Manager Console dengan perintah berikut:   Install-Package RestSharp -Version 105.2.3 Install-Package Newtonsoft.Json -v 9.0.1  Setelah menginstall ke dua library di atas, langkah berikutnya adalah kita akan menambahkan class model terlebih dulu. Class model ini saya beri nama AppConfig agar nanti hasil dari pemanggilan webnya bisa langsung kita konversi ke objek class model ini dengan bantuan library Newtonsoft.Json. Berikut contoh class model yang dibuat.         Pada gambar di atas, kita bisa lihat untuk struktur class modelnya dibuat menyesuaikan struktur json yang ada di Key-Value Store.   Setelah itu tambahkan kode berikut untuk pemanggilan web apinya.      Kemudian kita bisa langsung menjalankan aplikasi untuk melihat hasilnya. Setelah form loginnya tampil aktifkan tab Connection, di mana informasi server, database dan port sudah otomatis terisi sesuai dengan informasi Key-Value Store yang tersimpan di server consul.      Kesimpulan   Dengan menggunakan consul sebagai pusat penyimpanan konfigurasi aplikasi, akan mempermudah kita ketika terjadi perubahan konfigurasi aplikasi yang selama ini biasanya disimpan secara lokalan. Jadi kita tidak perlu merubah konfigurasi lokal aplikasi satu per satu di pc/lapton klien.   Selamat mencoba :blush:  ","categories": ["service discovery","consul"],
        "tags": ["consul","key-value"],
        "url": "http://coding4ever.net/blog/2019/08/31/menyimpan-konfigurasi-terpusat-menggunakan-consul-key-value-store-bagian-number-2/",
        "teaser": null
      },{
        "title": "Proteksi Hasil Compile Aplikasi Anda Menggunakan ConfuserEx",
        "excerpt":"Apa itu ConfuserEx?   ConfuserEx adalah tool open-source yang berfungsi untuk melindungi hasil compile aplikasi yang dikembangkan di atas platform .NET (C#, VB.NET, F# dan bahasa .NET lainnya). ConfuserEx dianggap sebagai salah satu tool obfuscators terbaik yang tersedia gratis untuk platform .NET.     Hasil compile (assembly) yang sudah diproteksi menggunakan ConfuserEx akan menyulitkan orang lain untuk membaca kembali kodenya walaupun sudah di decompile menggunakan tool decompiler sekelas JetBrains dotPeek.   .NET Framework yang disupport   Walaupun pengembangan ConfuserEx untuk saat ini sudah dihentikan. Untuk versi terakhirnya sudah mendukung .NET Framework sampai versi 4.6.x. Saya sendiri biasanya jika membuat aplikasi desktop tetap menggunakan .NET Framework versi 4.0 dengan pertimbangan agar aplikasinya tetap bisa di jalankan di Windows XP, sehingga tool ConfuserEx ini masih tetap bisa saya gunakan.   JetBrains dotPeek   JetBrains dotPeek adalah tool decompiler gratis untuk aplikasi yang dikembangkan di atas platform .NET (C#, VB.NET, F# dan bahasa .NET lainnya).   Di postingan ini saya akan menggunakan tool JetBrains dotPeek untuk keperluan uji coba decompiler hasil compile dari aplikasi .NET Framework.      Hasil Compile Aplikasi .NET Framework   Perlu diketahui bawah hasil compile dari aplikasi .NET masih dalam bentuk IL jadi belum dalam bentuk native code (bahasa mesin), sehingga dibutuhkan .NET Framework agar hasil compile ini bisa berjalan.   Ada banyak tool yang bisa dengan sempurna melakukan proses decompiler hasil compile aplikasi .NET Framework, salah satunya adalah tool JetBrains dotPeek.   Sebagai contoh sudah saya buatkan aplikasi yang akan kita coba decompile hasil compilenya menggunakan JetBrains dotPeek. Aplikasi ini bisa Anda download di sini. Ini adalah aplikasi CRUD sederhana yang sudah menerapkan konsep Repository Pattern dan MVC Pattern. Untuk database saya menggunakan MySQL.   Yuk, kita liat dulu tampilan aplikasinya         Struktur project sudah menerapkan konsep MVC Pattern      Model adalah layer yang bertugas untuk berkomunikasi dengan database secara langsung. Salah satu class yang ada di layer ini adalah class DbContext.cs. Class DbContext.cs ini bertanggung jawab untuk berinteraksi secara langsung dengan database, seperti membuat koneksi, menjalankan perintah sql seperti insert, update, delete dan select atau mengeksekusi objek database seperti store procedure dan function. Sehingga di class inilah biasanya kita menuliskan beberapa informasi rahasia seperti username dan password yang digunakan untuk melakukan koneksi ke database seperti MySQL.      Berikutnya kita akan melihat kode yang ada di class Repository. Class Repository adalah class yang berisi kode-kode untuk menjalankan operasi CRUD. Sebagai contoh kita akan melihat isi dari class ProductRepository.cs.            Setelah melihat kode di atas, sekarang akan kita lakukan proses build/compile projectnya      kemudian akan kita lakukan proses decompile menggunakan tool decompiler JetBrains dotPeek.      Pertama kita cek dulu hasil decompile class DbContext.csnya.      Mengerikan bukan hasil decompilenya, sama persis dengan kode aslinya :scream: :grin:   Sekarang kita cek juga hasil decompile class ProductRepositorynya, dan hasilnya pun sama persis dengan kode aslinya.      Nah sampai di sini sudah pahamkan, kenapa kita harus mengeluarkan usaha lebih untuk mengamankan hasil compile aplikasi kita.   ConfuserEx In Action   Ok berikutnya kita akan menambahkan proteksi hasil compile aplikasi kita menggunakan tool ConfuserEx, jadi silahkan Anda download terlebih dulu aplikasinya di sini. Kemudian Anda ekstrak, misal ke folder C:\\ConfuserEx_bin.   Ada 2 cara untuk menggunakan ConfuserEx, yaitu:      Menggunakan GUI   Menggunakan CLI (Command-line Interface)   Di postingan ini saya akan menggunakan cara yang kedua yaitu menggunakan CLI (Command-line Interface). Berikut langkah-langkahnya:           Tambahkan sebuah file dengan ekstensi .crproj (ConfuserEx project), untuk nama filenya kita samakan dengan nama projectnya, setelah itu simpan di folder aplikasi (satu folder dengan file project).              Kemudian lengkapi scriptnya seperti berikut:              Jika file yang akan diproteksi lebih dari satu, Anda bisa tambahkan setelah baris perintah &lt;module path=... /&gt;. Contoh:                   Aktifkan command prompt, kemudian Anda pindah ke folder project Anda.       Setelah itu ketik perintah: C:\\ConfuserEx_bin\\Confuser.CLI.exe NorthwindApp.crproj              tunggu beberapa saat sampai proses ConfuserExnya selesai              bisa kita lihat pada gambar output di atas, untuk file NorthwindApp.exe yang sudah diproteksi ada di folder Confused              Nah sekarang kita coba lagi untuk melakukan proses decompile ulang terhadap file hasil compile yang sudah kita tambahkan proteksi ConfuserExnya menggunakan tool decompiler yang sama yaitu JetBrains dotPeek.              Dan ini adalah hasil decompile untuk class DbContext.cs. Sudah tidak terlihat lagi kan username dan password untuk konek ke database :thumbsup:              begitu juga dengan hasil decompile untuk class ProductRepositorynya sudah terproteksi dengan baik.              Build Events   Sebenarnya pembahasan tentang ConfuserEx ini sudah selesai, tapi berhubungan perintah ConfuserEx CLI di atas masih dijalankan secara manual via command prompt tentu akan merepotkan sekali jika harus dijalankan secara berulang setiap selesai melakukan proses build/compile. Trus apa solusinya agar perintah ConfuserEx CLI di atas bisa dijalankan secara otomatis? Salah satu solusinya adalah dengan memanfaatkan fasilitas Build Events yang sudah tersedia di Visual Studio .NET. Dengan fasilitas Build Events kita bisa menuliskan perintah command prompt (shell) termasuk menjalankan perintah ConfuserEx CLI.   Nah berikut script Build Events yang harus kita buat untuk menjalankan perintah ConfuserEx CLI di atas secara otomatis setiap kali kita melakukan proses build.   rem set lokasi folder deploy set DeployDir=\"$(SolutionDir)..\\deploy\" if not exist %DeployDir% mkdir %DeployDir%  rem copy hasil build ke folder deploy copy /Y \"$(TargetDir)$(TargetFileName).config\" %DeployDir% copy /Y \"$(TargetDir)*.dll\" %DeployDir%  rem jalankan ConfuserEx CLI set ConfuserExDir=\"C:\\ConfuserEx_bin\" %ConfuserExDir%\\Confuser.CLI.exe \"$(ProjectDir)$(ProjectName).crproj\"  rem hapus file build yang tidak diperlukan del /s /q %DeployDir%\\*.vshost.* del /s /q %DeployDir%\\*.xml del /s /q %DeployDir%\\*.pdb  Untuk mengaktifkan Build Events, klik kanan nama project -&gt; Properties -&gt; tab Build Events. Kemudian copas script di atas di bagian Post-build Event Command Line.      Setelah itu lakukan proses build, dan secara otomatis perintah ConfuserEx CLI akan dijalankan.      Selamat mencoba :blush:   Referensi:      ConfuserEx project   ConfuserEx wiki  ","categories": ["ConfuserEx"],
        "tags": ["Visual Studio .NET","Build Events","obfuscators","compile","compiler","decompiler"],
        "url": "http://coding4ever.net/blog/2020/05/13/confuser-ex/",
        "teaser": null
      },{
        "title": "ReportViewer untuk .NET Developer Bagian #1",
        "excerpt":"   Tak kenal maka tak sayang, tak sayang maka tak cinta.    Mungkin inilah pepatah yang tepat sebagai pembuka postingan saya kali ini :grin:. Sudah banyak tool reporting yang saya gunakan untuk membuat laporan aplikasi mulai dari Data Report, Crystal Report, dan ActiveReport. Ketiga tool reporting ini saya gunakan ketika membuat aplikasi dengan menggunakan Visual Basic 6.   Ketika pindah ke platform .NET saya pun tetap menggunakan tool reporting yang sama yaitu Crystal Report .NET atau ActiveReport .NET. Walaupun waktu itu saya sudah mengetahui adanya ReportViewer yang merupakan tool reporting bawaan .NET, tapi ya karena memang sudah nyaman menggunakan Crystal Report .NET atau ActiveReport .NET jadi saya memang belum punya alasan atau motivasi yang kuat untuk nyobain yang namanya ReportViewer. Alasan lainnya karena waktu itu tool ReportViewer ini masih saya pandang sebelah mata, jadi saya masih mengganggap tool ini sama seperti tool Data Reportnya Visual Basic 6 yang kurang powerful untuk membuat laporan yang kompleks :grin:. Terakhir karena masalah lisensi akhirnya saya lebih memilih untuk menggunakan Crystal Report .NET dari pada ActiveReport .NET.   Nah masalah muncul ketika saya mulai mengembangkan project open source OpenRetail (2017). Sebenarnya bukan karena masalah teknis sih, tapi karena OpenRetail ini adalah project open source tentu akan menjadi mass production (produksi massal) yang akan digunakan oleh banyak orang. Masalahnya adalah file runtime Crystal Report .NET itu punya ukuran yang lumayan besar, yang terdiri dari dua versi yaitu 32 bit (75 mb) dan 64 bit (83 mb). Jadi klo saya membuat paket instalasi untuk OpenRetail berarti saya harus mengikutsertakan ke dua file runtime Crystal Report .NET tersebut. Anggap saja untuk hasil build/compile project OpenRetail ini adalah 10 mb berarti klo ditambah runtime Crystal Report .NET maka file setup yang dihasilkan akan berukuran lebih kurang 168 mb :scream:, ini belum termasuk runtime NET Framework loh ya yang berukuran 40-60 mban. Jadi boro-boro ada user yang mau nyobain, download aja males :grin:.   Singkat cerita setelah mendapat masukan dari salah satu teman yang menggunakan ReportViewer untuk tool reportingnya, saya pun memutuskan untuk menggunakan ReportViewer untuk keperluan pembuatan laporan di project OpenRetail. Motivasi utamanya jelas karena file runtime ReportViewer cuma berukuran 7.5 mb :thumbsup:.      Jadi dengan menggunakan ReportViewer ditambah dengan file-file runtime lainnya, paket instalasi OpenRetail yang dihasilnya hanya berukuran 22 mb. Lumayan ngiritkan dari 168 mb menjadi 22 mb :grin:.      Apa itu ReportViewer?   ReportViewer adalah tool reporting gratis yang dikembangkan Microsoft untuk platform .NET, selain gratis tool ini juga secara built-in sudah terinstall ketika kita menginstall Visual Studio .NET.  Tapi sejak Visual Studio 2017, kita harus menginstall secara manual ReportViewer melalui menu Tools -&gt; Extensions and Update.   Berikut adalah beberapa keuntungan menggunakan ReportViewer:      Drag-and-drop.   Mendukung beberapa operasi standar seperti filtering, sorting grouping dan aggregation.   Mendukung beberapa cara menampilkan data seperti list, tabel, grafik dan matrik (crosstabs).   Mendukung conditional formatting atau embed expressions (bisa langsung coding direportnya).   Mendukung mode print langsung atau print preview.   Bisa dengan mudah mengatur jenis font, colors, border styles, background images dll.   Bisa di ekspor ke Excel, Word and PDF formats.   Selain bisa digunakan untuk WinForm dan WPF, ReportViewer juga bisa digunakan untuk project ASP.NET Web Forms atau ASP.NET MVC.   Cara Mengirim Data ke ReportViewer   Secara umum ada 2 cara yang bisa digunakan untuk mengirim data ke report.      Pull model – kita mengeset koneksi ke database, mengirimkan perintah SQL, menentukan filter dan sisanya akan langsung ditangani oleh tool reporting. Cara yang pertama ini adalah cara umum yang biasanya digunakan untuk menampilkan data, dan rata-rata tutorial yang beredar juga menggunakan cara ini.   Push model – dengan cara yang kedua ini kita membuat tabel temporary dengan menggunakan objek DataSet, kemudian objek DataSet ini kita isi datanya dengan menggunakan objek collection, tapi sebelumnya objek collection ini kita olah dulu datanya dari aplikasi.   Tool reporting seperti CrystalReport.NET mendukung 2 cara di atas, sedangkan ReportViewer hanya mendukung cara yang kedua yaitu dengan menggunakan push model.   Nah pada postingan kali ini kita akan menggunakan cara yang kedua yaitu Push Model dengan sumber datanya berupa object collection.   Pembuatan Project ReportViewer   Adapun tool yang digunakan dalam pembuatan project kali ini adalah:      Visual Studio Community 2013, Anda bisa saja menggunakan Visual Studio .NET versi sebelumnya (2010, 2012) atau versi yang lebih tinggi   NuGet, untuk memudahkan dalam menambahkan library pihak ketiga. Adapun library pihak ketiga yang digunakan dalam sample ini adalah Dapper .NET dan System.Data.SQLite.Core   ReportViewer   Database SQLite, dengan menggunakan sample data database Northwind   Tipe project WinForm   Untuk contoh postingan kali ini, kita hanya menggunakan satu buah tabel dengan struktur seperti berikut :      Setelah semua tool yang dibutuhkan tersedia kita lanjutkan dengan pembuatan project :           Buat project baru dengan type WinForm                   Kemudian atur atau sesuaikan struktur projectnya seperti gambar berikut              Berikut keterangan atau fungsi dari folder di atas:                       Controller           Selain berisi logic aplikasi, controller juga bertanggung jawab untuk mengatur komunikasi antara View dan Model. Jadi ketika ada request dari View, Controller akan menentukan Model yang manakah yang berhak merespon request tersebut.                        Context           Folder Context berisi class yang bertanggung jawab untuk berinteraksi secara langsung dengan database, seperti membuat koneksi, menjalankan perintah sql seperti insert, update, delete dan select atau mengeksekusi objek database seperti store procedure dan function                        Entity           Folder ini berisi class-class yang disebut dengan class model/entity. Class ini merupakan representasi dari tabel-tabel yang ada di dalam database. Tujuan dari pembuatan class ini adalah agar kita bisa melakukan mapping (pemetaan) baris/row yang merupakan hasil SELECT dari sebuah tabel menjadi sekumpulan objek (object collection).                        Repository           Folder repository berisi class-class yang digunakan untuk menjalankan operasi CRUD. Untuk informasi lebih lanjut tentang bagaimana cara membuat class repository, bisa Anda baca postingan saya yang berjudul Repository Pattern.                        View           Folder ini berisi form atau file report (ReportViewer)                   Class Model/Entity   Untuk menerapkan konsep OOP (Object-oriented programming) dalam pemrograman database kita perlu membuat sebuah class yang disebut dengan istilah class Model atau Entity. Class ini merupakan representasi dari tabel-tabel yang ada di dalam database. Tujuan dari membuat class ini adalah agar kita bisa melakukan mapping (pemetaan) baris/row yang merupakan hasil SELECT dari sebuah tabel menjadi sekumpulan objek (object collection).   Pemetaan bisa dilakukan secara manual atau bisa juga secara otomatis dengan menggunakan tool-tool ORM dari pihak ketiga seperti Dapper .NET dan Entity Framework. Untuk contoh kali ini kita menggunakan Dapper .NET.      Setelah memahami apa itu class model dan bagaimana proses pemetaan record ke objek terjadi, langkah berikutnya adalah menambahkan class model/entity Product yang mempunyai struktur sama persis dengan rancangan tabel di awal.   Berikut langkah-langkah untuk menambahkan class model/entity.           Klik kanan folder Entity -&gt; Add -&gt; Class…                                 Kemudian lengkapi kodenya seperti berikut:              Yang perlu diperhatikan pada saat membuat class model/entity, untuk penamaan property class sebaiknya disamakan dengan nama field yang ada di tabel. Jadi nanti akan mempermudah kita melakukan proses mapping (pemetaan) baris/row yang merupakan hasil SELECT dari sebuah tabel menjadi sekumpulan objek (object collection)       Class Repository dan Controller   Class Repository adalah class yang bertugas untuk menangani operasi database yang dikenal dengan istilah operasi CRUD (Create, Read, Update dan Delete). Di dalam class inilah kita menuliskan perintah-perintah SQL seperti INSERT, UPDATE, DELETE dan SELECT.   Sebagai contoh kita akan mengambil salah satu method yang ada di dalam class ProductRepository yaitu method GetAll. Method ini akan mengeksekusi perintah SQL SELECT kemudian merubah/mengonversi hasilnya yang berupa objek resultset menjadi objek collection dengan bantuan library Dapper.NET.      Method GetAll yang ada di dalam class ProductRepository ini tidak langsung di panggil dari Form (View), tapi kita buatkan terlebih dulu method di class Controllernya dengan nama yang sama yaitu GetAll.      Setelah itu baru kita panggil dari Form (View).      Berikut adalah hasil dari pemanggilan kode di atas      DataSet   Dengan model data push kita tidak langsung menghubungkan antara ReportViewer dengan database, jadi sebagai solusinya kita menggunakan DataSet yang berfungsi sebagai tabel temporary dan menjadi sumber data bagi ReportViewer. DataSet ini sendiri, nantinya akan kita isi datanya berupa objek collection yang kita dapatkan dari pemanggilan method GetAll di atas.   Ada beberapa cara untuk membuat DataSet yaitu:           Secara otomatis dengan memanfaatkan fasilitas Data Source, melalui menu Project -&gt; Add New Data Source…       Dengan cara pertama ini kita bisa langsung memilih database berikut tabel atau view (query) yang datanya akan ditampilkan ke ReportViewer. Objek DataSet dan DataTablenya sudah otomatis dibuatkan.            Secara manual dengan menambahkan objek DataSet melalui klik kanan Project -&gt; Add -&gt; New Item… -&gt; DataSet       Dengan cara yang kedua ini kita akan membuat objek DataSet dan DataTable secara manual.       Di postingan ini kita akan menggunakan cara kedua. Berikut langkah-langkahnya:           Klik kanan folder Report -&gt; Add -&gt; New Item…                          Langkah berikutnya kita menambahkan DataTable       Caranya dengan klik kanan pada Designer Dataset              Kemudian ganti nama DataTablenya menjadi Product. Untuk semua field yang ada di DataTable Product harus disesuaikan dengan struktur tabel product atau sesuai dengan property yang ada di dalam class Product.              Mendesain Laporan Menggunakan ReportViewer   ReportViewer adalah tool reporting gratis yang dikembangkan Microsoft untuk platform .NET, selain gratis tool ini juga secara built-in sudah terinstall ketika kita menginstall Visual Studio .NET.   Berikut langkah-langkah mendesain laporan menggunakan ReportViewer:           Klik kanan folder Report -&gt; Add -&gt; New Item…              setelah itu akan tampil Designer ReportViewer              kemudian atur property Copy to Output Directory menjadi Copy if Newer.                   Berikutnya aktifkan panel Report Data melalui menu View -&gt; Report Data       selanjutnya klik kanan folder Datasets -&gt; Add Dataset…              kemudian atur nilai properties datasetnya seperti gambar berikut:                          Untuk menampilkan data dalam bentuk tabel kita bisa menggunakan komponen Table       Caranya klik kanan Designer ReportViewer -&gt; Insert -&gt; Table              setelah itu atur ukuran tabelnya seperti berikut:              Kemudian drag field-field yang akan ditampilkan ke komponen tabel.              Jika kolom/field tabelnya masih kurang, untuk menambahkannya kita tinggal klik kanan kolom yang terakhir -&gt; insert column -&gt; right. Anda bisa mengulangi langkah-langkah ini sampai semua kolom/field yang dibutuhkan sudah lengkap.              Khusus untuk kolom No (No urut) karena nilainya tidak dibaca dari Dataset, kita bisa menggunakan built-in function RowNumber untuk mendapatkan nomor baris. Jadi kita tinggal panggil fungsi ini melalui property Value.              Berikut hasil akhir design komponen tabel yang sudah dirapikan              Untuk menambahkan judul laporan di atas (LAPORAN PRODUCT), kita bisa menggunakan komponen TextBox.              Menambahkan Komponen ReportViewer   Setelah semua persiapan selesai, langkah berikutnya adalah menambahkan komponen ReportViewer yang berfungsi sebagai container untuk untuk menampilkan report. Tapi sebelumnya kita akan menambahkan terlebih dulu form baru untuk menempatkan komponen ReportViewer ini. Form baru ini kita beri nama FrmPreview, di form inilah kita akan menempatkan komponen ReportViewer.      Berikut langkah-langkah menambahkan komponen ReportViewer:           Aktifkan FrmPreview kemudian tambahkan Komponen ReportViewer              kemudian tambahkan kode berikut di FrmPreview                   Setelah menambahkan kode di atas, kembali ke FrmProduct kemudian klik ganda button Preview              kemudian lengkapi kodenya seperti berikut:              Setelah melengkapi kode terakhir ini, kita tinggal jalankan aplikasinya kemudian klik button Preview. Berikut adalah contoh hasil laporan yang dibuat menggunakan ReportViewer :blush: :thumbsup:.              Selamat MENCOBA :blush:   Referensi:      Got ReportViewer   Use the WinForms ReportViewer Control  ","categories": ["ReportViewer","Visual C#","Dapper .NET"],
        "tags": ["ReportViewer","Push model","Pull model"],
        "url": "http://coding4ever.net/blog/2020/05/23/reportviewer-1/",
        "teaser": null
      },{
        "title": "WhatsApp Client Library untuk .NET Developer",
        "excerpt":"WhatsApp NET Client adalah library untuk .NET Developer yang digunakan untuk mengembangkan aplikasi WhatsApp klien berbasis desktop. Library ini dikembangkan di atas teknologi .NET dengan menggunakan bahasa pemrograman C#, sehingga bisa juga digunakan untuk semua bahasa pemrograman .NET selain C# seperti VB.NET, F#, C++ dan bahasa .NET lainnya.   Dengan menggunakan library ini Anda bisa dengan mudah membuat aplikasi:      WhatsApp Blast   WhatsApp Bot   Dan aplikasi WhatsApp klien lainnya   Fitur      Mode siluman (headless/no window). Dengan mengaktifkan mode siluman, chrome browser akan berjalan di background   Grab contacts untuk membaca kontak WA sehingga hasilnya bisa Anda simpan ke database   Mengirim pesan   Mengirim banyak pesan (broadcast)   Mengirim pesan dengan gambar (bisa untuk pesan tunggal atau broadcast)   Mengirim file dokumen (bisa untuk pesan tunggal atau broadcast)   Mengirim pesan ke nomor/kontak yang belum terdaftar   Listen/subscribe pesan yang masuk, jadi enggak perlu nambah objek timer lagi untuk membaca pesan masuk   Listen/subscribe pesan yang dikirim, dengan fitur ini kita bisa mengecek apakah pesan sudah terkirim atau belum.   Auto replay pesan yang masuk   Otomatis login (Jadi enggak perlu bolak-balik nyecan QRCode WAnya, cukup sekali aja)   Semua method yang ada kecuali method untuk konek ke WA/Chrome browser, dibuat secara async (asynchronous) sehingga tidak memblok UI ketika dijalankan   Bisa dengan mudah diintegrasikan dengan semua jenis database   Persyaratan Sistem      .NET Framework 4.0, 4.5 dan .NET versi terbaru   Versi minimal Google Chrome harus versi 83.xx (jadi klo belum sama silahkan diupdate dulu)   Instalasi      Download contoh source code di https://github.com/WhatsAppNETClient/WhatsAppNETClient   Copykan file chromedriver.exe yang ada di folder libs ke folder bin\\Debug atau bin\\Release   Jika folder bin\\Debug atau bin\\Release belum ada, silahkan lakukan proses build project terlebih dulu.   Screenshot   Di bawah ini adalah contoh aplikasi desktop yang dibuat dengan bantuan library WhatsApp NET Client.               Selamat MENCOBA :blush:   Referensi:      WhatsApp Client Library for .NET Developer  ","categories": ["WhatsApp NET Client"],
        "tags": ["WhatsApp NET Client"],
        "url": "http://coding4ever.net/blog/2020/07/07/whatsapp-net-client/",
        "teaser": null
      },{
        "title": "Membuat WhatsApp Bot itu gampang, jangan dipersulit !",
        "excerpt":"Beberapa waktu yang lalu saya merilis sebuah library dengan nama WhatsApp NET Client. Library ini merupakan hadiah dari saya :grin: untuk teman-teman .NET Developer yang ingin membuat aplikasi yang bisa berkomunikasi dengan aplikasi WhatsApp Web secara mudah.   Dengan menggunakan library ini Anda bisa dengan mudah membuat aplikasi:      WhatsApp Blast   WhatsApp Bot   Dan Aplikasi WhatsApp klien lainnya   Jadi dipostingan kali ini kita akan memahas bagaimana mudahnya membuat aplikasi WhatsApp Bot dengan menggunakan library WhatsApp NET Client. Jadi Anda tidak perlu lagi memikirkan bagaimana caranya berkomunikasi dengan WhatsApp web sehingga bisa lebih fokus ke proses bisnis atau logic aplikasi yang ingin dikembangkan.   Ok untuk contoh kasusnya kita akan membuat WhatsApp Bot dengan tema Tes Online Bahasa Inggris. Di tes online ini kita akan menjawab soalnya bahasa inggris dengan pilihan ganda.      Database   Pertama kita rancang dulu databasenya dan berhubung dulu saya juga pernah menulis postingan tentang database SQLite jadi untuk databasenya kita menggunakan SQLite saja.   SQLite adalah database standalone yang kecil, mungil dan gratis. Bagaimana cara membuat database di SQLite sudah saya bahas juga di sini kemudian bagaimana mengaksesnya dari aplikasi juga sudah saya bahasa di sini.   Berikut adalah rancangan sederhana database tes online bahasa inggris yang akan kita buat :      Mengakses WhatsApp Web   Ada banyak cara agar aplikasi kita berkomunikasi dengan WhatsApp Web, yang pertama bisa dengan menggunakan Selenium WebDriver secara langsung, tapi tentunya cara ini (menggunakan Selenium WebDriver) bukan cara yang favorit dikalangan programmer instan seperti Anda dan Saya :grin:, jadi dipostingan ini saya menggunakan library siap pakai seperti WhatsApp NET Client yang bisa dengan mudah berkomunikasi dengan WhatsApp Web.      Ingat library ini adalah library gratis, segala resiko (kemudahan dalam membuat aplikasi WhatsApp Bot) silahkan ditanggung sendiri :grin:.    WhatsApp NET Client   WhatsApp NET Client adalah library gratis untuk .NET Developer yang digunakan untuk mengembangkan aplikasi WhatsApp klien berbasis desktop. Library ini dikembangkan di atas teknologi .NET dengan menggunakan bahasa pemrograman C#, sehingga bisa juga digunakan untuk semua bahasa pemrograman .NET selain C# seperti VB.NET, F#, C++ dan bahasa .NET lainnya.   WhatsApp NET Client mempunyai beberapa fungsi standard seperti membaca/membalas pesan yang masuk. Sehingga dengan adanya fitur ini kita bisa dengan mudah membuat aplikasi seperti WhatsApp Bot.   Berikut adalah beberapa cuplikan kode untuk membuat aplikasi WhatsApp Bot menggunakan library WhatsApp NET Client:   1. Mengakses WhatsApp Web   Langkah pertama yang harus kita lakukan adalah mengakses WhatsApp Web langsung dari library WhatsApp NET Client. Untuk mengakses WhatsApp Web kita cukup memanggil method Connect dari objek WhatsApp NET Client.   private IWhatsAppNETAPI _whatsAppApi; // deklarasi objek WhatsApp NET Client  private void btnStart_Click(object sender, EventArgs e) {     _whatsAppApi = new WhatsAppNETAPI.WhatsAppNETAPI();      var url = \"https://web.whatsapp.com\";      using (new StCursor(Cursors.WaitCursor, new TimeSpan(0, 0, 0, 0)))     {         // buka chrome web browser untuk menjalankan WhatsApp Web         if (_whatsAppApi.Connect(url))         {             while (!_whatsAppApi.OnReady())             {                 Thread.Sleep(1000);             }              // subscribe event OnMessageRecieved              _whatsAppApi.OnMessageRecieved += OnMessageRecievedEventHandler;             _whatsAppApi.MessageSubscribe();              btnStart.Enabled = false;             btnStop.Enabled = true;         }         else             _whatsAppApi.Disconnect();     } }  2. Subcribe/listen pesan yang masuk   Untuk subcribe/listen pesan yang masuk kita cukup menambahkan kode berikut:   _whatsAppApi.OnMessageRecieved += OnMessageRecievedEventHandler; _whatsAppApi.MessageSubscribe();  Kode di atas di panggil pada saat user menekan tombol Start (Langkah 1 - Mengakses WhatsApp Web). Untuk keperluan subscribe event OnMessageRecieved ini, kita perlu menyediakan method event handler yang akan merespon ketika event OnMessageRecieved tersebut aktif.   private void OnMessageRecievedEventHandler(MsgArgs e) {                 var user = new User     {         user_id = e.Sender     };      var chat = new Chat     {         user_id = e.Sender,         text = e.Msg     };      var msgToReplay = string.Empty;     AutoReplay(user, chat, ref msgToReplay);      _whatsAppApi.SendMessage(new MsgArgs(e.Sender, msgToReplay)); }  Ketika method ini dijalankan, di dalamnya kita akan melakukan parsing pesan yang masuk, mengolahnya, dan kemudian mengirimkan hasilnya dengan memanggil method SendMessage.   3. Memparsing pesan yang masuk kemudian membalasnya   Langkah berikutnya adalah menyiapkan method yang bertugas untuk memparsing pesan yang masuk.   private void AutoReplay(User user, Chat chat, ref string msgToReplay) {     if (chat.text.Length &gt; 0)     {         var splitPesan = chat.text.Split(' ');         var keyword = splitPesan[0];         var param = string.Empty;          if (splitPesan.Count() &gt; 1) param = splitPesan[1];          SaveUser(user);         SaveChat(chat);                          var perintahBot = new PerintahBot();          switch (keyword.ToLower())         {             case \"/about\":                 msgToReplay = string.Format(ABOUT, _currentVersion, AUTHOR, EMAIL, URL);                 break;              case \"/bantuan\":                 msgToReplay = string.Format(BANTUAN, _currentVersion, AUTHOR, EMAIL, URL);                 break;              case \"/mulai\":                 perintahBot.Mulai(user.user_id, ref msgToReplay);                 break;              case \"/soal\":                 perintahBot.Soal(user.user_id, ref msgToReplay);                 break;              case \"/soalterakhir\":                 perintahBot.SoalTerakhir(user.user_id, ref msgToReplay);                 break;              case \"/jawab\":                 perintahBot.Jawab(user.user_id, param, ref msgToReplay);                                         break;              case \"/batal\":                 perintahBot.Batal(user.user_id, ref msgToReplay);                 break;              case \"/selesai\":                 perintahBot.Selesai(user.user_id, ref msgToReplay);                                         break;              default:                 msgToReplay = string.Format(PERINTAH_SALAH, keyword.ToLower());                 break;         }          Console.WriteLine(\"msgToReplay: {0}\", msgToReplay);     } }  Kemudian method ini kita panggil melalui method OnMessageRecievedEventHandler.      4. Menutup WhatsApp Web   Terakhir untuk menutup komunikasi ke WhatsApp Web, kita cukup memanggil method Disconnect dari object WhatsApp NET Client   private void btnStop_Click(object sender, EventArgs e) {     using (new StCursor(Cursors.WaitCursor, new TimeSpan(0, 0, 0, 0)))     {         // unsubscribe event OnMessageRecieved          _whatsAppApi.OnMessageRecieved -= OnMessageRecievedEventHandler;         _whatsAppApi.MessageUnSubscribe();          // tutup chrome web browser         _whatsAppApi.Disconnect();          btnStart.Enabled = true;         btnStop.Enabled = false;     }       }  Screenshot   Ini adalah tampilkan aplikasi utama WhatsApp Bot.      Dan di bawah ini adalah screenshot ketika Anda berinteraksi dengan WhatsApp Bot via WhatsApp mobile.   1. Menampilkan perintah yang tersedia   Untuk menampilkan perintah yang tersedia, cukup dengan mengirimkan pesan: /bantuan      2. Memulai sesi tes online   Untuk memulai sesi tes online, kirimkan pesan: /mulai      3. Menampilkan soal tes   Untuk menampilkan soal tes online, kirimkan pesan: /soal dan untuk menjawabnya kirim pesan: /jawab jawaban         4. Selesai   Terakhir untuk mengakhiri sesi tes online, kirimkan pesan: /selesai      Selamat MENCOBA :blush:   Referensi:      WhatsApp Client Library for .NET Developer   Full Emoji List - kode unicode untuk menampilkan emoji  ","categories": ["WhatsApp"],
        "tags": ["WhatsApp","WhatsApp Bot"],
        "url": "http://coding4ever.net/blog/2020/11/22/whatsapp-bot/",
        "teaser": null
      }]
